/** \mainpage Driver Overview
  *
  * \section section_drv_info Driver Information
  * This Sensor Controller Interface driver has been generated by the Texas Instruments Sensor Controller
  * Studio tool:
  * - <b>Project name</b>:     Airborne
  * - <b>Project file</b>:     C:/Users/tbriggs/Documents/Texas Instruments/Sensor Controller Studio/projects/airborne.scp
  * - <b>Code prefix</b>:      SCS
  * - <b>Operating system</b>: None
  * - <b>Tool version</b>:     2.1.0.440
  * - <b>Tool patches</b>:     None
  * - <b>Target chip</b>:      CC1310, revision -, package QFN48 7x7 RGZ
  * - <b>Created</b>:          2018-10-22 13:06:56.857
  * - <b>Computer</b>:         TBRIGGS-PC
  * - <b>User</b>:             tbriggs
  *
  * No user-provided resource definitions were used to generate this driver.
  *
  * No user-provided procedure definitions were used to generate this driver.
  *
  * Do not edit the generated source code files other than temporarily for debug purposes. Any
  * modifications will be overwritten by the Sensor Controller Studio when generating new output.
  *
  * \section section_drv_modules Driver Modules
  * The driver is divided into three modules:
  * - \ref module_scif_generic_interface, providing the API for:
  *     - Initializing and uninitializing the driver
  *     - Task control (for starting, stopping and executing Sensor Controller tasks)
  *     - Task data exchange (for producing input data to and consume output data from Sensor Controller
  *       tasks)
  * - \ref module_scif_driver_setup, containing:
  *     - The AUX RAM image (Sensor Controller code and data)
  *     - I/O mapping information
  *     - Task data structure information
  *     - Driver setup data, to be used in the driver initialization
  *     - Project-specific functionality
  * - \ref module_scif_osal, for flexible OS support:
  *     - Interfaces with the selected operating system
  *
  * It is possible to use output from multiple Sensor Controller Studio projects in one application. Only
  * one driver setup may be active at a time, but it is possible to switch between these setups. When
  * using this option, there is one instance of the \ref module_scif_generic_interface and
  * \ref module_scif_osal modules, and multiple instances of the \ref module_scif_driver_setup module.
  * This requires that:
  * - The outputs must be generated using the same version of Sensor Controller Studio
  * - The outputs must use the same operating system
  * - The outputs must use different source code prefixes (inserted into all globals of the
  *   \ref module_scif_driver_setup)
  *
  *
  * \section section_project_info Project Description
  * Final airborne sensor controller studio code.  Must read the Si7020, MS5637, and battery voltage.
  *
  *
  * \subsection section_io_mapping I/O Mapping
  * Task I/O functions are mapped to the following pins:
  * - ReadSensors:
  *     - <b>A: Battery voltage</b>: DIO26
  *     - <b>XD: Auxillary voltage rail</b>: DIO7
  *     - <b>I2C SCL</b>: DIO4
  *     - <b>I2C SDA</b>: DIO5
  *
  *
  * \section section_task_info Task Description(s)
  * This driver supports the following task(s):
  *
  *
  * \subsection section_task_desc_read_sensors ReadSensors
  * No description entered
  *
  */




/** \addtogroup module_scif_driver_setup Driver Setup
  *
  * \section section_driver_setup_overview Overview
  *
  * This driver setup instance has been generated for:
  * - <b>Project name</b>:     Airborne
  * - <b>Code prefix</b>:      SCS
  *
  * The driver setup module contains the generated output from the Sensor Controller Studio project:
  * - Location of task control and scheduling data structures in AUX RAM
  * - The AUX RAM image, and the size the image
  * - Task data structure information (location, size and buffer count)
  * - I/O pin mapping translation table
  * - Task resource initialization and uninitialization functions
  * - Hooks for run-time logging
  *
  * @{
  */
#ifndef SCIF_SCS_H
#define SCIF_SCS_H

#include <stdint.h>
#include <stdbool.h>
#include "scif_framework.h"
#include "scif_osal_none.h"


/// Target chip name
#define SCIF_SCS_TARGET_CHIP_NAME_CC1310
/// Target chip package
#define SCIF_SCS_TARGET_CHIP_PACKAGE_QFN48_7X7_RGZ

/// Number of tasks implemented by this driver
#define SCIF_SCS_TASK_COUNT 1

/// ReadSensors: Task ID
#define SCIF_SCS_READ_SENSORS_TASK_ID 0


/// ReadSensors: MS5637 device address
#define SCIF_SCS_READ_SENSORS_MS5637_ADDR 118
/// ReadSensors: 24-bit value
#define SCIF_SCS_READ_SENSORS_MS5637_BYTES 3
/// ReadSensors: Read humidity
#define SCIF_SCS_READ_SENSORS_MS5637_CMD_D1_256 64
/// ReadSensors: Read temperature
#define SCIF_SCS_READ_SENSORS_MS5637_CMD_D2_256 80
/// ReadSensors: Reset command
#define SCIF_SCS_READ_SENSORS_MS5637_CMD_RESET 30
/// ReadSensors: Number of PROM Bytes
#define SCIF_SCS_READ_SENSORS_MS5637_PROM_WORDS 7
/// ReadSensors: Si7020 Device address 
#define SCIF_SCS_READ_SENSORS_SI7020_ADDR 64
/// ReadSensors: Number of  result bytes
#define SCIF_SCS_READ_SENSORS_SI7020_BYTES 2
/// ReadSensors: Read humidity command
#define SCIF_SCS_READ_SENSORS_SI7020_HUMID 229
/// ReadSensors: Reset command
#define SCIF_SCS_READ_SENSORS_SI7020_RESET 254
/// ReadSensors: Read temperature command
#define SCIF_SCS_READ_SENSORS_SI7020_TEMP 224
/// ReadSensors I/O mapping: Battery voltage
#define SCIF_SCS_READ_SENSORS_DIO_A_VBAT 26
/// ReadSensors I/O mapping: Auxillary voltage rail
#define SCIF_SCS_READ_SENSORS_DIO_XD_AUX_EN 7
/// ReadSensors I/O mapping: I2C SCL
#define SCIF_SCS_READ_SENSORS_DIO_I2C_SCL 4
/// ReadSensors I/O mapping: I2C SDA
#define SCIF_SCS_READ_SENSORS_DIO_I2C_SDA 5


// All shared data structures in AUX RAM need to be packed
#pragma pack(push, 2)


/// ReadSensors: Task output data structure
typedef struct {
    uint16_t i2cerror;       ///< I2C error code
    uint16_t ms5637cal[7];   ///< number of calibration bytes
    uint16_t ms5637press[3]; ///< MS5637 pressure reading
    uint16_t ms5637temp[3];  ///< MS5637 temperature
    uint16_t si7020humid[2]; ///< Si7020 humidity
    uint16_t si7020temp[2];  ///< Si7020 temperature
    uint16_t vbat;           ///< Battery voltage level
} SCIF_SCS_READ_SENSORS_OUTPUT_T;


/// ReadSensors: Task state structure
typedef struct {
    uint16_t i2cStatus; ///< I2C master status
} SCIF_SCS_READ_SENSORS_STATE_T;


/// Sensor Controller task data (configuration, input buffer(s), output buffer(s) and internal state)
typedef struct {
    struct {
        SCIF_SCS_READ_SENSORS_OUTPUT_T output;
        SCIF_SCS_READ_SENSORS_STATE_T state;
    } readSensors;
} SCIF_SCS_TASK_DATA_T;

/// Sensor Controller task generic control (located in AUX RAM)
#define scifScsTaskData    (*((volatile SCIF_SCS_TASK_DATA_T*) 0x400E00EA))


// Initialized internal driver data, to be used in the call to \ref scifInit()
extern const SCIF_DATA_T scifScsDriverSetup;


// Restore previous struct packing setting
#pragma pack(pop)


// AUX I/O re-initialization functions
void scifScsReinitTaskIo(uint32_t bvTaskIds);


// No task-specific API available


#endif
//@}


// Generated by TBRIGGS-PC at 2018-10-22 13:06:56.857

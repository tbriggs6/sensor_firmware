diff --git a/arch/platform/simplelink/cc13xx-cc26xx/custom/Makefile.launchpad b/arch/platform/simplelink/cc13xx-cc26xx/custom/Makefile.launchpad
new file mode 100644
index 000000000..66ac2df24
--- /dev/null
+++ b/arch/platform/simplelink/cc13xx-cc26xx/custom/Makefile.launchpad
@@ -0,0 +1,9 @@
+################################################################################
+# SimpleLink LaunchPad makefile
+
+BOARD_TYPE = BOARD_LAUNCHPAD
+
+# leds-arch.c etc.
+BOARD_SOURCEFILES += button-sensor-arch.c leds-arch.c
+
+TARGET_FAMILY_DIRS += launchpad
diff --git a/arch/platform/simplelink/cc13xx-cc26xx/custom/board-conf.h b/arch/platform/simplelink/cc13xx-cc26xx/custom/board-conf.h
new file mode 100644
index 000000000..e139653dc
--- /dev/null
+++ b/arch/platform/simplelink/cc13xx-cc26xx/custom/board-conf.h
@@ -0,0 +1,110 @@
+/*
+ * Copyright (c) 2018, Texas Instruments Incorporated - http://www.ti.com/
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/**
+ * \addtogroup cc13xx-cc26xx-platform
+ * @{
+ *
+ * \defgroup launchpad-peripherals LaunchPad peripherals
+ *
+ * Defines related to configuring LaunchPad peripherals. All LaunchPads
+ * are identical to a very large extent. Everything documented within this
+ * group applies to both sensortags
+ *
+ * @{
+ *
+ * \file
+ *        Header file with definitions related to LaunchPad boards.
+ * \author
+ *        Edvard Pettersen <e.pettersen@ti.com>
+ * \note
+ *        This file should not be included directly
+ */
+/*---------------------------------------------------------------------------*/
+#ifndef BOARD_CONF_H_
+#define BOARD_CONF_H_
+/*---------------------------------------------------------------------------*/
+#include "rf-conf.h"
+/*---------------------------------------------------------------------------*/
+/**
+ * \name LED configurations for the dev/leds.h API.
+ *
+ * Those values are not meant to be modified by the user
+ * @{
+ */
+#define PLATFORM_HAS_LEDS           1
+
+#define LEDS_CONF_COUNT             2
+
+#define LEDS_CONF_RED               0
+#define LEDS_CONF_GREEN             1
+
+#define LEDS_CONF_ALL               ((1 << LEDS_CONF_COUNT) - 1)
+/** @} */
+/*---------------------------------------------------------------------------*/
+/**
+ * \name Button configurations for the dev/button-hal.h API.
+ *
+ * Those values are not meant to be modified by the user
+ * @{
+ */
+#define PLATFORM_HAS_BUTTON           1
+#define PLATFORM_SUPPORTS_BUTTON_HAL  1
+
+#define BUTTON_HAL_ID_BTN1      0
+#define BUTTON_HAL_ID_BTN2      1
+#define BUTTON_HAL_ID_BTN3			2
+/** @} */
+/*---------------------------------------------------------------------------*/
+/**
+ * \name LaunchPad does not have any sensors.
+ *
+ * Those values are not meant to be modified by the user
+ * @{
+ */
+#define BOARD_CONF_HAS_SENSORS      0
+/** @} */
+/*---------------------------------------------------------------------------*/
+/**
+ * \name The external flash SPI CS pin, defined in Board.h.
+ *
+ * Note that SPI SCK, MOSI and MISO does not need to be defined, as they are
+ * implicitly defined via the Board_SPI0 controller.
+ *
+ * Those values are not meant to be modified by the user
+ * @{
+ */
+/** @} */
+/*---------------------------------------------------------------------------*/
+#endif /* BOARD_CONF_H_ */
+/*---------------------------------------------------------------------------*/
+/**
+ * @}
+ * @}
+ */
diff --git a/arch/platform/simplelink/cc13xx-cc26xx/custom/board-peripherals.h b/arch/platform/simplelink/cc13xx-cc26xx/custom/board-peripherals.h
new file mode 100644
index 000000000..528ddb26f
--- /dev/null
+++ b/arch/platform/simplelink/cc13xx-cc26xx/custom/board-peripherals.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2018, Texas Instruments Incorporated - http://www.ti.com/
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/**
+ * \addtogroup cc13xx-cc26xx-platform
+ * @{
+ *
+ * \defgroup launchpad-peripherals LaunchPad peripherals
+ *
+ *        Defines related to configuring LaunchPad peripherals. All
+ *        LaunchPads are identical to a very large extent. Everything
+ *        documented within this group applies to all LaunchPads.
+ *
+ * @{
+ *
+ * \file
+ *        Header file with definitions related to LaunchPad boards.
+ * \author
+ *        Edvard Pettersen <e.pettersen@ti.com>
+ */
+/*---------------------------------------------------------------------------*/
+#ifndef BOARD_PERIPHERALS_H_
+#define BOARD_PERIPHERALS_H_
+/*---------------------------------------------------------------------------*/
+#include "board-conf.h"
+/*---------------------------------------------------------------------------*/
+#endif /* BOARD_PERIPHERALS_H_ */
+/*---------------------------------------------------------------------------*/
+/**
+ * @}
+ * @}
+ */
diff --git a/arch/platform/simplelink/cc13xx-cc26xx/custom/button-sensor-arch.c b/arch/platform/simplelink/cc13xx-cc26xx/custom/button-sensor-arch.c
new file mode 100644
index 000000000..2e6c87c7d
--- /dev/null
+++ b/arch/platform/simplelink/cc13xx-cc26xx/custom/button-sensor-arch.c
@@ -0,0 +1,78 @@
+/*
+ * Copyright (c) 2018, Texas Instruments Incorporated - http://www.ti.com/
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/**
+ * \addtogroup launchpad-peripherals
+ * @{
+ *
+ * \file
+ *        Button HAL definitions for the LaunchPad buttons. Common across
+ *        all CC13xx/CC26xx LaunchPad boards.
+ * \author
+ *        Edvard Pettersen <e.pettersen@ti.com>
+ */
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "dev/button-hal.h"
+/*---------------------------------------------------------------------------*/
+#include <Board.h>
+/*---------------------------------------------------------------------------*/
+/* Key left button, AKA BTN-1. */
+BUTTON_HAL_BUTTON(
+  key_btn1,                     /**< Name */
+  "Button 1",                   /**< Description */
+  Board_PIN_BTN1,               /**< Board PIN */
+  GPIO_HAL_PIN_CFG_PULL_UP |
+  GPIO_HAL_PIN_CFG_HYSTERESIS,  /**< Pull configuration */
+	BUTTON_HAL_ID_BTN1,       /**< Unique ID */
+  true);                        /**< Negative logic */
+
+/* Key right button, AKA BTN-2. */
+BUTTON_HAL_BUTTON(
+  key_btn2,                    /**< Name */
+  "Button 2",                  /**< Description */
+  Board_PIN_BTN2,               /**< Board PIN */
+  GPIO_HAL_PIN_CFG_PULL_UP |
+  GPIO_HAL_PIN_CFG_HYSTERESIS,  /**< Pull configuration */
+	BUTTON_HAL_ID_BTN2,      /**< Unique ID */
+  true);                        /**< Negative logic */
+/*---------------------------------------------------------------------------*/
+
+BUTTON_HAL_BUTTON(
+  key_btn3,                    /**< Name */
+  "Button 3",                  /**< Description */
+  Board_PIN_BTN3,               /**< Board PIN */
+  GPIO_HAL_PIN_CFG_PULL_UP |
+  GPIO_HAL_PIN_CFG_HYSTERESIS,  /**< Pull configuration */
+	BUTTON_HAL_ID_BTN3,      /**< Unique ID */
+  true);                        /**< Negative logic */
+
+BUTTON_HAL_BUTTONS(&key_btn1, &key_btn2, &key_btn3);
+/*---------------------------------------------------------------------------*/
+/** @} */
diff --git a/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/Board.h b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/Board.h
new file mode 100644
index 000000000..fcb67265c
--- /dev/null
+++ b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/Board.h
@@ -0,0 +1,170 @@
+/*
+ * Copyright (c) 2015-2019, Texas Instruments Incorporated
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * *  Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * *  Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * *  Neither the name of Texas Instruments Incorporated nor the names of
+ *    its contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef __BOARD_H
+#define __BOARD_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <ti/drivers/Board.h>
+#include "CC1310_LAUNCHXL.h"
+
+#define Board_CC1310_LAUNCHXL
+#define BOARD_STRING             "TI CC1310 LaunchPad"
+
+#define Board_initGeneral()      Board_init()  /* deprecated */
+#define Board_shutDownExtFlash() CC1310_LAUNCHXL_shutDownExtFlash()
+#define Board_wakeUpExtFlash()   CC1310_LAUNCHXL_wakeUpExtFlash()
+
+/* These #defines allow us to reuse TI-RTOS across other device families */
+
+//#define Board_ADC0              CC1310_LAUNCHXL_ADC0
+//#define Board_ADC1              CC1310_LAUNCHXL_ADC1
+
+//#define Board_ADCBUF0           CC1310_LAUNCHXL_ADCBUF0
+//#define Board_ADCBUF0CHANNEL0   CC1310_LAUNCHXL_ADCBUF0CHANNEL0
+//#define Board_ADCBUF0CHANNEL1   CC1310_LAUNCHXL_ADCBUF0CHANNEL1
+
+#define Board_CRYPTO0           CC1310_LAUNCHXL_CRYPTO0
+#define Board_AESCCM0           CC1310_LAUNCHXL_AESCCM0
+#define Board_AESGCM0           CC1310_LAUNCHXL_AESGCM0
+#define Board_AESCBC0           CC1310_LAUNCHXL_AESCBC0
+#define Board_AESCTR0           CC1310_LAUNCHXL_AESCTR0
+#define Board_AESECB0           CC1310_LAUNCHXL_AESECB0
+#define Board_AESCTRDRBG0       CC1310_LAUNCHXL_AESCTRDRBG0
+#define Board_TRNG0             CC1310_LAUNCHXL_TRNG0
+
+#define Board_DIO0              CC1310_LAUNCHXL_DIO0
+#define Board_DIO6              CC1310_LAUNCHXL_DIO6
+#define Board_DIO7              CC1310_LAUNCHXL_DIO7
+#define Board_DIO8              CC1310_LAUNCHXL_DIO8
+#define Board_DIO9              CC1310_LAUNCHXL_DIO9
+#define Board_DIO10             CC1310_LAUNCHXL_DIO10
+#define Board_DIO13             CC1310_LAUNCHXL_DIO13
+#define Board_DIO14             CC1310_LAUNCHXL_DIO14
+#define Board_DIO15             CC1310_LAUNCHXL_DIO15
+#define Board_DIO18             CC1310_LAUNCHXL_DIO18
+#define Board_DIO19             CC1310_LAUNCHXL_DIO19
+#define Board_DIO20             CC1310_LAUNCHXL_DIO20
+#define Board_DIO21             CC1310_LAUNCHXL_DIO21
+#define Board_DIO22             CC1310_LAUNCHXL_DIO22
+#define Board_DIO26             CC1310_LAUNCHXL_DIO26
+#define Board_DIO27             CC1310_LAUNCHXL_DIO27
+#define Board_DIO16_TDO         CC1310_LAUNCHXL_DIO16_TDO
+#define Board_DIO17_TDI         CC1310_LAUNCHXL_DIO17_TDI
+
+#define Board_GPIO_BUTTON0      CC1310_LAUNCHXL_GPIO_S1
+#define Board_GPIO_BUTTON1      CC1310_LAUNCHXL_GPIO_S2
+#define Board_GPIO_BUTTON2      CC1310_LAUNCHXL_GPIO_S2
+#define Board_GPIO_BTN1         CC1310_LAUNCHXL_GPIO_S1
+#define Board_GPIO_BTN2         CC1310_LAUNCHXL_GPIO_S2
+#define Board_GPIO_BTN3         CC1310_LAUNCHXL_GPIO_S3
+
+#define Board_GPIO_LED0         CC1310_LAUNCHXL_GPIO_LED_RED
+#define Board_GPIO_LED1         CC1310_LAUNCHXL_GPIO_LED_GREEN
+#define Board_GPIO_RLED         CC1310_LAUNCHXL_GPIO_LED_RED
+#define Board_GPIO_GLED         CC1310_LAUNCHXL_GPIO_LED_GREEN
+#define Board_GPIO_LED_ON       CC1310_LAUNCHXL_GPIO_LED_ON
+#define Board_GPIO_LED_OFF      CC1310_LAUNCHXL_GPIO_LED_OFF
+
+#define Board_GPTIMER0A         CC1310_LAUNCHXL_GPTIMER0A
+#define Board_GPTIMER0B         CC1310_LAUNCHXL_GPTIMER0B
+#define Board_GPTIMER1A         CC1310_LAUNCHXL_GPTIMER1A
+#define Board_GPTIMER1B         CC1310_LAUNCHXL_GPTIMER1B
+#define Board_GPTIMER2A         CC1310_LAUNCHXL_GPTIMER2A
+#define Board_GPTIMER2B         CC1310_LAUNCHXL_GPTIMER2B
+#define Board_GPTIMER3A         CC1310_LAUNCHXL_GPTIMER3A
+#define Board_GPTIMER3B         CC1310_LAUNCHXL_GPTIMER3B
+
+#define Board_I2C0              CC1310_LAUNCHXL_I2C0
+#define Board_I2C_TMP           CC1310_LAUNCHXL_I2C0
+
+#define Board_I2S0              CC1310_LAUNCHXL_I2S0
+#define Board_I2S_ADO           CC1310_LAUNCHXL_I2S_ADO
+#define Board_I2S_ADI           CC1310_LAUNCHXL_I2S_ADI
+#define Board_I2S_BCLK          CC1310_LAUNCHXL_I2S_BCLK
+#define Board_I2S_MCLK          CC1310_LAUNCHXL_I2S_MCLK
+#define Board_I2S_WCLK          CC1310_LAUNCHXL_I2S_WCLK
+
+#define Board_NVSINTERNAL       CC1310_LAUNCHXL_NVSCC26XX0
+#define Board_NVSEXTERNAL       CC1310_LAUNCHXL_NVSSPI25X0
+
+#define Board_PIN_BUTTON0       CC1310_LAUNCHXL_PIN_BTN1
+#define Board_PIN_BUTTON1       CC1310_LAUNCHXL_PIN_BTN2
+#define Board_PIN_BTN1          CC1310_LAUNCHXL_PIN_BTN1
+#define Board_PIN_BTN2          CC1310_LAUNCHXL_PIN_BTN2
+#define Board_PIN_LED0          CC1310_LAUNCHXL_PIN_RLED
+#define Board_PIN_LED1          CC1310_LAUNCHXL_PIN_GLED
+#define Board_PIN_LED2          CC1310_LAUNCHXL_PIN_RLED
+#define Board_PIN_RLED          CC1310_LAUNCHXL_PIN_RLED
+#define Board_PIN_GLED          CC1310_LAUNCHXL_PIN_GLED
+
+#define Board_PWM0              CC1310_LAUNCHXL_PWM0
+#define Board_PWM1              CC1310_LAUNCHXL_PWM1
+#define Board_PWM2              CC1310_LAUNCHXL_PWM2
+#define Board_PWM3              CC1310_LAUNCHXL_PWM3
+#define Board_PWM4              CC1310_LAUNCHXL_PWM4
+#define Board_PWM5              CC1310_LAUNCHXL_PWM5
+#define Board_PWM6              CC1310_LAUNCHXL_PWM6
+#define Board_PWM7              CC1310_LAUNCHXL_PWM7
+
+#define Board_SD0               CC1310_LAUNCHXL_SDSPI0
+
+#define Board_SPI0              CC1310_LAUNCHXL_SPI0
+#define Board_SPI0_MISO         CC1310_LAUNCHXL_SPI0_MISO
+#define Board_SPI0_MOSI         CC1310_LAUNCHXL_SPI0_MOSI
+#define Board_SPI0_CLK          CC1310_LAUNCHXL_SPI0_CLK
+#define Board_SPI0_CSN          CC1310_LAUNCHXL_SPI0_CSN
+#define Board_SPI1              CC1310_LAUNCHXL_SPI1
+#define Board_SPI1_MISO         CC1310_LAUNCHXL_SPI1_MISO
+#define Board_SPI1_MOSI         CC1310_LAUNCHXL_SPI1_MOSI
+#define Board_SPI1_CLK          CC1310_LAUNCHXL_SPI1_CLK
+#define Board_SPI1_CSN          CC1310_LAUNCHXL_SPI1_CSN
+#define Board_SPI_FLASH_CS      CC1310_LAUNCHXL_SPI_FLASH_CS
+#define Board_FLASH_CS_ON       0
+#define Board_FLASH_CS_OFF      1
+
+#define Board_SPI_MASTER        CC1310_LAUNCHXL_SPI0
+#define Board_SPI_SLAVE         CC1310_LAUNCHXL_SPI0
+
+
+#define Board_UART0             CC1310_LAUNCHXL_UART0
+
+#define Board_WATCHDOG0         CC1310_LAUNCHXL_WATCHDOG0
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __BOARD_H */
diff --git a/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/CC1310_LAUNCHXL.c b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/CC1310_LAUNCHXL.c
new file mode 100644
index 000000000..e58190e02
--- /dev/null
+++ b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/CC1310_LAUNCHXL.c
@@ -0,0 +1,1007 @@
+/*
+ * Copyright (c) 2015-2019, Texas Instruments Incorporated
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * *  Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * *  Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * *  Neither the name of Texas Instruments Incorporated nor the names of
+ *    its contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ *  ====================== CC1310_LAUNCHXL.c ===================================
+ *  This file is responsible for setting up the board specific items for the
+ *  CC1310_LAUNCHXL board.
+ */
+
+#include <stdbool.h>
+#include <stddef.h>
+#include <stdint.h>
+
+#include <ti/devices/DeviceFamily.h>
+#include DeviceFamily_constructPath(driverlib/ioc.h)
+#include DeviceFamily_constructPath(driverlib/udma.h)
+#include DeviceFamily_constructPath(inc/hw_ints.h)
+#include DeviceFamily_constructPath(inc/hw_memmap.h)
+
+#include "CC1310_LAUNCHXL.h"
+
+/*
+ *  =============================== ADCBuf ===============================
+ */
+#include <ti/drivers/ADCBuf.h>
+#include <ti/drivers/adcbuf/ADCBufCC26XX.h>
+
+ADCBufCC26XX_Object adcBufCC26xxObjects[CC1310_LAUNCHXL_ADCBUFCOUNT];
+
+/*
+ *  This table converts a virtual adc channel into a dio and internal analogue
+ *  input signal. This table is necessary for the functioning of the adcBuf
+ *  driver. Comment out unused entries to save flash. Dio and internal signal
+ *  pairs are hardwired. Do not remap them in the table. You may reorder entire
+ *  entries. The mapping of dio and internal signals is package dependent.
+ */
+const ADCBufCC26XX_AdcChannelLutEntry ADCBufCC26XX_adcChannelLut[CC1310_LAUNCHXL_ADCBUF0CHANNELCOUNT] = {
+//    {CC1310_LAUNCHXL_DIO23_ANALOG, ADC_COMPB_IN_AUXIO7},
+//    {CC1310_LAUNCHXL_DIO24_ANALOG, ADC_COMPB_IN_AUXIO6},
+//    {CC1310_LAUNCHXL_DIO25_ANALOG, ADC_COMPB_IN_AUXIO5},
+//    {CC1310_LAUNCHXL_DIO26_ANALOG, ADC_COMPB_IN_AUXIO4},
+//    {CC1310_LAUNCHXL_DIO27_ANALOG, ADC_COMPB_IN_AUXIO3},
+//    {CC1310_LAUNCHXL_DIO28_ANALOG, ADC_COMPB_IN_AUXIO2},
+//    {CC1310_LAUNCHXL_DIO29_ANALOG, ADC_COMPB_IN_AUXIO1},
+//    {CC1310_LAUNCHXL_DIO30_ANALOG, ADC_COMPB_IN_AUXIO0},
+    {PIN_UNASSIGNED, ADC_COMPB_IN_VDDS},
+    {PIN_UNASSIGNED, ADC_COMPB_IN_DCOUPL},
+    {PIN_UNASSIGNED, ADC_COMPB_IN_VSS},
+};
+
+const ADCBufCC26XX_HWAttrs adcBufCC26xxHWAttrs[CC1310_LAUNCHXL_ADCBUFCOUNT] = {
+    {
+        .intPriority       = ~0,
+        .swiPriority       = 0,
+        .adcChannelLut     = ADCBufCC26XX_adcChannelLut,
+    }
+};
+
+const ADCBuf_Config ADCBuf_config[CC1310_LAUNCHXL_ADCBUFCOUNT] = {
+    {
+        &ADCBufCC26XX_fxnTable,
+        &adcBufCC26xxObjects[CC1310_LAUNCHXL_ADCBUF0],
+        &adcBufCC26xxHWAttrs[CC1310_LAUNCHXL_ADCBUF0]
+    },
+};
+
+const uint_least8_t ADCBuf_count = CC1310_LAUNCHXL_ADCBUFCOUNT;
+
+/*
+ *  =============================== ADC ===============================
+ */
+#include <ti/drivers/ADC.h>
+#include <ti/drivers/adc/ADCCC26XX.h>
+
+ADCCC26XX_Object adcCC26xxObjects[CC1310_LAUNCHXL_ADCCOUNT];
+
+
+const ADCCC26XX_HWAttrs adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADCCOUNT] = {
+//    {
+//        .adcDIO              = CC1310_LAUNCHXL_DIO23_ANALOG,
+//        .adcCompBInput       = ADC_COMPB_IN_AUXIO7,
+//        .refSource           = ADCCC26XX_FIXED_REFERENCE,
+//        .samplingDuration    = ADCCC26XX_SAMPLING_DURATION_2P7_US,
+//        .inputScalingEnabled = true,
+//        .triggerSource       = ADCCC26XX_TRIGGER_MANUAL,
+//        .returnAdjustedVal   = false
+//    },
+//    {
+//        .adcDIO              = CC1310_LAUNCHXL_DIO24_ANALOG,
+//        .adcCompBInput       = ADC_COMPB_IN_AUXIO6,
+//        .refSource           = ADCCC26XX_FIXED_REFERENCE,
+//        .samplingDuration    = ADCCC26XX_SAMPLING_DURATION_2P7_US,
+//        .inputScalingEnabled = true,
+//        .triggerSource       = ADCCC26XX_TRIGGER_MANUAL,
+//        .returnAdjustedVal   = false
+//    },
+//    {
+//        .adcDIO              = CC1310_LAUNCHXL_DIO25_ANALOG,
+//        .adcCompBInput       = ADC_COMPB_IN_AUXIO5,
+//        .refSource           = ADCCC26XX_FIXED_REFERENCE,
+//        .samplingDuration    = ADCCC26XX_SAMPLING_DURATION_2P7_US,
+//        .inputScalingEnabled = true,
+//        .triggerSource       = ADCCC26XX_TRIGGER_MANUAL,
+//        .returnAdjustedVal   = false
+//    },
+//    {
+//        .adcDIO              = CC1310_LAUNCHXL_DIO26_ANALOG,
+//        .adcCompBInput       = ADC_COMPB_IN_AUXIO4,
+//        .refSource           = ADCCC26XX_FIXED_REFERENCE,
+//        .samplingDuration    = ADCCC26XX_SAMPLING_DURATION_2P7_US,
+//        .inputScalingEnabled = true,
+//        .triggerSource       = ADCCC26XX_TRIGGER_MANUAL,
+//        .returnAdjustedVal   = false
+//    },
+//    {
+//        .adcDIO              = CC1310_LAUNCHXL_DIO27_ANALOG,
+//        .adcCompBInput       = ADC_COMPB_IN_AUXIO3,
+//        .refSource           = ADCCC26XX_FIXED_REFERENCE,
+//        .samplingDuration    = ADCCC26XX_SAMPLING_DURATION_2P7_US,
+//        .inputScalingEnabled = true,
+//        .triggerSource       = ADCCC26XX_TRIGGER_MANUAL,
+//        .returnAdjustedVal   = false
+//    },
+//    {
+//        .adcDIO              = CC1310_LAUNCHXL_DIO28_ANALOG,
+//        .adcCompBInput       = ADC_COMPB_IN_AUXIO2,
+//        .refSource           = ADCCC26XX_FIXED_REFERENCE,
+//        .samplingDuration    = ADCCC26XX_SAMPLING_DURATION_2P7_US,
+//        .inputScalingEnabled = true,
+//        .triggerSource       = ADCCC26XX_TRIGGER_MANUAL,
+//        .returnAdjustedVal   = false
+//    },
+//    {
+//        .adcDIO              = CC1310_LAUNCHXL_DIO29_ANALOG,
+//        .adcCompBInput       = ADC_COMPB_IN_AUXIO1,
+//        .refSource           = ADCCC26XX_FIXED_REFERENCE,
+//        .samplingDuration    = ADCCC26XX_SAMPLING_DURATION_2P7_US,
+//        .inputScalingEnabled = true,
+//        .triggerSource       = ADCCC26XX_TRIGGER_MANUAL,
+//        .returnAdjustedVal   = false
+//    },
+//    {
+//        .adcDIO              = CC1310_LAUNCHXL_DIO30_ANALOG,
+//        .adcCompBInput       = ADC_COMPB_IN_AUXIO0,
+//        .refSource           = ADCCC26XX_FIXED_REFERENCE,
+//        .samplingDuration    = ADCCC26XX_SAMPLING_DURATION_10P9_MS,
+//        .inputScalingEnabled = true,
+//        .triggerSource       = ADCCC26XX_TRIGGER_MANUAL,
+//        .returnAdjustedVal   = false
+//    },
+    {
+        .adcDIO              = PIN_UNASSIGNED,
+        .adcCompBInput       = ADC_COMPB_IN_DCOUPL,
+        .refSource           = ADCCC26XX_FIXED_REFERENCE,
+        .samplingDuration    = ADCCC26XX_SAMPLING_DURATION_2P7_US,
+        .inputScalingEnabled = true,
+        .triggerSource       = ADCCC26XX_TRIGGER_MANUAL,
+        .returnAdjustedVal   = false
+    },
+    {
+        .adcDIO              = PIN_UNASSIGNED,
+        .adcCompBInput       = ADC_COMPB_IN_VSS,
+        .refSource           = ADCCC26XX_FIXED_REFERENCE,
+        .samplingDuration    = ADCCC26XX_SAMPLING_DURATION_2P7_US,
+        .inputScalingEnabled = true,
+        .triggerSource       = ADCCC26XX_TRIGGER_MANUAL,
+        .returnAdjustedVal   = false
+    },
+    {
+        .adcDIO              = PIN_UNASSIGNED,
+        .adcCompBInput       = ADC_COMPB_IN_VDDS,
+        .refSource           = ADCCC26XX_FIXED_REFERENCE,
+        .samplingDuration    = ADCCC26XX_SAMPLING_DURATION_2P7_US,
+        .inputScalingEnabled = true,
+        .triggerSource       = ADCCC26XX_TRIGGER_MANUAL,
+        .returnAdjustedVal   = false
+    }
+};
+
+const ADC_Config ADC_config[CC1310_LAUNCHXL_ADCCOUNT] = {
+    {&ADCCC26XX_fxnTable, &adcCC26xxObjects[CC1310_LAUNCHXL_ADC0], &adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADC0]},
+    {&ADCCC26XX_fxnTable, &adcCC26xxObjects[CC1310_LAUNCHXL_ADC1], &adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADC1]},
+    {&ADCCC26XX_fxnTable, &adcCC26xxObjects[CC1310_LAUNCHXL_ADC2], &adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADC2]},
+    {&ADCCC26XX_fxnTable, &adcCC26xxObjects[CC1310_LAUNCHXL_ADC3], &adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADC3]},
+    {&ADCCC26XX_fxnTable, &adcCC26xxObjects[CC1310_LAUNCHXL_ADC4], &adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADC4]},
+    {&ADCCC26XX_fxnTable, &adcCC26xxObjects[CC1310_LAUNCHXL_ADC5], &adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADC5]},
+    {&ADCCC26XX_fxnTable, &adcCC26xxObjects[CC1310_LAUNCHXL_ADC6], &adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADC6]},
+    {&ADCCC26XX_fxnTable, &adcCC26xxObjects[CC1310_LAUNCHXL_ADC7], &adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADC7]},
+    {&ADCCC26XX_fxnTable, &adcCC26xxObjects[CC1310_LAUNCHXL_ADCDCOUPL], &adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADCDCOUPL]},
+    {&ADCCC26XX_fxnTable, &adcCC26xxObjects[CC1310_LAUNCHXL_ADCVSS], &adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADCVSS]},
+    {&ADCCC26XX_fxnTable, &adcCC26xxObjects[CC1310_LAUNCHXL_ADCVDDS], &adcCC26xxHWAttrs[CC1310_LAUNCHXL_ADCVDDS]},
+};
+
+const uint_least8_t ADC_count = CC1310_LAUNCHXL_ADCCOUNT;
+
+/*
+ *  =============================== Crypto ===============================
+ */
+#include <ti/drivers/crypto/CryptoCC26XX.h>
+
+CryptoCC26XX_Object cryptoCC26XXObjects[CC1310_LAUNCHXL_CRYPTOCOUNT];
+
+const CryptoCC26XX_HWAttrs cryptoCC26XXHWAttrs[CC1310_LAUNCHXL_CRYPTOCOUNT] = {
+    {
+        .baseAddr       = CRYPTO_BASE,
+        .powerMngrId    = PowerCC26XX_PERIPH_CRYPTO,
+        .intNum         = INT_CRYPTO_RESULT_AVAIL_IRQ,
+        .intPriority    = ~0,
+    }
+};
+
+const CryptoCC26XX_Config CryptoCC26XX_config[CC1310_LAUNCHXL_CRYPTOCOUNT] = {
+    {
+         .object  = &cryptoCC26XXObjects[CC1310_LAUNCHXL_CRYPTO0],
+         .hwAttrs = &cryptoCC26XXHWAttrs[CC1310_LAUNCHXL_CRYPTO0]
+    }
+};
+
+/*
+ *  =============================== AESCCM ===============================
+ */
+#include <ti/drivers/AESCCM.h>
+#include <ti/drivers/aesccm/AESCCMCC26XX.h>
+
+AESCCMCC26XX_Object aesccmCC26XXObjects[CC1310_LAUNCHXL_AESCCMCOUNT];
+
+const AESCCMCC26XX_HWAttrs aesccmCC26XXHWAttrs[CC1310_LAUNCHXL_AESCCMCOUNT] = {
+    {
+        .intPriority       = ~0,
+    }
+};
+
+const AESCCM_Config AESCCM_config[CC1310_LAUNCHXL_AESCCMCOUNT] = {
+    {
+         .object  = &aesccmCC26XXObjects[CC1310_LAUNCHXL_AESCCM0],
+         .hwAttrs = &aesccmCC26XXHWAttrs[CC1310_LAUNCHXL_AESCCM0]
+    },
+};
+
+const uint_least8_t AESCCM_count = CC1310_LAUNCHXL_AESCCMCOUNT;
+
+
+/*
+ *  =============================== AESGCM ===============================
+ */
+#include <ti/drivers/AESGCM.h>
+#include <ti/drivers/aesgcm/AESGCMCC26XX.h>
+
+AESGCMCC26XX_Object aesgcmCC26XXObjects[CC1310_LAUNCHXL_AESGCMCOUNT];
+
+const AESGCMCC26XX_HWAttrs aesgcmCC26XXHWAttrs[CC1310_LAUNCHXL_AESGCMCOUNT] = {
+    {
+        .intPriority       = ~0,
+    }
+};
+
+const AESGCM_Config AESGCM_config[CC1310_LAUNCHXL_AESGCMCOUNT] = {
+    {
+         .object  = &aesgcmCC26XXObjects[CC1310_LAUNCHXL_AESGCM0],
+         .hwAttrs = &aesgcmCC26XXHWAttrs[CC1310_LAUNCHXL_AESGCM0]
+    },
+};
+
+const uint_least8_t AESGCM_count = CC1310_LAUNCHXL_AESGCMCOUNT;
+
+/*
+ *  =============================== AESCBC ===============================
+ */
+#include <ti/drivers/AESCBC.h>
+#include <ti/drivers/aescbc/AESCBCCC26XX.h>
+
+AESCBCCC26XX_Object aescbcCC26XXObjects[CC1310_LAUNCHXL_AESCBCCOUNT];
+
+const AESCBCCC26XX_HWAttrs aescbcCC26XXHWAttrs[CC1310_LAUNCHXL_AESCBCCOUNT] = {
+    {
+        .intPriority       = ~0,
+    }
+};
+
+const AESCBC_Config AESCBC_config[CC1310_LAUNCHXL_AESCBCCOUNT] = {
+    {
+         .object  = &aescbcCC26XXObjects[CC1310_LAUNCHXL_AESCBC0],
+         .hwAttrs = &aescbcCC26XXHWAttrs[CC1310_LAUNCHXL_AESCBC0]
+    },
+};
+
+const uint_least8_t AESCBC_count = CC1310_LAUNCHXL_AESCBCCOUNT;
+
+/*
+ *  =============================== AESCTR ===============================
+ */
+#include <ti/drivers/AESCTR.h>
+#include <ti/drivers/aesctr/AESCTRCC26XX.h>
+
+AESCTRCC26XX_Object aesctrCC26XXObjects[CC1310_LAUNCHXL_AESCTRCOUNT];
+
+const AESCTRCC26XX_HWAttrs aesctrCC26XXHWAttrs[CC1310_LAUNCHXL_AESCTRCOUNT] = {
+    {
+        .intPriority       = ~0,
+    }
+};
+
+const AESCTR_Config AESCTR_config[CC1310_LAUNCHXL_AESCTRCOUNT] = {
+    {
+         .object  = &aesctrCC26XXObjects[CC1310_LAUNCHXL_AESCTR0],
+         .hwAttrs = &aesctrCC26XXHWAttrs[CC1310_LAUNCHXL_AESCTR0]
+    },
+};
+
+const uint_least8_t AESCTR_count = CC1310_LAUNCHXL_AESCTRCOUNT;
+
+/*
+ *  =============================== AESECB ===============================
+ */
+#include <ti/drivers/AESECB.h>
+#include <ti/drivers/aesecb/AESECBCC26XX.h>
+
+AESECBCC26XX_Object aesecbCC26XXObjects[CC1310_LAUNCHXL_AESECBCOUNT];
+
+const AESECBCC26XX_HWAttrs aesecbCC26XXHWAttrs[CC1310_LAUNCHXL_AESECBCOUNT] = {
+    {
+        .intPriority       = ~0,
+    }
+};
+
+const AESECB_Config AESECB_config[CC1310_LAUNCHXL_AESECBCOUNT] = {
+    {
+         .object  = &aesecbCC26XXObjects[CC1310_LAUNCHXL_AESECB0],
+         .hwAttrs = &aesecbCC26XXHWAttrs[CC1310_LAUNCHXL_AESECB0]
+    },
+};
+
+const uint_least8_t AESECB_count = CC1310_LAUNCHXL_AESECBCOUNT;
+
+/*
+ *  =============================== AESCTRDRBG ===============================
+ */
+#include <ti/drivers/AESCTRDRBG.h>
+#include <ti/drivers/aesctrdrbg/AESCTRDRBGXX.h>
+
+AESCTRDRBGXX_Object aesctrdrbgXXObjects[CC1310_LAUNCHXL_AESCTRDRBGCOUNT];
+
+const AESCTRDRBGXX_HWAttrs aesctrdrbgXXHWAttrs[CC1310_LAUNCHXL_AESCTRDRBGCOUNT] = {
+    {
+        .aesctrIndex       = CC1310_LAUNCHXL_AESCTR0,
+    }
+};
+
+const AESCTRDRBG_Config AESCTRDRBG_config[CC1310_LAUNCHXL_AESCTRDRBGCOUNT] = {
+    {
+         .object  = &aesctrdrbgXXObjects[CC1310_LAUNCHXL_AESCTRDRBG0],
+         .hwAttrs = &aesctrdrbgXXHWAttrs[CC1310_LAUNCHXL_AESCTRDRBG0]
+    },
+};
+
+const uint_least8_t AESCTRDRBG_count = CC1310_LAUNCHXL_AESCTRDRBGCOUNT;
+
+/*
+ *  =============================== TRNG ===============================
+ */
+#include <ti/drivers/TRNG.h>
+#include <ti/drivers/trng/TRNGCC26XX.h>
+
+TRNGCC26XX_Object trngCC26XXObjects[CC1310_LAUNCHXL_TRNGCOUNT];
+
+const TRNGCC26XX_HWAttrs trngCC26X2HWAttrs[CC1310_LAUNCHXL_TRNGCOUNT] = {
+    {
+        .intPriority       = ~0,
+        .swiPriority       = 0,
+        .samplesPerCycle   = 240000,
+    }
+};
+
+const TRNG_Config TRNG_config[CC1310_LAUNCHXL_TRNGCOUNT] = {
+    {
+         .object  = &trngCC26XXObjects[CC1310_LAUNCHXL_TRNG0],
+         .hwAttrs = &trngCC26X2HWAttrs[CC1310_LAUNCHXL_TRNG0]
+    },
+};
+
+const uint_least8_t TRNG_count = CC1310_LAUNCHXL_TRNGCOUNT;
+
+/*
+ *  =============================== GPIO ===============================
+ */
+//#include <ti/drivers/GPIO.h>
+//#include <ti/drivers/gpio/GPIOCC26XX.h>
+//
+///*
+// * Array of Pin configurations
+// * NOTE: The order of the pin configurations must coincide with what was
+// *       defined in CC1310_LAUNCHXL.h
+// * NOTE: Pins not used for interrupts should be placed at the end of the
+// *       array. Callback entries can be omitted from callbacks array to
+// *       reduce memory usage.
+// */
+//GPIO_PinConfig gpioPinConfigs[] = {
+//    /* Input pins */
+//		CC1310_LAUNCHXL_PIN_BTN1 | GPIO_CFG_INPUT,  /* Button 0 */
+//		CC1310_LAUNCHXL_PIN_BTN2 | GPIO_CFG_INPUT,  /* Button 1 */
+//		CC1310_LAUNCHXL_PIN_BTN3 | GPIO_CFG_INPUT,	/* Button 2 */
+//
+//		CC1310_LAUNCHXL_PIN_SPIRDY | GPIO_CFG_OUT_OD_PD,  /* CC1310_LAUNCHXL_SPI_MASTER_READY */
+//		CC1310_LAUNCHXL_PIN_RXRDY | GPIO_CFG_OUT_OD_PD,  /* CC1310_LAUNCHXL_SPI_SLAVE_READY */
+//
+//    /* Output pins */
+//		CC1310_LAUNCHXL_GPIO_LED_RED | GPIO_CFG_OUT_OD_PD,  /* Red LED */
+//		CC1310_LAUNCHXL_GPIO_LED_GREEN | GPIO_CFG_OUT_OD_PD,  /* Green LED */
+//
+//    /* SD CS */
+//		CC1310_LAUNCHXL_SDSPI_CS | GPIO_CFG_INPUT,
+//};
+//
+///*
+// * Array of callback function pointers
+// * NOTE: The order of the pin configurations must coincide with what was
+// *       defined in CC1310_LAUNCH.h
+// * NOTE: Pins not used for interrupts can be omitted from callbacks array to
+// *       reduce memory usage (if placed at end of gpioPinConfigs array).
+// */
+//GPIO_CallbackFxn gpioCallbackFunctions[] = {
+//    NULL,  /* Button 1 */
+//    NULL,  /* Button 2 */
+//    NULL,  /* Button 3 */
+//};
+//
+//const GPIOCC26XX_Config GPIOCC26XX_config = {
+//    .pinConfigs = (GPIO_PinConfig *)gpioPinConfigs,
+//    .callbacks = (GPIO_CallbackFxn *)gpioCallbackFunctions,
+//    .numberOfPinConfigs = CC1310_LAUNCHXL_GPIOCOUNT,
+//    .numberOfCallbacks  = sizeof(gpioCallbackFunctions)/sizeof(GPIO_CallbackFxn),
+//    .intPriority = (~0)
+//};
+//
+/*
+ *  =============================== GPTimer ===============================
+ *  Remove unused entries to reduce flash usage both in Board.c and Board.h
+ */
+#include <ti/drivers/timer/GPTimerCC26XX.h>
+
+GPTimerCC26XX_Object gptimerCC26XXObjects[CC1310_LAUNCHXL_GPTIMERCOUNT];
+
+const GPTimerCC26XX_HWAttrs gptimerCC26xxHWAttrs[CC1310_LAUNCHXL_GPTIMERPARTSCOUNT] = {
+    { .baseAddr = GPT0_BASE, .intNum = INT_GPT0A, .intPriority = (~0), .powerMngrId = PowerCC26XX_PERIPH_GPT0, .pinMux = GPT_PIN_0A, },
+    { .baseAddr = GPT0_BASE, .intNum = INT_GPT0B, .intPriority = (~0), .powerMngrId = PowerCC26XX_PERIPH_GPT0, .pinMux = GPT_PIN_0B, },
+    { .baseAddr = GPT1_BASE, .intNum = INT_GPT1A, .intPriority = (~0), .powerMngrId = PowerCC26XX_PERIPH_GPT1, .pinMux = GPT_PIN_1A, },
+    { .baseAddr = GPT1_BASE, .intNum = INT_GPT1B, .intPriority = (~0), .powerMngrId = PowerCC26XX_PERIPH_GPT1, .pinMux = GPT_PIN_1B, },
+    { .baseAddr = GPT2_BASE, .intNum = INT_GPT2A, .intPriority = (~0), .powerMngrId = PowerCC26XX_PERIPH_GPT2, .pinMux = GPT_PIN_2A, },
+    { .baseAddr = GPT2_BASE, .intNum = INT_GPT2B, .intPriority = (~0), .powerMngrId = PowerCC26XX_PERIPH_GPT2, .pinMux = GPT_PIN_2B, },
+    { .baseAddr = GPT3_BASE, .intNum = INT_GPT3A, .intPriority = (~0), .powerMngrId = PowerCC26XX_PERIPH_GPT3, .pinMux = GPT_PIN_3A, },
+    { .baseAddr = GPT3_BASE, .intNum = INT_GPT3B, .intPriority = (~0), .powerMngrId = PowerCC26XX_PERIPH_GPT3, .pinMux = GPT_PIN_3B, },
+};
+
+const GPTimerCC26XX_Config GPTimerCC26XX_config[CC1310_LAUNCHXL_GPTIMERPARTSCOUNT] = {
+    { &gptimerCC26XXObjects[CC1310_LAUNCHXL_GPTIMER0], &gptimerCC26xxHWAttrs[CC1310_LAUNCHXL_GPTIMER0A], GPT_A },
+    { &gptimerCC26XXObjects[CC1310_LAUNCHXL_GPTIMER0], &gptimerCC26xxHWAttrs[CC1310_LAUNCHXL_GPTIMER0B], GPT_B },
+    { &gptimerCC26XXObjects[CC1310_LAUNCHXL_GPTIMER1], &gptimerCC26xxHWAttrs[CC1310_LAUNCHXL_GPTIMER1A], GPT_A },
+    { &gptimerCC26XXObjects[CC1310_LAUNCHXL_GPTIMER1], &gptimerCC26xxHWAttrs[CC1310_LAUNCHXL_GPTIMER1B], GPT_B },
+    { &gptimerCC26XXObjects[CC1310_LAUNCHXL_GPTIMER2], &gptimerCC26xxHWAttrs[CC1310_LAUNCHXL_GPTIMER2A], GPT_A },
+    { &gptimerCC26XXObjects[CC1310_LAUNCHXL_GPTIMER2], &gptimerCC26xxHWAttrs[CC1310_LAUNCHXL_GPTIMER2B], GPT_B },
+    { &gptimerCC26XXObjects[CC1310_LAUNCHXL_GPTIMER3], &gptimerCC26xxHWAttrs[CC1310_LAUNCHXL_GPTIMER3A], GPT_A },
+    { &gptimerCC26XXObjects[CC1310_LAUNCHXL_GPTIMER3], &gptimerCC26xxHWAttrs[CC1310_LAUNCHXL_GPTIMER3B], GPT_B },
+};
+
+/*
+ *  =============================== I2C ===============================
+*/
+#include <ti/drivers/I2C.h>
+#include <ti/drivers/i2c/I2CCC26XX.h>
+
+#if TI_I2C_CONF_ENABLE
+
+I2CCC26XX_Object i2cCC26xxObjects[CC1310_LAUNCHXL_I2CCOUNT];
+
+const I2CCC26XX_HWAttrsV1 i2cCC26xxHWAttrs[CC1310_LAUNCHXL_I2CCOUNT] = {
+#if TI_I2C_CONF_I2C0_ENABLE
+    {
+        .baseAddr    = I2C0_BASE,
+        .powerMngrId = PowerCC26XX_PERIPH_I2C0,
+        .intNum      = INT_I2C_IRQ,
+        .intPriority = ~0,
+        .swiPriority = 0,
+        .sdaPin      = CC1310_LAUNCHXL_I2C0_SDA0,
+        .sclPin      = CC1310_LAUNCHXL_I2C0_SCL0,
+    },
+#endif
+};
+
+const I2C_Config I2C_config[CC1310_LAUNCHXL_I2CCOUNT] = {
+#if TI_I2C_CONF_I2C0_ENABLE
+    {
+        .fxnTablePtr = &I2CCC26XX_fxnTable,
+        .object      = &i2cCC26xxObjects[CC1310_LAUNCHXL_I2C0],
+        .hwAttrs     = &i2cCC26xxHWAttrs[CC1310_LAUNCHXL_I2C0]
+    },
+#endif
+};
+
+const uint_least8_t I2C_count = CC1310_LAUNCHXL_I2CCOUNT;
+
+#endif /* TI_I2C_CONF_ENABLE */
+
+#if TI_I2S_CONF_ENABLE
+/*
+ *  =============================== I2S ===============================
+*/
+#include <ti/drivers/I2S.h>
+#include <ti/drivers/i2s/I2SCC26XX.h>
+
+I2SCC26XX_Object i2sCC26XXObjects[CC1310_LAUNCHXL_I2SCOUNT];
+
+const I2SCC26XX_HWAttrs i2sCC26XXHWAttrs[CC1310_LAUNCHXL_I2SCOUNT] = {
+    {
+        .pinSD1      =  CC1310_LAUNCHXL_I2S_ADI,
+        .pinSD0      =  CC1310_LAUNCHXL_I2S_ADO,
+        .pinSCK      =  CC1310_LAUNCHXL_I2S_BCLK,
+        .pinMCLK     =  CC1310_LAUNCHXL_I2S_MCLK,
+        .pinWS       =  CC1310_LAUNCHXL_I2S_WCLK,
+        .intPriority = ~0,
+    }
+};
+
+const I2S_Config I2S_config[CC1310_LAUNCHXL_I2SCOUNT] = {
+    {
+        .object      = &i2sCC26XXObjects[CC1310_LAUNCHXL_I2S0],
+        .hwAttrs     = &i2sCC26XXHWAttrs[CC1310_LAUNCHXL_I2S0]
+    },
+};
+
+const uint_least8_t I2S_count = CC1310_LAUNCHXL_I2SCOUNT;
+
+#endif
+
+
+#if TI_NVS_CONF_ENABLE
+/*
+ *  =============================== NVS ===============================
+ */
+#include <ti/drivers/NVS.h>
+#include <ti/drivers/nvs/NVSSPI25X.h>
+#include <ti/drivers/nvs/NVSCC26XX.h>
+
+#define NVS_REGIONS_BASE 0x1A000
+#define SECTORSIZE       0x1000
+#define REGIONSIZE       (SECTORSIZE * 4)
+
+
+
+#if TI_NVS_CONF_NVS_INTERNAL_ENABLE
+
+/*
+ * Reserve flash sectors for NVS driver use by placing an uninitialized byte
+ * array at the desired flash address.
+ */
+#if defined(__TI_COMPILER_VERSION__)
+
+/*
+ * Place uninitialized array at NVS_REGIONS_BASE
+ */
+#pragma LOCATION(flashBuf, NVS_REGIONS_BASE);
+#pragma NOINIT(flashBuf);
+static char flashBuf[REGIONSIZE];
+
+#elif defined(__IAR_SYSTEMS_ICC__)
+
+/*
+ * Place uninitialized array at NVS_REGIONS_BASE
+ */
+static __no_init char flashBuf[REGIONSIZE] @ NVS_REGIONS_BASE;
+
+#elif defined(__GNUC__)
+
+/*
+ * Place the flash buffers in the .nvs section created in the gcc linker file.
+ * The .nvs section enforces alignment on a sector boundary but may
+ * be placed anywhere in flash memory.  If desired the .nvs section can be set
+ * to a fixed address by changing the following in the gcc linker file:
+ *
+ * .nvs (FIXED_FLASH_ADDR) (NOLOAD) : AT (FIXED_FLASH_ADDR) {
+ *      *(.nvs)
+ * } > REGION_TEXT
+ */
+__attribute__ ((section (".nvs")))
+static char flashBuf[REGIONSIZE];
+
+#endif
+
+/* Allocate objects for NVS Internal Regions */
+NVSCC26XX_Object nvsCC26xxObjects[1];
+
+/* Hardware attributes for NVS Internal Regions */
+const NVSCC26XX_HWAttrs nvsCC26xxHWAttrs[1] = {
+    {
+        .regionBase = (void *)flashBuf,
+        .regionSize = REGIONSIZE,
+    },
+};
+
+#endif /* TI_NVS_CONF_NVS_INTERNAL_ENABLE */
+
+#if TI_NVS_CONF_NVS_EXTERNAL_ENABLE
+
+#define SPISECTORSIZE    0x1000
+#define SPIREGIONSIZE    (SPISECTORSIZE * 32)
+#define VERIFYBUFSIZE    64
+
+static uint8_t verifyBuf[VERIFYBUFSIZE];
+
+/* Allocate objects for NVS External Regions */
+NVSSPI25X_Object nvsSPI25XObjects[1];
+
+/* Hardware attributes for NVS External Regions */
+const NVSSPI25X_HWAttrs nvsSPI25XHWAttrs[1] = {
+    {
+        .regionBaseOffset = 0,
+        .regionSize = SPIREGIONSIZE,
+        .sectorSize = SPISECTORSIZE,
+        .verifyBuf = verifyBuf,
+        .verifyBufSize = VERIFYBUFSIZE,
+        .spiHandle = NULL,
+        .spiIndex = 0,
+        .spiBitRate = 4000000,
+        .spiCsnGpioIndex = CC1310_LAUNCHXL_GPIO_SPI_FLASH_CS,
+        .statusPollDelayUs = 100,
+    },
+};
+
+#endif /* TI_NVS_CONF_NVS_EXTERNAL_ENABLE */
+
+/* NVS Region index 0 and 1 refer to NVS and NVS SPI respectively */
+const NVS_Config NVS_config[CC1310_LAUNCHXL_NVSCOUNT] = {
+#if TI_NVS_CONF_NVS_INTERNAL_ENABLE
+    {
+        .fxnTablePtr = &NVSCC26XX_fxnTable,
+        .object = &nvsCC26xxObjects[0],
+        .hwAttrs = &nvsCC26xxHWAttrs[0],
+    },
+#endif
+#if TI_NVS_CONF_NVS_EXTERNAL_ENABLE
+    {
+        .fxnTablePtr = &NVSSPI25X_fxnTable,
+        .object = &nvsSPI25XObjects[0],
+        .hwAttrs = &nvsSPI25XHWAttrs[0],
+    },
+#endif
+};
+
+const uint_least8_t NVS_count = CC1310_LAUNCHXL_NVSCOUNT;
+
+#endif /* TI_NVS_CONF_ENABLE */
+
+/*
+ *  =============================== PIN ===============================
+ */
+#include <ti/drivers/PIN.h>
+#include <ti/drivers/pin/PINCC26XX.h>
+
+const PIN_Config BoardGpioInitTable[] = {
+
+		CC1310_LAUNCHXL_PIN_BTN1 | PIN_INPUT_EN | PIN_PULLDOWN | PIN_IRQ_BOTHEDGES | PIN_HYSTERESIS,          /* Button is active low       */
+    CC1310_LAUNCHXL_PIN_BTN2 | PIN_INPUT_EN | PIN_PULLDOWN | PIN_IRQ_BOTHEDGES | PIN_HYSTERESIS,          /* Button is active low       */
+		CC1310_LAUNCHXL_PIN_BTN3 | PIN_INPUT_EN | PIN_PULLDOWN | PIN_IRQ_BOTHEDGES | PIN_HYSTERESIS,          /* Button is active low       */
+
+		CC1310_LAUNCHXL_PIN_SPIRDY | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MIN,
+		CC1310_LAUNCHXL_PIN_RXRDY | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MIN,
+
+    CC1310_LAUNCHXL_PIN_RLED | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,       /* LED initially off          */
+    CC1310_LAUNCHXL_PIN_GLED | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,       /* LED initially off          */
+
+//    CC1310_LAUNCHXL_UART_RX | PIN_INPUT_EN | PIN_PULLDOWN,                                              /* UART RX via debugger back channel */
+//    CC1310_LAUNCHXL_UART_TX | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL,                         /* UART TX via debugger back channel */
+//
+//		CC1310_LAUNCHXL_SPI0_MOSI | PIN_INPUT_EN | PIN_PULLDOWN,                                            /* SPI master out - slave in */
+//    CC1310_LAUNCHXL_SPI0_MISO | PIN_INPUT_EN | PIN_PULLDOWN,                                            /* SPI master in - slave out */
+//    CC1310_LAUNCHXL_SPI0_CLK | PIN_INPUT_EN | PIN_PULLDOWN,                                             /* SPI clock */
+		CC1310_LAUNCHXL_SPI0_CSN | PIN_INPUT_EN | PIN_PULLDOWN,  																						/* External flash chip select */
+
+    PIN_TERMINATE
+};
+
+const PINCC26XX_HWAttrs PINCC26XX_hwAttrs = {
+    .intPriority = ~0,
+    .swiPriority = 0
+};
+
+/*
+ *  =============================== Power ===============================
+ */
+#include <ti/drivers/Power.h>
+#include <ti/drivers/power/PowerCC26XX.h>
+#include "clock-arch.h"
+
+const PowerCC26XX_Config PowerCC26XX_config = {
+    .policyInitFxn      = NULL,
+    .policyFxn          = &clock_arch_standby_policy,
+    .calibrateFxn       = &PowerCC26XX_calibrate,
+    .enablePolicy       = true,
+    .calibrateRCOSC_LF  = true,
+    .calibrateRCOSC_HF  = true,
+};
+
+/*
+ *  =============================== PWM ===============================
+ *  Remove unused entries to reduce flash usage both in Board.c and Board.h
+ */
+#include <ti/drivers/PWM.h>
+#include <ti/drivers/pwm/PWMTimerCC26XX.h>
+
+PWMTimerCC26XX_Object pwmtimerCC26xxObjects[CC1310_LAUNCHXL_PWMCOUNT];
+
+const PWMTimerCC26XX_HwAttrs pwmtimerCC26xxHWAttrs[CC1310_LAUNCHXL_PWMCOUNT] = {
+    { .pwmPin = CC1310_LAUNCHXL_PWMPIN0, .gpTimerUnit = CC1310_LAUNCHXL_GPTIMER0A },
+    { .pwmPin = CC1310_LAUNCHXL_PWMPIN1, .gpTimerUnit = CC1310_LAUNCHXL_GPTIMER0B },
+    { .pwmPin = CC1310_LAUNCHXL_PWMPIN2, .gpTimerUnit = CC1310_LAUNCHXL_GPTIMER1A },
+    { .pwmPin = CC1310_LAUNCHXL_PWMPIN3, .gpTimerUnit = CC1310_LAUNCHXL_GPTIMER1B },
+    { .pwmPin = CC1310_LAUNCHXL_PWMPIN4, .gpTimerUnit = CC1310_LAUNCHXL_GPTIMER2A },
+    { .pwmPin = CC1310_LAUNCHXL_PWMPIN5, .gpTimerUnit = CC1310_LAUNCHXL_GPTIMER2B },
+    { .pwmPin = CC1310_LAUNCHXL_PWMPIN6, .gpTimerUnit = CC1310_LAUNCHXL_GPTIMER3A },
+    { .pwmPin = CC1310_LAUNCHXL_PWMPIN7, .gpTimerUnit = CC1310_LAUNCHXL_GPTIMER3B },
+};
+
+const PWM_Config PWM_config[CC1310_LAUNCHXL_PWMCOUNT] = {
+    { &PWMTimerCC26XX_fxnTable, &pwmtimerCC26xxObjects[CC1310_LAUNCHXL_PWM0], &pwmtimerCC26xxHWAttrs[CC1310_LAUNCHXL_PWM0] },
+    { &PWMTimerCC26XX_fxnTable, &pwmtimerCC26xxObjects[CC1310_LAUNCHXL_PWM1], &pwmtimerCC26xxHWAttrs[CC1310_LAUNCHXL_PWM1] },
+    { &PWMTimerCC26XX_fxnTable, &pwmtimerCC26xxObjects[CC1310_LAUNCHXL_PWM2], &pwmtimerCC26xxHWAttrs[CC1310_LAUNCHXL_PWM2] },
+    { &PWMTimerCC26XX_fxnTable, &pwmtimerCC26xxObjects[CC1310_LAUNCHXL_PWM3], &pwmtimerCC26xxHWAttrs[CC1310_LAUNCHXL_PWM3] },
+    { &PWMTimerCC26XX_fxnTable, &pwmtimerCC26xxObjects[CC1310_LAUNCHXL_PWM4], &pwmtimerCC26xxHWAttrs[CC1310_LAUNCHXL_PWM4] },
+    { &PWMTimerCC26XX_fxnTable, &pwmtimerCC26xxObjects[CC1310_LAUNCHXL_PWM5], &pwmtimerCC26xxHWAttrs[CC1310_LAUNCHXL_PWM5] },
+    { &PWMTimerCC26XX_fxnTable, &pwmtimerCC26xxObjects[CC1310_LAUNCHXL_PWM6], &pwmtimerCC26xxHWAttrs[CC1310_LAUNCHXL_PWM6] },
+    { &PWMTimerCC26XX_fxnTable, &pwmtimerCC26xxObjects[CC1310_LAUNCHXL_PWM7], &pwmtimerCC26xxHWAttrs[CC1310_LAUNCHXL_PWM7] },
+};
+
+const uint_least8_t PWM_count = CC1310_LAUNCHXL_PWMCOUNT;
+
+/*
+ *  =============================== RF Driver ===============================
+ */
+#include <ti/drivers/rf/RF.h>
+
+const RFCC26XX_HWAttrsV2 RFCC26XX_hwAttrs = {
+    .hwiPriority        = ~0,       /* Lowest HWI priority */
+    .swiPriority        = 0,        /* Lowest SWI priority */
+    .xoscHfAlwaysNeeded = true,     /* Keep XOSC dependency while in standby */
+    .globalCallback     = NULL,     /* No board specific callback */
+    .globalEventMask    = 0         /* No events subscribed to */
+};
+
+/*
+ *  =============================== SD ===============================
+ */
+#include <ti/drivers/SD.h>
+#include <ti/drivers/sd/SDSPI.h>
+
+#if TI_SD_CONF_ENABLE
+
+#if !(TI_SPI_CONF_SPI0_ENABLE)
+#error "SD driver requires SPI0 enabled"
+#endif
+
+SDSPI_Object sdspiObjects[CC1310_LAUNCHXL_SDCOUNT];
+
+const SDSPI_HWAttrs sdspiHWAttrs[CC1310_LAUNCHXL_SDCOUNT] = {
+    {
+        .spiIndex = CC1310_LAUNCHXL_SPI0,
+        .spiCsGpioIndex = CC1310_LAUNCHXL_SDSPI_CS
+    }
+};
+
+const SD_Config SD_config[CC1310_LAUNCHXL_SDCOUNT] = {
+    {
+        .fxnTablePtr = &SDSPI_fxnTable,
+        .object = &sdspiObjects[CC1310_LAUNCHXL_SDSPI0],
+        .hwAttrs = &sdspiHWAttrs[CC1310_LAUNCHXL_SDSPI0]
+    },
+};
+
+const uint_least8_t SD_count = CC1310_LAUNCHXL_SDCOUNT;
+
+#endif /* TI_SD_CONF_ENABLE */
+
+/*
+ *  =============================== SPI DMA ===============================
+ */
+#include <ti/drivers/SPI.h>
+#include <ti/drivers/spi/SPICC26XXDMA.h>
+
+#if TI_SPI_CONF_ENABLE
+
+SPICC26XXDMA_Object spiCC26XXDMAObjects[CC1310_LAUNCHXL_SPICOUNT];
+
+/*
+ * NOTE: The SPI instances below can be used by the SD driver to communicate
+ * with a SD card via SPI.  The 'defaultTxBufValue' fields below are set to 0xFF
+ * to satisfy the SDSPI driver requirement.
+ */
+const SPICC26XXDMA_HWAttrsV1 spiCC26XXDMAHWAttrs[CC1310_LAUNCHXL_SPICOUNT] = {
+#if TI_SPI_CONF_SPI0_ENABLE
+    {
+        .baseAddr           = SSI0_BASE,
+        .intNum             = INT_SSI0_COMB,
+        .intPriority        = ~0,
+        .swiPriority        = 0,
+        .powerMngrId        = PowerCC26XX_PERIPH_SSI0,
+        .defaultTxBufValue  = 0xFF,
+        .rxChannelBitMask   = 1<<UDMA_CHAN_SSI0_RX,
+        .txChannelBitMask   = 1<<UDMA_CHAN_SSI0_TX,
+        .mosiPin            = CC1310_LAUNCHXL_SPI0_MOSI,
+        .misoPin            = CC1310_LAUNCHXL_SPI0_MISO,
+        .clkPin             = CC1310_LAUNCHXL_SPI0_CLK,
+        .csnPin             = CC1310_LAUNCHXL_SPI0_CSN,
+        .minDmaTransferSize = 10
+    },
+#endif
+#if TI_SPI_CONF_SPI1_ENABLE
+    {
+        .baseAddr           = SSI1_BASE,
+        .intNum             = INT_SSI1_COMB,
+        .intPriority        = ~0,
+        .swiPriority        = 0,
+        .powerMngrId        = PowerCC26XX_PERIPH_SSI1,
+        .defaultTxBufValue  = 0xFF,
+        .rxChannelBitMask   = 1<<UDMA_CHAN_SSI1_RX,
+        .txChannelBitMask   = 1<<UDMA_CHAN_SSI1_TX,
+        .mosiPin            = CC1310_LAUNCHXL_SPI1_MOSI,
+        .misoPin            = CC1310_LAUNCHXL_SPI1_MISO,
+        .clkPin             = CC1310_LAUNCHXL_SPI1_CLK,
+        .csnPin             = CC1310_LAUNCHXL_SPI1_CSN,
+        .minDmaTransferSize = 10
+    },
+#endif
+};
+
+const SPI_Config SPI_config[CC1310_LAUNCHXL_SPICOUNT] = {
+#if TI_SPI_CONF_SPI0_ENABLE
+    {
+         .fxnTablePtr = &SPICC26XXDMA_fxnTable,
+         .object      = &spiCC26XXDMAObjects[CC1310_LAUNCHXL_SPI0],
+         .hwAttrs     = &spiCC26XXDMAHWAttrs[CC1310_LAUNCHXL_SPI0]
+    },
+#endif
+#if TI_SPI_CONF_SPI1_ENABLE
+    {
+         .fxnTablePtr = &SPICC26XXDMA_fxnTable,
+         .object      = &spiCC26XXDMAObjects[CC1310_LAUNCHXL_SPI1],
+         .hwAttrs     = &spiCC26XXDMAHWAttrs[CC1310_LAUNCHXL_SPI1]
+    },
+#endif
+};
+
+const uint_least8_t SPI_count = CC1310_LAUNCHXL_SPICOUNT;
+
+#endif /* TI_SPI_CONF_ENABLE */
+
+/*
+ *  =============================== UART ===============================
+ */
+#include <ti/drivers/UART.h>
+#include <ti/drivers/uart/UARTCC26XX.h>
+
+#if TI_UART_CONF_ENABLE
+
+UARTCC26XX_Object uartCC26XXObjects[CC1310_LAUNCHXL_UARTCOUNT];
+
+uint8_t uartCC26XXRingBuffer[CC1310_LAUNCHXL_UARTCOUNT][32];
+
+const UARTCC26XX_HWAttrsV2 uartCC26XXHWAttrs[CC1310_LAUNCHXL_UARTCOUNT] = {
+#if TI_UART_CONF_UART0_ENABLE
+    {
+        .baseAddr       = UART0_BASE,
+        .powerMngrId    = PowerCC26XX_PERIPH_UART0,
+        .intNum         = INT_UART0_COMB,
+        .intPriority    = ~0,
+        .swiPriority    = 0,
+        .txPin          = CC1310_LAUNCHXL_UART_TX,
+        .rxPin          = CC1310_LAUNCHXL_UART_RX,
+        .ctsPin         = PIN_UNASSIGNED,
+        .rtsPin         = PIN_UNASSIGNED,
+        .ringBufPtr     = uartCC26XXRingBuffer[CC1310_LAUNCHXL_UART0],
+        .ringBufSize    = sizeof(uartCC26XXRingBuffer[CC1310_LAUNCHXL_UART0]),
+        .txIntFifoThr   = UARTCC26XX_FIFO_THRESHOLD_1_8,
+        .rxIntFifoThr   = UARTCC26XX_FIFO_THRESHOLD_4_8,
+        .errorFxn       = NULL
+    },
+#endif
+};
+
+const UART_Config UART_config[CC1310_LAUNCHXL_UARTCOUNT] = {
+#if TI_UART_CONF_UART0_ENABLE
+    {
+        .fxnTablePtr = &UARTCC26XX_fxnTable,
+        .object      = &uartCC26XXObjects[CC1310_LAUNCHXL_UART0],
+        .hwAttrs     = &uartCC26XXHWAttrs[CC1310_LAUNCHXL_UART0]
+    },
+#endif
+};
+
+const uint_least8_t UART_count = CC1310_LAUNCHXL_UARTCOUNT;
+
+#endif /* TI_UART_CONF_ENABLE */
+
+/*
+ *  =============================== UDMA ===============================
+ */
+#include <ti/drivers/dma/UDMACC26XX.h>
+
+UDMACC26XX_Object udmaObjects[CC1310_LAUNCHXL_UDMACOUNT];
+
+const UDMACC26XX_HWAttrs udmaHWAttrs[CC1310_LAUNCHXL_UDMACOUNT] = {
+    {
+        .baseAddr    = UDMA0_BASE,
+        .powerMngrId = PowerCC26XX_PERIPH_UDMA,
+        .intNum      = INT_DMA_ERR,
+        .intPriority = ~0
+    }
+};
+
+const UDMACC26XX_Config UDMACC26XX_config[CC1310_LAUNCHXL_UDMACOUNT] = {
+    {
+         .object  = &udmaObjects[CC1310_LAUNCHXL_UDMA0],
+         .hwAttrs = &udmaHWAttrs[CC1310_LAUNCHXL_UDMA0]
+    },
+};
+
+
+/*
+ *  =============================== Watchdog ===============================
+ */
+#include <ti/drivers/Watchdog.h>
+#include <ti/drivers/watchdog/WatchdogCC26XX.h>
+
+WatchdogCC26XX_Object watchdogCC26XXObjects[CC1310_LAUNCHXL_WATCHDOGCOUNT];
+
+const WatchdogCC26XX_HWAttrs watchdogCC26XXHWAttrs[CC1310_LAUNCHXL_WATCHDOGCOUNT] = {
+    {
+        .baseAddr    = WDT_BASE,
+        .reloadValue = 1000 /* Reload value in milliseconds */
+    },
+};
+
+const Watchdog_Config Watchdog_config[CC1310_LAUNCHXL_WATCHDOGCOUNT] = {
+    {
+        .fxnTablePtr = &WatchdogCC26XX_fxnTable,
+        .object      = &watchdogCC26XXObjects[CC1310_LAUNCHXL_WATCHDOG0],
+        .hwAttrs     = &watchdogCC26XXHWAttrs[CC1310_LAUNCHXL_WATCHDOG0]
+    },
+};
+
+const uint_least8_t Watchdog_count = CC1310_LAUNCHXL_WATCHDOGCOUNT;
+
+/*
+ *  Board-specific initialization function to disable external flash.
+ *  This function is defined in the file CC1310_LAUNCHXL_fxns.c
+ */
+extern void Board_initHook(void);
+
+/*
+ *  ======== CC1310_LAUNCHXL_initGeneral ========
+ */
+void CC1310_LAUNCHXL_initGeneral(void)
+{
+    Power_init();
+
+    if (PIN_init(BoardGpioInitTable) != PIN_SUCCESS) {
+        /* Error with PIN_init */
+        while (1);
+    }
+
+    /* Perform board-specific initialization */
+    Board_initHook();
+}
+
+/*
+ *  ======== Board_init ========
+ */
+void Board_init(void)
+{
+    CC1310_LAUNCHXL_initGeneral();
+}
diff --git a/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/CC1310_LAUNCHXL.h b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/CC1310_LAUNCHXL.h
new file mode 100644
index 000000000..956e0255f
--- /dev/null
+++ b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/CC1310_LAUNCHXL.h
@@ -0,0 +1,476 @@
+/*
+ * Copyright (c) 2015-2019, Texas Instruments Incorporated
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * *  Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * *  Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * *  Neither the name of Texas Instruments Incorporated nor the names of
+ *    its contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/** ============================================================================
+ *  @file       CC1310_LAUNCHXL.h
+ *
+ *  @brief      CC1310 LaunchPad Board Specific header file.
+ *
+ *  The CC1310_LAUNCHXL header file should be included in an application as
+ *  follows:
+ *  @code
+ *  #include "CC1310_LAUNCHXL.h"
+ *  @endcode
+ *
+ *  ============================================================================
+ */
+#ifndef __CC1310_LAUNCHXL_BOARD_H__
+#define __CC1310_LAUNCHXL_BOARD_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include "contiki-conf.h"
+
+/* Includes */
+#include <ti/drivers/PIN.h>
+#include <ti/devices/DeviceFamily.h>
+#include DeviceFamily_constructPath(driverlib/ioc.h)
+
+/* Externs */
+extern const PIN_Config BoardGpioInitTable[];
+
+/* Defines */
+#define CC1310_LAUNCHXL
+
+/* Mapping of pins to board signals using general board aliases
+ *      <board signal alias>                  <pin mapping>   <comments>
+ */
+
+/* Analog capable DIOs */
+//#define CC1310_LAUNCHXL_DIO23_ANALOG          IOID_23
+//#define CC1310_LAUNCHXL_DIO24_ANALOG          IOID_24
+//#define CC1310_LAUNCHXL_DIO25_ANALOG          IOID_25
+//#define CC1310_LAUNCHXL_DIO26_ANALOG          IOID_26
+//#define CC1310_LAUNCHXL_DIO27_ANALOG          IOID_27
+//#define CC1310_LAUNCHXL_DIO28_ANALOG          IOID_28
+//#define CC1310_LAUNCHXL_DIO29_ANALOG          IOID_29
+//#define CC1310_LAUNCHXL_DIO30_ANALOG          IOID_30
+
+/* Digital IOs */
+#define CC1310_LAUNCHXL_DIO0                  IOID_0
+#define CC1310_LAUNCHXL_DIO6                  IOID_6
+#define CC1310_LAUNCHXL_DIO7                  IOID_7
+#define CC1310_LAUNCHXL_DIO8                  IOID_8
+#define CC1310_LAUNCHXL_DIO9                  IOID_9
+#define CC1310_LAUNCHXL_DIO10                 IOID_10
+#define CC1310_LAUNCHXL_DIO13                 IOID_13
+#define CC1310_LAUNCHXL_DIO14                 IOID_14
+#define CC1310_LAUNCHXL_DIO15                 IOID_15
+#define CC1310_LAUNCHXL_DIO16_TDO             IOID_16
+#define CC1310_LAUNCHXL_DIO17_TDI             IOID_17
+#define CC1310_LAUNCHXL_DIO18                 IOID_18
+#define CC1310_LAUNCHXL_DIO19                 IOID_19
+#define CC1310_LAUNCHXL_DIO20                 IOID_20
+#define CC1310_LAUNCHXL_DIO21                 IOID_21
+#define CC1310_LAUNCHXL_DIO22                 IOID_22
+#define CC1310_LAUNCHXL_DIO26                 IOID_26
+#define CC1310_LAUNCHXL_DIO27                 IOID_27
+
+/* Discrete Inputs */
+#define CC1310_LAUNCHXL_PIN_BTN1              IOID_25
+#define CC1310_LAUNCHXL_PIN_BTN2              IOID_24
+#define CC1310_LAUNCHXL_PIN_BTN3              IOID_23
+
+#define CC1310_LAUNCHXL_PIN_SPIRDY					  IOID_26
+#define CC1310_LAUNCHXL_PIN_RXRDY					    IOID_27
+
+
+/* GPIO */
+#define CC1310_LAUNCHXL_GPIO_LED_ON           1
+#define CC1310_LAUNCHXL_GPIO_LED_OFF          0
+
+/* I2C */
+#define CC1310_LAUNCHXL_I2C0_SCL0             IOID_4
+#define CC1310_LAUNCHXL_I2C0_SDA0             IOID_5
+
+/* I2S */
+#define CC1310_LAUNCHXL_I2S_ADO               PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_I2S_ADI               PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_I2S_BCLK              PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_I2S_MCLK              PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_I2S_WCLK              PIN_UNASSIGNED
+
+/* LEDs */
+#define CC1310_LAUNCHXL_PIN_LED_ON            1
+#define CC1310_LAUNCHXL_PIN_LED_OFF           0
+#define CC1310_LAUNCHXL_PIN_RLED              IOID_12
+#define CC1310_LAUNCHXL_PIN_GLED              IOID_11
+
+/* PWM Outputs */
+#define CC1310_LAUNCHXL_PWMPIN0               CC1310_LAUNCHXL_PIN_RLED
+#define CC1310_LAUNCHXL_PWMPIN1               CC1310_LAUNCHXL_PIN_GLED
+#define CC1310_LAUNCHXL_PWMPIN2               PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_PWMPIN3               PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_PWMPIN4               PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_PWMPIN5               PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_PWMPIN6               PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_PWMPIN7               PIN_UNASSIGNED
+
+/* SPI */
+#define CC1310_LAUNCHXL_SPI_FLASH_CS          PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_FLASH_CS_ON           0
+#define CC1310_LAUNCHXL_FLASH_CS_OFF          1
+
+/* SPI Board */
+#define CC1310_LAUNCHXL_SPI0_MISO             IOID_28          /* RF1.20 */
+#define CC1310_LAUNCHXL_SPI0_MOSI             IOID_29          /* RF1.18 */
+#define CC1310_LAUNCHXL_SPI0_CLK              IOID_30         /* RF1.16 */
+#define CC1310_LAUNCHXL_SPI0_CSN              IOID_1
+#define CC1310_LAUNCHXL_SPI1_MISO             PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_SPI1_MOSI             PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_SPI1_CLK              PIN_UNASSIGNED
+#define CC1310_LAUNCHXL_SPI1_CSN              PIN_UNASSIGNED
+
+/* UART Board */
+#define CC1310_LAUNCHXL_UART_RX               IOID_2          /* RXD */
+#define CC1310_LAUNCHXL_UART_TX               IOID_3          /* TXD */
+#define CC1310_LAUNCHXL_UART_CTS              PIN_UNASSIGNED         /* CTS */
+#define CC1310_LAUNCHXL_UART_RTS              PIN_UNASSIGNED         /* RTS */
+
+/*!
+ *  @brief  Initialize the general board specific settings
+ *
+ *  This function initializes the general board specific settings.
+ */
+void CC1310_LAUNCHXL_initGeneral(void);
+
+/*!
+ *  @brief  Turn off the external flash on LaunchPads
+ *
+ */
+void CC1310_LAUNCHXL_shutDownExtFlash(void);
+
+/*!
+ *  @brief  Wake up the external flash present on the board files
+ *
+ *  This function toggles the chip select for the amount of time needed
+ *  to wake the chip up.
+ */
+void CC1310_LAUNCHXL_wakeUpExtFlash(void);
+
+/*!
+ *  @def    CC1310_LAUNCHXL_ADCBufName
+ *  @brief  Enum of ADCBufs
+ */
+typedef enum CC1310_LAUNCHXL_ADCBufName {
+    CC1310_LAUNCHXL_ADCBUF0 = 0,
+
+    CC1310_LAUNCHXL_ADCBUFCOUNT
+} CC1310_LAUNCHXL_ADCBufName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_ADCBuf0ChannelName
+ *  @brief  Enum of ADCBuf channels
+ */
+typedef enum CC1310_LAUNCHXL_ADCBuf0ChannelName {
+    CC1310_LAUNCHXL_ADCBUF0CHANNEL0 = 0,
+    CC1310_LAUNCHXL_ADCBUF0CHANNEL1,
+    CC1310_LAUNCHXL_ADCBUF0CHANNEL2,
+    CC1310_LAUNCHXL_ADCBUF0CHANNEL3,
+    CC1310_LAUNCHXL_ADCBUF0CHANNEL4,
+    CC1310_LAUNCHXL_ADCBUF0CHANNEL5,
+    CC1310_LAUNCHXL_ADCBUF0CHANNEL6,
+    CC1310_LAUNCHXL_ADCBUF0CHANNEL7,
+    CC1310_LAUNCHXL_ADCBUF0CHANNELVDDS,
+    CC1310_LAUNCHXL_ADCBUF0CHANNELDCOUPL,
+    CC1310_LAUNCHXL_ADCBUF0CHANNELVSS,
+
+    CC1310_LAUNCHXL_ADCBUF0CHANNELCOUNT
+} CC1310_LAUNCHXL_ADCBuf0ChannelName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_ADCName
+ *  @brief  Enum of ADCs
+ */
+typedef enum CC1310_LAUNCHXL_ADCName {
+    CC1310_LAUNCHXL_ADC0 = 0,
+    CC1310_LAUNCHXL_ADC1,
+    CC1310_LAUNCHXL_ADC2,
+    CC1310_LAUNCHXL_ADC3,
+    CC1310_LAUNCHXL_ADC4,
+    CC1310_LAUNCHXL_ADC5,
+    CC1310_LAUNCHXL_ADC6,
+    CC1310_LAUNCHXL_ADC7,
+    CC1310_LAUNCHXL_ADCDCOUPL,
+    CC1310_LAUNCHXL_ADCVSS,
+    CC1310_LAUNCHXL_ADCVDDS,
+
+    CC1310_LAUNCHXL_ADCCOUNT
+} CC1310_LAUNCHXL_ADCName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_CryptoName
+ *  @brief  Enum of Crypto names
+ */
+typedef enum CC1310_LAUNCHXL_CryptoName {
+    CC1310_LAUNCHXL_CRYPTO0 = 0,
+
+    CC1310_LAUNCHXL_CRYPTOCOUNT
+} CC1310_LAUNCHXL_CryptoName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_AESCCMName
+ *  @brief  Enum of AESCCM names
+ */
+typedef enum CC1310_LAUNCHXL_AESCCMName {
+    CC1310_LAUNCHXL_AESCCM0 = 0,
+
+    CC1310_LAUNCHXL_AESCCMCOUNT
+} CC1310_LAUNCHXL_AESCCMName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_AESGCMName
+ *  @brief  Enum of AESGCM names
+ */
+typedef enum CC1310_LAUNCHXL_AESGCMName {
+    CC1310_LAUNCHXL_AESGCM0 = 0,
+
+    CC1310_LAUNCHXL_AESGCMCOUNT
+} CC1310_LAUNCHXL_AESGCMName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_AESCBCName
+ *  @brief  Enum of AESCBC names
+ */
+typedef enum CC1310_LAUNCHXL_AESCBCName {
+    CC1310_LAUNCHXL_AESCBC0 = 0,
+
+    CC1310_LAUNCHXL_AESCBCCOUNT
+} CC1310_LAUNCHXL_AESCBCName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_AESCTRName
+ *  @brief  Enum of AESCTR names
+ */
+typedef enum CC1310_LAUNCHXL_AESCTRName {
+    CC1310_LAUNCHXL_AESCTR0 = 0,
+
+    CC1310_LAUNCHXL_AESCTRCOUNT
+} CC1310_LAUNCHXL_AESCTRName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_AESECBName
+ *  @brief  Enum of AESECB names
+ */
+typedef enum CC1310_LAUNCHXL_AESECBName {
+    CC1310_LAUNCHXL_AESECB0 = 0,
+
+    CC1310_LAUNCHXL_AESECBCOUNT
+} CC1310_LAUNCHXL_AESECBName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_AESCTRDRBGName
+ *  @brief  Enum of AESCTRDRBG names
+ */
+typedef enum CC1310_LAUNCHXL_AESCTRDRBGName {
+    CC1310_LAUNCHXL_AESCTRDRBG0 = 0,
+
+    CC1310_LAUNCHXL_AESCTRDRBGCOUNT
+} CC1310_LAUNCHXL_AESCTRDRBGName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_TRNGName
+ *  @brief  Enum of TRNG names
+ */
+typedef enum CC1310_LAUNCHXL_TRNGName {
+    CC1310_LAUNCHXL_TRNG0 = 0,
+
+    CC1310_LAUNCHXL_TRNGCOUNT
+} CC1310_LAUNCHXL_TRNGName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_GPIOName
+ *  @brief  Enum of GPIO names
+ */
+//typedef enum CC1310_LAUNCHXL_GPIOName {
+//		CC1310_LAUNCHXL_GPIO_BTN1,
+//		CC1310_LAUNCHXL_GPIO_BTN2,
+//		CC1310_LAUNCHXL_GPIO_BTN3,
+//
+//		CC1310_LAUNCHXL_GPIO_SPIRDY,
+//		CC1310_LAUNCHXL_GPIO_RXRDY,
+//
+//    CC1310_LAUNCHXL_GPIO_LED_GREEN,
+//    CC1310_LAUNCHXL_GPIO_LED_RED,
+//
+//    CC1310_LAUNCHXL_SDSPI_CS,
+//    CC1310_LAUNCHXL_GPIOCOUNT
+//} CC1310_LAUNCHXL_GPIOName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_GPTimerName
+ *  @brief  Enum of GPTimer parts
+ */
+typedef enum CC1310_LAUNCHXL_GPTimerName {
+    CC1310_LAUNCHXL_GPTIMER0A = 0,
+    CC1310_LAUNCHXL_GPTIMER0B,
+    CC1310_LAUNCHXL_GPTIMER1A,
+    CC1310_LAUNCHXL_GPTIMER1B,
+    CC1310_LAUNCHXL_GPTIMER2A,
+    CC1310_LAUNCHXL_GPTIMER2B,
+    CC1310_LAUNCHXL_GPTIMER3A,
+    CC1310_LAUNCHXL_GPTIMER3B,
+
+    CC1310_LAUNCHXL_GPTIMERPARTSCOUNT
+} CC1310_LAUNCHXL_GPTimerName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_GPTimers
+ *  @brief  Enum of GPTimers
+ */
+typedef enum CC1310_LAUNCHXL_GPTimers {
+    CC1310_LAUNCHXL_GPTIMER0 = 0,
+    CC1310_LAUNCHXL_GPTIMER1,
+    CC1310_LAUNCHXL_GPTIMER2,
+    CC1310_LAUNCHXL_GPTIMER3,
+
+    CC1310_LAUNCHXL_GPTIMERCOUNT
+} CC1310_LAUNCHXL_GPTimers;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_I2CName
+ *  @brief  Enum of I2C names
+ */
+typedef enum CC1310_LAUNCHXL_I2CName {
+#if TI_I2C_CONF_I2C0_ENABLE
+    CC1310_LAUNCHXL_I2C0 = 0,
+#endif
+
+    CC1310_LAUNCHXL_I2CCOUNT
+} CC1310_LAUNCHXL_I2CName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_I2SName
+ *  @brief  Enum of I2S names
+ */
+typedef enum CC1310_LAUNCHXL_I2SName {
+    CC1310_LAUNCHXL_I2S0 = 0,
+
+    CC1310_LAUNCHXL_I2SCOUNT
+} CC1310_LAUNCHXL_I2SName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_NVSName
+ *  @brief  Enum of NVS names
+ */
+typedef enum CC1310_LAUNCHXL_NVSName {
+#if TI_NVS_CONF_NVS_INTERNAL_ENABLE
+    CC1310_LAUNCHXL_NVSCC26XX0 = 0,
+#endif
+#if TI_NVS_CONF_NVS_EXTERNAL_ENABLE
+    CC1310_LAUNCHXL_NVSSPI25X0,
+#endif
+
+    CC1310_LAUNCHXL_NVSCOUNT
+} CC1310_LAUNCHXL_NVSName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_PWMName
+ *  @brief  Enum of PWM outputs
+ */
+typedef enum CC1310_LAUNCHXL_PWMName {
+    CC1310_LAUNCHXL_PWM0 = 0,
+    CC1310_LAUNCHXL_PWM1,
+    CC1310_LAUNCHXL_PWM2,
+    CC1310_LAUNCHXL_PWM3,
+    CC1310_LAUNCHXL_PWM4,
+    CC1310_LAUNCHXL_PWM5,
+    CC1310_LAUNCHXL_PWM6,
+    CC1310_LAUNCHXL_PWM7,
+
+    CC1310_LAUNCHXL_PWMCOUNT
+} CC1310_LAUNCHXL_PWMName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_SDName
+ *  @brief  Enum of SD names
+ */
+typedef enum CC1310_LAUNCHXL_SDName {
+    CC1310_LAUNCHXL_SDSPI0 = 0,
+
+    CC1310_LAUNCHXL_SDCOUNT
+} CC1310_LAUNCHXL_SDName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_SPIName
+ *  @brief  Enum of SPI names
+ */
+typedef enum CC1310_LAUNCHXL_SPIName {
+#if TI_SPI_CONF_SPI0_ENABLE
+    CC1310_LAUNCHXL_SPI0 = 0,
+#endif
+#if TI_SPI_CONF_SPI1_ENABLE
+    CC1310_LAUNCHXL_SPI1,
+#endif
+
+    CC1310_LAUNCHXL_SPICOUNT
+} CC1310_LAUNCHXL_SPIName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_UARTName
+ *  @brief  Enum of UARTs
+ */
+typedef enum CC1310_LAUNCHXL_UARTName {
+#if TI_UART_CONF_UART0_ENABLE
+    CC1310_LAUNCHXL_UART0 = 0,
+#endif
+
+    CC1310_LAUNCHXL_UARTCOUNT
+} CC1310_LAUNCHXL_UARTName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_UDMAName
+ *  @brief  Enum of DMA buffers
+ */
+typedef enum CC1310_LAUNCHXL_UDMAName {
+    CC1310_LAUNCHXL_UDMA0 = 0,
+
+    CC1310_LAUNCHXL_UDMACOUNT
+} CC1310_LAUNCHXL_UDMAName;
+
+/*!
+ *  @def    CC1310_LAUNCHXL_WatchdogName
+ *  @brief  Enum of Watchdogs
+ */
+typedef enum CC1310_LAUNCHXL_WatchdogName {
+    CC1310_LAUNCHXL_WATCHDOG0 = 0,
+
+    CC1310_LAUNCHXL_WATCHDOGCOUNT
+} CC1310_LAUNCHXL_WatchdogName;
+
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __CC1310_LAUNCHXL_BOARD_H__ */
diff --git a/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/CC1310_LAUNCHXL_fxns.c b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/CC1310_LAUNCHXL_fxns.c
new file mode 100644
index 000000000..bfbd2cc64
--- /dev/null
+++ b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/CC1310_LAUNCHXL_fxns.c
@@ -0,0 +1,166 @@
+/*
+ * Copyright (c) 2018-2019, Texas Instruments Incorporated
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * *  Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * *  Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * *  Neither the name of Texas Instruments Incorporated nor the names of
+ *    its contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ *  ======== CC1310_LAUNCHXL_fxns.c ========
+ *  This file contains the board-specific initialization functions.
+ */
+
+#include <stdbool.h>
+#include <stddef.h>
+#include <stdint.h>
+
+#include <ti/devices/DeviceFamily.h>
+#include DeviceFamily_constructPath(driverlib/ioc.h)
+#include DeviceFamily_constructPath(driverlib/cpu.h)
+
+#include <ti/drivers/pin/PINCC26XX.h>
+
+#include <ti/drivers/Board.h>
+
+#include "Board.h"
+
+#if (TI_NVS_CONF_NVS_EXTERNAL_ENABLE == 1)
+/*
+ *  ======== CC1310_LAUNCHXL_sendExtFlashByte ========
+ */
+void CC1310_LAUNCHXL_sendExtFlashByte(PIN_Handle pinHandle, uint8_t byte)
+{
+    uint8_t i;
+
+    /* SPI Flash CS */
+    PIN_setOutputValue(pinHandle, IOID_20, 0);
+
+    for (i = 0; i < 8; i++) {
+        PIN_setOutputValue(pinHandle, IOID_10, 0);  /* SPI Flash CLK */
+
+        /* SPI Flash MOSI */
+        PIN_setOutputValue(pinHandle, IOID_9, (byte >> (7 - i)) & 0x01);
+        PIN_setOutputValue(pinHandle, IOID_10, 1);  /* SPI Flash CLK */
+
+        /*
+         * Waste a few cycles to keep the CLK high for at
+         * least 45% of the period.
+         * 3 cycles per loop: 8 loops @ 48 Mhz = 0.5 us.
+         */
+        CPUdelay(8);
+    }
+
+    PIN_setOutputValue(pinHandle, IOID_10, 0);  /* CLK */
+    PIN_setOutputValue(pinHandle, IOID_20, 1);  /* CS */
+
+    /*
+     * Keep CS high at least 40 us
+     * 3 cycles per loop: 700 loops @ 48 Mhz ~= 44 us
+     */
+    CPUdelay(700);
+}
+
+/*
+ *  ======== CC1310_LAUNCHXL_wakeUpExtFlash ========
+ */
+void CC1310_LAUNCHXL_wakeUpExtFlash(void)
+{
+    PIN_Config extFlashPinTable[] = {
+        /* SPI Flash CS */
+        IOID_20 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL |
+                PIN_INPUT_DIS | PIN_DRVSTR_MED,
+        PIN_TERMINATE
+    };
+    PIN_State extFlashPinState;
+    PIN_Handle extFlashPinHandle = PIN_open(&extFlashPinState, extFlashPinTable);
+
+    /*
+     *  To wake up we need to toggle the chip select at
+     *  least 20 ns and ten wait at least 35 us.
+     */
+
+    /* Toggle chip select for ~20ns to wake ext. flash */
+    PIN_setOutputValue(extFlashPinHandle, IOID_20, 0);
+    /* 3 cycles per loop: 1 loop @ 48 Mhz ~= 62 ns */
+    CPUdelay(1);
+    PIN_setOutputValue(extFlashPinHandle, IOID_20, 1);
+    /* 3 cycles per loop: 560 loops @ 48 Mhz ~= 35 us */
+    CPUdelay(560);
+
+    PIN_close(extFlashPinHandle);
+}
+
+/*
+ *  ======== CC1310_LAUNCHXL_shutDownExtFlash ========
+ */
+void CC1310_LAUNCHXL_shutDownExtFlash(void)
+{
+    /*
+     *  To be sure we are putting the flash into sleep and not waking it,
+     *  we first have to make a wake up call
+     */
+    CC1310_LAUNCHXL_wakeUpExtFlash();
+
+    PIN_Config extFlashPinTable[] = {
+        /* SPI Flash CS*/
+        IOID_20 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL |
+                PIN_INPUT_DIS | PIN_DRVSTR_MED,
+        /* SPI Flash CLK */
+        IOID_10 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL |
+                PIN_INPUT_DIS | PIN_DRVSTR_MED,
+        /* SPI Flash MOSI */
+        IOID_9 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL |
+                PIN_INPUT_DIS | PIN_DRVSTR_MED,
+        /* SPI Flash MISO */
+        IOID_8 | PIN_INPUT_EN | PIN_PULLDOWN,
+        PIN_TERMINATE
+    };
+    PIN_State extFlashPinState;
+    PIN_Handle extFlashPinHandle = PIN_open(&extFlashPinState, extFlashPinTable);
+
+    uint8_t extFlashShutdown = 0xB9;
+
+    CC1310_LAUNCHXL_sendExtFlashByte(extFlashPinHandle, extFlashShutdown);
+
+    PIN_close(extFlashPinHandle);
+}
+
+#endif
+
+/*
+ *  ======== Board_initHook ========
+ *  Called by Board_init() to perform board-specific initialization.
+ */
+void Board_initHook()
+{
+#if (TI_NVS_CONF_NVS_EXTERNAL_ENABLE == 1)
+    CC1310_LAUNCHXL_shutDownExtFlash();
+#endif
+}
+
+
diff --git a/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/Makefile.cc1310 b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/Makefile.cc1310
new file mode 100644
index 000000000..d43113151
--- /dev/null
+++ b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/Makefile.cc1310
@@ -0,0 +1,21 @@
+################################################################################
+# SimpleLink Device makefile
+
+SUBFAMILY     = cc13x0-cc26x0
+DEVICE_FAMILY = CC13X0
+DEVICE_LINE   = CC13XX
+DEVICE        = CC1310
+
+BOARD_SOURCEFILES += CC1310_LAUNCHXL.c CC1310_LAUNCHXL_fxns.c
+
+SUPPORTS_PROP_MODE  = 1
+SUPPORTS_IEEE_MODE  = 0
+SUPPORTS_BLE_BEACON = 0
+
+SUPPORTS_HIGH_PA = 0
+
+### Signal that we can be programmed with cc2538-bsl
+BOARD_SUPPORTS_BSL = 1
+
+# Include the common board makefile
+include $(FAMILY_PATH)/launchpad/Makefile.launchpad
diff --git a/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/rf-conf.h b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/rf-conf.h
new file mode 100644
index 000000000..d26d3a864
--- /dev/null
+++ b/arch/platform/simplelink/cc13xx-cc26xx/custom/cc1310/rf-conf.h
@@ -0,0 +1,66 @@
+/*
+ * Copyright (c) 2018, Texas Instruments Incorporated - http://www.ti.com/
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/**
+ * \addtogroup launchpad-peripherals
+ * @{
+ *
+ * \file
+ *        Header file with board-specific RF configurations.
+ * \author
+ *        Texas Instruments <e2e.ti.com>
+ * \note
+ *        This file should not be included directly
+ */
+/*---------------------------------------------------------------------------*/
+#ifndef RF_CONF_H_
+#define RF_CONF_H_
+/*---------------------------------------------------------------------------*/
+#include "rf/rf.h"
+/*---------------------------------------------------------------------------*/
+/**
+ * \name  Board-specific front-end mode configurations for the Sub-1 GHz path
+ *        on the radio.
+ *
+ * These are the following front-end mode configurations for the
+ * CC1310-LAUNCHXL board:
+ *  - Sub-1 GHz: differential and external bias
+ *
+ * @{
+ */
+#define RF_SUB_1_GHZ_CONF_FRONT_END_MODE  RF_FRONT_END_MODE_DIFFERENTIAL
+#define RF_SUB_1_GHZ_CONF_BIAS_MODE       RF_BIAS_MODE_EXTERNAL
+/** @} */
+/*---------------------------------------------------------------------------*/
+#endif /* RF_CONF_H_ */
+/*---------------------------------------------------------------------------*/
+/**
+ * @}
+ * @}
+ */
diff --git a/arch/platform/simplelink/cc13xx-cc26xx/custom/leds-arch.c b/arch/platform/simplelink/cc13xx-cc26xx/custom/leds-arch.c
new file mode 100644
index 000000000..85065e104
--- /dev/null
+++ b/arch/platform/simplelink/cc13xx-cc26xx/custom/leds-arch.c
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2018, Texas Instruments Incorporated - http://www.ti.com/
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/**
+ * \addtogroup launchpad-peripherals
+ * @{
+ *
+ * \file
+ *        LED HAL definitions for the LaunchPad LEDs. Common across all
+ *        CC13xx/CC26xx LaunchPad LEDs.
+ * \author
+ *        Edvard Pettersen <e.pettersen@ti.com>
+ */
+/*---------------------------------------------------------------------------*/
+#include "contiki.h"
+#include "dev/leds.h"
+/*---------------------------------------------------------------------------*/
+#include <Board.h>
+/*---------------------------------------------------------------------------*/
+#include <stdbool.h>
+/*---------------------------------------------------------------------------*/
+const leds_t leds_arch_leds[] = {
+  /* Red LED, AKA LED0 */
+  { .pin = Board_PIN_LED0, .negative_logic = false },
+  /* Green LED, AKA LED1 */
+  { .pin = Board_PIN_LED1, .negative_logic = false },
+};
+/*---------------------------------------------------------------------------*/
+/** @} */

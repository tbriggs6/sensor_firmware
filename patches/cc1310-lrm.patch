diff --git a/arch/cpu/simplelink-cc13xx-cc26xx/Makefile.cc13xx-cc26xx b/arch/cpu/simplelink-cc13xx-cc26xx/Makefile.cc13xx-cc26xx
index 303600bdc..0a6f96ad4 100644
--- a/arch/cpu/simplelink-cc13xx-cc26xx/Makefile.cc13xx-cc26xx
+++ b/arch/cpu/simplelink-cc13xx-cc26xx/Makefile.cc13xx-cc26xx
@@ -64,7 +64,14 @@ CONTIKI_CPU_SOURCEFILES += ieee-addr.c      ble-addr.c
 CONTIKI_CPU_SOURCEFILES += ble-beacond.c
 
 ifeq ($(SUPPORTS_PROP_MODE),1)
- CONTIKI_CPU_SOURCEFILES += prop-mode.c prop-settings.c prop-tx-power.c
+
+ifeq ($(CC1310_LRM),1)
+ CONTIKI_CPU_SOURCEFILES += prop-lrm.c
+else
+ CONTIKI_CPU_SOURCEFILES += prop-settings.c
+endif
+
+ CONTIKI_CPU_SOURCEFILES += prop-mode.c prop-tx-power.c
 endif
 
 ifeq ($(SUPPORTS_IEEE_MODE),1)
diff --git a/arch/cpu/simplelink-cc13xx-cc26xx/cc13xx-cc26xx-conf.h b/arch/cpu/simplelink-cc13xx-cc26xx/cc13xx-cc26xx-conf.h
index e0ad644b3..7e010171c 100644
--- a/arch/cpu/simplelink-cc13xx-cc26xx/cc13xx-cc26xx-conf.h
+++ b/arch/cpu/simplelink-cc13xx-cc26xx/cc13xx-cc26xx-conf.h
@@ -188,11 +188,28 @@
 /* Netstack configuration. */
 #define NETSTACK_CONF_RADIO         prop_mode_driver
 
+#ifdef CC1310_LRM
+
+#ifndef UIP_CONF_ND6_RETRANS_TIMER
+#define UIP_CONF_ND6_RETRANS_TIMER 20000
+#endif
+
+#ifndef CONTIKI_WATCHDOG_CONF_TIMER_TOP
+#define CONTIKI_WATCHDOG_CONF_TIMER_TOP  0x4fffff 
+#endif
+
+#define CSMA_CONF_ACK_WAIT_TIME                (RTIMER_SECOND / 30)
+#define CSMA_CONF_AFTER_ACK_DETECTED_WAIT_TIME (RTIMER_SECOND / 100)
+#define CSMA_CONF_SEND_SOFT_ACK      1
+#else
+/* Otherwise, use standard 50-kbps GFSK-2 */
+
 /* CSMA configuration. */
 #define CSMA_CONF_ACK_WAIT_TIME                (RTIMER_SECOND / 300)
 #define CSMA_CONF_AFTER_ACK_DETECTED_WAIT_TIME (RTIMER_SECOND / 1000)
 #define CSMA_CONF_SEND_SOFT_ACK      1
 
+#endif
 /*----- CC13xx IEEE-mode ----------------------------------------------------*/
 #elif (RF_MODE == RF_MODE_2_4_GHZ) && (SUPPORTS_IEEE_MODE)
 
diff --git a/arch/cpu/simplelink-cc13xx-cc26xx/cc13xx-cc26xx-def.h b/arch/cpu/simplelink-cc13xx-cc26xx/cc13xx-cc26xx-def.h
index 7c79cc611..b115dfa6e 100644
--- a/arch/cpu/simplelink-cc13xx-cc26xx/cc13xx-cc26xx-def.h
+++ b/arch/cpu/simplelink-cc13xx-cc26xx/cc13xx-cc26xx-def.h
@@ -59,10 +59,21 @@
 
 /* 1 len byte, 2 bytes CRC */
 #define RADIO_PHY_OVERHEAD         3
+
+#ifdef CC1310_LRM
+// 5kpbs data rate, one byte = 1600us !?!
+
+#define RADIO_BYTE_AIR_TIME       1600
+#define RADIO_DELAY_BEFORE_TX ((unsigned)US_TO_RTIMERTICKS(RADIO_PHY_HEADER_LEN * RADIO_BYTE_AIR_TIME))
+
+#else
 /* 250kbps data rate. One byte = 32us */
 #define RADIO_BYTE_AIR_TIME       32
 /* Delay between GO signal and SFD */
 #define RADIO_DELAY_BEFORE_TX       ((unsigned)US_TO_RTIMERTICKS(81))
+
+#endif
+
 /* Delay between GO signal and start listening.
  * This value is so small because the radio is constantly on within each timeslot. */
 #define RADIO_DELAY_BEFORE_RX       ((unsigned)US_TO_RTIMERTICKS(15))
diff --git a/arch/cpu/simplelink-cc13xx-cc26xx/rf-settings/cc13x0/prop-lrm.c b/arch/cpu/simplelink-cc13xx-cc26xx/rf-settings/cc13x0/prop-lrm.c
new file mode 100644
index 000000000..e40891615
--- /dev/null
+++ b/arch/cpu/simplelink-cc13xx-cc26xx/rf-settings/cc13x0/prop-lrm.c
@@ -0,0 +1,272 @@
+//*********************************************************************************
+// Generated by SmartRF Studio version 2.13.1 (build#180)
+// The applied template is compatible with CC13x0 SDK version 2.10.xx.xx or newer.
+// Device: CC1310 Rev. B (2.1)
+//
+//*********************************************************************************
+
+
+//*********************************************************************************
+// Parameter summary
+// RX Address0: 0xAA 
+// RX Address1: 0xBB 
+// RX Address Mode: No address check 
+// Frequency: 868.00000 MHz
+// Data Format: Serial mode disable 
+// Deviation: 5.000 kHz
+// Packet Length Config: Variable 
+// Max Packet Length: 255 
+// Packet Length: 20 
+// Packet Data: 255 
+// RX Filter BW: 49 kHz
+// Symbol Rate: 19.99969 kBaud
+// Sync Word Length: 32 Bits 
+// TX Power: 14 dBm (requires define CCFG_FORCE_VDDR_HH = 1 in ccfg.c, see CC13xx/CC26xx Technical Reference Manual)
+// Whitening: CC1101/CC2500 compatible 
+
+/*---------------------------------------------------------------------------*/
+#include "contiki-conf.h"
+#include "sys/cc.h"
+/*---------------------------------------------------------------------------*/
+#include <ti/devices/DeviceFamily.h>
+#include DeviceFamily_constructPath(driverlib/rf_mailbox.h)
+#include DeviceFamily_constructPath(driverlib/rf_common_cmd.h)
+#include DeviceFamily_constructPath(driverlib/rf_prop_cmd.h)
+#include DeviceFamily_constructPath(rf_patches/rf_patch_cpe_sl_longrange.h)
+#include DeviceFamily_constructPath(rf_patches/rf_patch_mce_sl_longrange.h)
+#include DeviceFamily_constructPath(rf_patches/rf_patch_rfe_sl_longrange.h)
+
+#include "prop-lrm.h"
+
+// TI-RTOS RF Mode Object
+RF_Mode rf_prop_mode =
+{
+    .rfMode = RF_MODE_PROPRIETARY_SUB_1,
+    .cpePatchFxn = &rf_patch_cpe_sl_longrange,
+    .mcePatchFxn = &rf_patch_mce_sl_longrange,
+    .rfePatchFxn = &rf_patch_rfe_sl_longrange
+};
+
+// Overrides for CMD_PROP_RADIO_DIV_SETUP
+uint32_t rf_prop_overrides[] CC_ALIGN(4) =
+{
+    // override_use_patch_simplelink_long_range.xml
+    // PHY: Use MCE RAM patch, RFE RAM patch
+    MCE_RFE_OVERRIDE(1,0,0,1,0,0),
+    // override_synth_prop_863_930_div5_lbw60k.xml
+    // Synth: Set recommended RTRIM to 7
+    HW_REG_OVERRIDE(0x4038,0x0037),
+    // Synth: Set Fref to 4 MHz
+    (uint32_t)0x000684A3,
+    // Synth: Configure fine calibration setting
+    HW_REG_OVERRIDE(0x4020,0x7F00),
+    // Synth: Configure fine calibration setting
+    HW_REG_OVERRIDE(0x4064,0x0040),
+    // Synth: Configure fine calibration setting
+    (uint32_t)0xB1070503,
+    // Synth: Configure fine calibration setting
+    (uint32_t)0x05330523,
+    // Synth: Set loop bandwidth after lock to 60 kHz
+    (uint32_t)0x40410583,
+    // Synth: Set loop bandwidth after lock to 60 kHz
+    (uint32_t)0x32CC0603,
+    // Synth: Set loop bandwidth after lock to 60 kHz
+    (uint32_t)0x00010623,
+    // Synth: Configure VCO LDO (in ADI1, set VCOLDOCFG=0x9F to use voltage input reference)
+    ADI_REG_OVERRIDE(1,4,0x9F),
+    // Synth: Configure synth LDO (in ADI1, set SLDOCTL0.COMP_CAP=1)
+    ADI_HALFREG_OVERRIDE(1,7,0x4,0x4),
+    // Synth: Use 24 MHz XOSC as synth clock, enable extra PLL filtering
+    (uint32_t)0x02010403,
+    // Synth: Configure extra PLL filtering
+    (uint32_t)0x00108463,
+    // Synth: Increase synth programming timeout (0x04B0 RAT ticks = 300 us)
+    (uint32_t)0x04B00243,
+    // override_synth_disable_bias_div5.xml
+    // Synth: Set divider bias to disabled
+    HW32_ARRAY_OVERRIDE(0x405C,1),
+    // Synth: Set divider bias to disabled (specific for loDivider=5)
+    (uint32_t)0x18000200,
+    // override_phy_rx_aaf_bw_0xd.xml
+    // Rx: Set anti-aliasing filter bandwidth to 0xD (in ADI0, set IFAMPCTL3[7:4]=0xD)
+    ADI_HALFREG_OVERRIDE(0,61,0xF,0xD),
+    // override_phy_gfsk_rx.xml
+    // Rx: Set LNA bias current trim offset to 3
+    (uint32_t)0x00038883,
+    // Rx: Freeze RSSI on sync found event
+    HW_REG_OVERRIDE(0x6084,0x35F1),
+    // override_phy_gfsk_pa_ramp_agc_reflevel_0x14.xml
+    // Tx: Configure PA ramping setting (0x41). Rx: Set AGC reference level to 0x14.
+    HW_REG_OVERRIDE(0x6088,0x4114),
+    // Tx: Configure PA ramping setting
+    HW_REG_OVERRIDE(0x608C,0x8213),
+    // override_phy_long_range_dsss2.xml
+    // PHY: Configure DSSS SF=2
+    HW_REG_OVERRIDE(0x505C,0x0100),
+
+    // override_phy_rx_rssi_offset_5db.xml
+    // Rx: Set RSSI offset to adjust reported RSSI by +5 dB (default: 0), trimmed for external bias and differential configuration
+    (uint32_t)0x00FB88A3,
+
+    // TX power override
+    // Tx: Set PA trim to max (in ADI0, set PACTL0=0xF8)
+    ADI_REG_OVERRIDE(0,12,0xF8),
+
+ //THB - added these to try to fix CRC error
+ /* Overrides for CRC16 functionality */
+  (uint32_t)0x943,
+  (uint32_t)0x963,
+
+
+
+    (uint32_t)0xFFFFFFFF
+};
+
+
+// CMD_PROP_RADIO_DIV_SETUP
+// Proprietary Mode Radio Setup Command for All Frequency Bands
+rfc_CMD_PROP_RADIO_DIV_SETUP_t rf_cmd_prop_radio_div_setup =
+{
+    .commandNo = 0x3807,
+    .status = 0x0000,
+    .pNextOp = 0, // INSERT APPLICABLE POINTER: (uint8_t*)&xxx
+    .startTime = 0x00000000,
+    .startTrigger.triggerType = 0x0,
+    .startTrigger.bEnaCmd = 0x0,
+    .startTrigger.triggerNo = 0x0,
+    .startTrigger.pastTrig = 0x0,
+    .condition.rule = 0x1,
+    .condition.nSkip = 0x0,
+    .modulation.modType = 0x1,
+    .modulation.deviation = 0x14,
+    .symbolRate.preScale = 0xF,
+    .symbolRate.rateWord = 0x3333,
+    //.symbolRate.decimMode = 0x0,
+    .rxBw = 0x21,
+    .preamConf.nPreamBytes = 0x3,
+    .preamConf.preamMode = 0x0,
+    .formatConf.nSwBits = 0x20,
+    .formatConf.bBitReversal = 0x0,
+    .formatConf.bMsbFirst = 0x1,
+    .formatConf.fecMode = 0x8,
+    .formatConf.whitenMode = 0x1,
+    .config.frontEndMode = 0x0,
+    .config.biasMode = 0x1,
+    .config.analogCfgMode = 0x0,
+    .config.bNoFsPowerUp = 0x0,
+    .txPower = 0xA73F,
+    .pRegOverride = rf_prop_overrides,
+    .centerFreq = 0x0364,
+    .intFreq = 0x8000,
+    .loDivider = 0x05
+};
+
+
+// CMD_FS
+// Frequency Synthesizer Programming Command
+rfc_CMD_FS_t rf_cmd_prop_fs =
+{
+    .commandNo = 0x0803,
+    .status = 0x0000,
+    .pNextOp = 0, // INSERT APPLICABLE POINTER: (uint8_t*)&xxx
+    .startTime = 0x00000000,
+    .startTrigger.triggerType = 0x0,
+    .startTrigger.bEnaCmd = 0x0,
+    .startTrigger.triggerNo = 0x0,
+    .startTrigger.pastTrig = 0x0,
+    .condition.rule = 0x1,
+    .condition.nSkip = 0x0,
+    .frequency = 0x0364,
+    .fractFreq = 0x0000,
+    .synthConf.bTxMode = 0x0,
+    .synthConf.refFreq = 0x0,
+    .__dummy0 = 0x00,
+    .__dummy1 = 0x00,
+    .__dummy2 = 0x00,
+    .__dummy3 = 0x0000
+};
+
+
+// CMD_PROP_TX_ADV
+// Proprietary Mode Advanced Transmit Command
+rfc_CMD_PROP_TX_ADV_t rf_cmd_prop_tx_adv =
+{
+    .commandNo = 0x3803,
+    .status = 0x0000,
+    .pNextOp = 0, // INSERT APPLICABLE POINTER: (uint8_t*)&xxx
+    .startTime = 0x00000000,
+    .startTrigger.triggerType = 0x0,
+    .startTrigger.bEnaCmd = 0x0,
+    .startTrigger.triggerNo = 0x0,
+    .startTrigger.pastTrig = 0x0,
+    .condition.rule = 0x1,
+    .condition.nSkip = 0x0,
+    .pktConf.bFsOff = 0x0,
+    .pktConf.bUseCrc = 0x1,
+    .pktConf.bCrcIncSw = 0x0,
+    .pktConf.bCrcIncHdr = 0x0,
+    .numHdrBits = 0x10,
+    .pktLen = 0x0000,
+    .startConf.bExtTxTrig = 0x0,
+    .startConf.inputMode = 0x0,
+    .startConf.source = 0x0,
+    .preTrigger.triggerType = TRIG_REL_START,
+    .preTrigger.bEnaCmd = 0x0,
+    .preTrigger.triggerNo = 0x0,
+    .preTrigger.pastTrig = 0x1,
+    .preTime = 0x00000000,
+    .syncWord = 0x0055904E,
+    .pPkt = 0 // INSERT APPLICABLE POINTER: (uint8_t*)&xxx
+};
+
+
+// CMD_PROP_RX_ADV
+// Proprietary Mode Advanced Receive Command
+rfc_CMD_PROP_RX_ADV_t rf_cmd_prop_rx_adv =
+{
+    .commandNo = 0x3804,
+    .status = 0x0000,
+    .pNextOp = 0, // INSERT APPLICABLE POINTER: (uint8_t*)&xxx
+    .startTime = 0x00000000,
+    .startTrigger.triggerType = 0x0,
+    .startTrigger.bEnaCmd = 0x0,
+    .startTrigger.triggerNo = 0x0,
+    .startTrigger.pastTrig = 0x0,
+    .condition.rule = 0x1,
+    .condition.nSkip = 0x0,
+    .pktConf.bFsOff = 0x0,
+    .pktConf.bRepeatOk = 0x1,
+    .pktConf.bRepeatNok = 0x1,
+    .pktConf.bUseCrc = 0x1,
+    .pktConf.bCrcIncSw = 0x0,
+    .pktConf.bCrcIncHdr = 0x0,
+    .pktConf.endType = 0x0,
+    .pktConf.filterOp = 0x1,
+    .rxConf.bAutoFlushIgnored = 0x0,
+    .rxConf.bAutoFlushCrcErr = 0x0,
+    .rxConf.bIncludeHdr = 0x0,
+    .rxConf.bIncludeCrc = 0x0,
+    .rxConf.bAppendRssi = 0x1,
+    .rxConf.bAppendTimestamp = 0x0,
+    .rxConf.bAppendStatus = 0x1,
+    .syncWord0 = 0x0055904E,
+    .syncWord1 = 0x00000000,
+    .maxPktLen = 0x07FF,
+    .hdrConf.numHdrBits = 0x10,
+    .hdrConf.lenPos = 0x0,
+    .hdrConf.numLenBits = 0xB,
+    .addrConf.addrType = 0x0,
+    .addrConf.addrSize = 0x0,
+    .addrConf.addrPos = 0x0,
+    .addrConf.numAddr = 0x0,
+    .lenOffset = -4,
+    .endTrigger.triggerType = TRIG_NEVER,
+    .endTrigger.bEnaCmd = 0x0,
+    .endTrigger.triggerNo = 0x0,
+    .endTrigger.pastTrig = 0x0,
+    .endTime = 0x00000000,
+    .pAddr = 0, // INSERT APPLICABLE POINTER: (uint8_t*)&xxx
+    .pQueue = 0, // INSERT APPLICABLE POINTER: (dataQueue_t*)&xxx
+    .pOutput = 0 // INSERT APPLICABLE POINTER: (uint8_t*)&xxx
+};
+
diff --git a/arch/cpu/simplelink-cc13xx-cc26xx/rf-settings/cc13x0/prop-lrm.h b/arch/cpu/simplelink-cc13xx-cc26xx/rf-settings/cc13x0/prop-lrm.h
new file mode 100644
index 000000000..f97123027
--- /dev/null
+++ b/arch/cpu/simplelink-cc13xx-cc26xx/rf-settings/cc13x0/prop-lrm.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2018, Texas Instruments Incorporated - http://www.ti.com/
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+/*---------------------------------------------------------------------------*/
+#ifndef PROP_SETTINGS_H_
+#define PROP_SETTINGS_H_
+/*---------------------------------------------------------------------------*/
+#include "contiki-conf.h"
+/*---------------------------------------------------------------------------*/
+#include <ti/devices/DeviceFamily.h>
+#include DeviceFamily_constructPath(driverlib/rf_mailbox.h)
+#include DeviceFamily_constructPath(driverlib/rf_common_cmd.h)
+#include DeviceFamily_constructPath(driverlib/rf_prop_cmd.h)
+#include DeviceFamily_constructPath(driverlib/rf_prop_mailbox.h)
+
+#include <ti/drivers/rf/RF.h>
+/*---------------------------------------------------------------------------*/
+/* TI-RTOS RF Mode Object */
+extern RF_Mode                        rf_prop_mode;
+/*---------------------------------------------------------------------------*/
+/* RF Core API commands */
+extern rfc_CMD_PROP_RADIO_DIV_SETUP_t rf_cmd_prop_radio_div_setup;
+extern rfc_CMD_FS_t                   rf_cmd_prop_fs;
+extern rfc_CMD_PROP_TX_ADV_t          rf_cmd_prop_tx_adv;
+extern rfc_CMD_PROP_RX_ADV_t          rf_cmd_prop_rx_adv;
+/*---------------------------------------------------------------------------*/
+#endif /* PROP_SETTINGS_H_ */
+/*---------------------------------------------------------------------------*/
diff --git a/arch/cpu/simplelink-cc13xx-cc26xx/rf/prop-mode.c b/arch/cpu/simplelink-cc13xx-cc26xx/rf/prop-mode.c
index 3d62d2951..ed2f5fae7 100644
--- a/arch/cpu/simplelink-cc13xx-cc26xx/rf/prop-mode.c
+++ b/arch/cpu/simplelink-cc13xx-cc26xx/rf/prop-mode.c
@@ -78,6 +78,7 @@
 #include "sys/log.h"
 #define LOG_MODULE "Radio"
 #define LOG_LEVEL LOG_LEVEL_NONE
+
 /*---------------------------------------------------------------------------*/
 #undef CLAMP
 #define CLAMP(v, vmin, vmax)  (MAX(MIN(v, vmax), vmin))
@@ -140,11 +141,19 @@ typedef enum {
  */
 #define MAX_PAYLOAD_LEN 125
 /*---------------------------------------------------------------------------*/
+#ifdef CC1310_LRM
+/* How long to wait for the RF to enter RX in rf_cmd_ieee_rx */
+#define TIMEOUT_ENTER_RX_WAIT   (RTIMER_SECOND / 128)
+
+/* How long to wait for the rx read entry to become ready */
+#define TIMEOUT_DATA_ENTRY_BUSY (RTIMER_SECOND / 25)
+#else
 /* How long to wait for the RF to enter RX in rf_cmd_ieee_rx */
 #define TIMEOUT_ENTER_RX_WAIT   (RTIMER_SECOND >> 10)
 
 /* How long to wait for the rx read entry to become ready */
 #define TIMEOUT_DATA_ENTRY_BUSY (RTIMER_SECOND / 250)
+#endif
 /*---------------------------------------------------------------------------*/
 /* TX buf configuration */
 #define TX_BUF_HDR_LEN          2
diff --git a/os/contiki-main.c b/os/contiki-main.c
index 79b4acb39..3eaf5b3ba 100644
--- a/os/contiki-main.c
+++ b/os/contiki-main.c
@@ -118,6 +118,10 @@ main(void)
   LOG_INFO_LLADDR(&linkaddr_node_addr);
   LOG_INFO_("\n");
 
+#ifdef CC1310_LRM
+  LOG_INFO("CC1310 LRM Enabled\n");
+#endif
+
 #if NETSTACK_CONF_WITH_IPV6
   {
     uip_ds6_addr_t *lladdr;

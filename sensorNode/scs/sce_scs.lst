               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm
               
               ; Number of supported tasks
               .define TASK_COUNT      1
               
               ; Resource-specified definitions, if any
               .define AUXIO_I2C_SCL           11
               .define AUXIO_I2C_SDA           10
               .define I2C_BASE_DELAY          55
               .define I2C_EXT_DELAY           4
               .define I2C_STRETCH_TIMEOUT_US  200
               .define I2C_WAIT_STRETCH_DELAY  5
               .alias  i2cTaskName             readData
               
               
               .segment begin "Framework"
               
               
               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector
               
               
               
               
               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]
               
                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck
               
               FwEmptyFunc:            ; Done
000b ---- adb7                         rts
               
               
               
               
               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]
               
                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq
               
                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq
               
                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq
               
                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1
               
001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop
               
                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]
               
                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]
               
                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;
               
               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]
               
                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0
               
               
               
               
               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip
               
                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]
               
                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip
               
                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1
               
0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop
               
                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]
               
                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc
               
                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]
               
                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed
               
               
               
               
               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]
               
                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen
               
                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]
               
                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...
               
               
               
               
               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown
               
                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep
               
               
               
               
0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts
               
0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts
               
               
               
               
               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0
               
               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 008e                         dw          #readData/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 008f                         dw          #readData/execute
               pFwTaskTerminateFuncTable:
006a ---- 0291                         dw          #readData/terminate
               
               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)
               
               
               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)
               
               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop
               
               
               .segment end "Framework"
               
               
               fwTaskDataStructures:
               .segment begin "Task: ReadData"
               readData/cfg:
               readData/cfg/pAuxioAAnaInput:
0075 ---- 0007                         dw          #7
0076 ---- 0006                         dw          #6
0077 ---- 0005                         dw          #5
0078 ---- 0004                         dw          #4
0079 ---- 0003                         dw          #3
               readData/cfg/pAuxioOAuxLines:
007a ---- 0008                         dw          #8
007b ---- 0009                         dw          #9
               readData/input:
               readData/output:
               readData/output/AmbLight:
007c ---- 0000                         dw          #0
               readData/output/BatterySensor:
007d ---- 0000                         dw          #0
               readData/output/Conductivity:
007e ---- 0000                         dw          #0
               readData/output/DevID:
007f ---- 0000                         dw          #0
               readData/output/HallSensor:
0080 ---- 0000                         dw          #0
               readData/output/I2CError:
0081 ---- 0000                         dw          #0
               readData/output/TemperatureSensor:
0082 ---- 0000                         dw          #0
               readData/output/colorBlue:
0083 ---- 0000                         dw          #0
               readData/output/colorClear:
0084 ---- 0000                         dw          #0
               readData/output/colorGreen:
0085 ---- 0000                         dw          #0
               readData/output/colorRed:
0086 ---- 0000                         dw          #0
               readData/output/pressure:
0087 ---- 0000                         dw          #0
0088 ---- 0000                         dw          #0
0089 ---- 0000                         dw          #0
               readData/output/temp:
008a ---- 0000                         dw          #0
008b ---- 0000                         dw          #0
008c ---- 0000                         dw          #0
               readData/state:
               readData/state/i2cStatus:
008d ---- 0000                         dw          #0
               .segment end "Task: ReadData"
               
               
               .segment begin "Task: ReadData"
               readData/initialize:
               readData/initializeDone:
008e ---- adb7                         rts         
                                       
                                       
                                       
                                       
               readData/execute:
               ;? //Check with briggs if we should have outputs for error checking
               ;? // Analog sensing logic - read the analog channel and save in output buffer
               ;? output.I2CError = 0;
008f ---- 0000                         ld          R0, #0
0090 ---- 0c81                         st          R0, [#readData/output/I2CError]
               ;? 
               ;? //Set the AUX power enable pin to high
               ;? gpioClearOutput(cfg.pAuxioOAuxLines [0]);
0091 ---- 787a                         ld          R7, [#(readData/cfg/pAuxioOAuxLines + 0)]
0092 ---- 1692                         jsr         gpioClearOutput
               ;? 
               ;? //Turn on the output LED power rail
               ;? gpioSetOutput(cfg.pAuxioOAuxLines[1]);
0093 ---- 787b                         ld          R7, [#(readData/cfg/pAuxioOAuxLines + 1)]
0094 ---- 169a                         jsr         gpioSetOutput
               ;? 
               ;? 
               ;? // delay 2ms
               ;? fwDelayUs(6500, FW_DELAY_RANGE_50_MS);
0095 ---- 7014                         ld          R7, #(((6500 * 24 ) + ((1 << 13) - 1)) >> 13)
0096 ---- 600d                         ld          R6, #13
0097 ---- 16a2                         jsr         FwDelay
               ;? 
               ;? U16 cmd_type = 0;
               ;? 
               ;? // Read the device part number -- should be 0x44 or 68
               ;? cmd_type = (CMD | RPT);
0098 ---- 0080                         ld          R0, #128
               ;? i2cStart();
0099 ---- 6000                         ld          R6, #0x0000
009a ---- 16ae                         jsr         I2cStart
009b ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | (I2C_OP_WRITE) );
009c ---- 7052                         ld          R7, #82
009d ---- 688d                         ld          R6, [#readData/state/i2cStatus]
009e ---- 16c5                         jsr         I2cTxByte
009f ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( cmd_type | ID_REG );
00a0 ---- fd40                         ld          R7, R0
00a1 ---- f212                         or          R7, #18
00a2 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00a3 ---- 16c5                         jsr         I2cTxByte
00a4 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cRepeatedStart();
00a5 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00a6 ---- 16a8                         jsr         I2cRepeatedStart
00a7 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_READ );
00a8 ---- 7053                         ld          R7, #83
00a9 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00aa ---- 16c5                         jsr         I2cTxByte
00ab ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cRxNack( output.DevID );
00ac ---- 7001                         ld          R7, #0x0001
00ad ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00ae ---- 16e3                         jsr         I2cRxByte
00af ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
00b0 ---- 7c7f                         st          R7, [#readData/output/DevID]
               ;? i2cStop();
00b1 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00b2 ---- 1702                         jsr         I2cStop
00b3 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? if(state.i2cStatus != 0x00){
00b4 ---- 088d                         ld          R0, [#readData/state/i2cStatus]
00b5 ---- 8a00                         cmp         R0, #0
00b6 ---- b603                         beq         /id0208
               ;?     output.I2CError = (output.I2CError | (1 << 0) );
00b7 ---- 0881                             ld          R0, [#readData/output/I2CError]
00b8 ---- 8201                             or          R0, #1
00b9 ---- 0c81                             st          R0, [#readData/output/I2CError]
               ;? }
               /id0208:
               ;? 
               ;? //
               ;? cmd_type = (CMD | RPT);
00ba ---- 0080                         ld          R0, #128
               ;? i2cStart();
00bb ---- 6000                         ld          R6, #0x0000
00bc ---- 16ae                         jsr         I2cStart
00bd ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_WRITE );
00be ---- 7052                         ld          R7, #82
00bf ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00c0 ---- 16c5                         jsr         I2cTxByte
00c1 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( cmd_type | TIMING_REG );
00c2 ---- fd40                         ld          R7, R0
00c3 ---- f201                         or          R7, #1
00c4 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00c5 ---- 16c5                         jsr         I2cTxByte
00c6 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( MAGIC_TIMING );
00c7 ---- 70f6                         ld          R7, #246
00c8 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00c9 ---- 16c5                         jsr         I2cTxByte
00ca ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
00cb ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00cc ---- 1702                         jsr         I2cStop
00cd ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? if(state.i2cStatus != 0x00){
00ce ---- 088d                         ld          R0, [#readData/state/i2cStatus]
00cf ---- 8a00                         cmp         R0, #0
00d0 ---- b603                         beq         /id0228
               ;?     output.I2CError = (output.I2CError | (1 << 1) );
00d1 ---- 0881                             ld          R0, [#readData/output/I2CError]
00d2 ---- 8202                             or          R0, #2
00d3 ---- 0c81                             st          R0, [#readData/output/I2CError]
               ;? }
               /id0228:
               ;? 
               ;? 
               ;? // Set gain of the color sensors to 4X
               ;? cmd_type = (CMD | RPT);
00d4 ---- 0080                         ld          R0, #128
               ;? i2cStart();
00d5 ---- 6000                         ld          R6, #0x0000
00d6 ---- 16ae                         jsr         I2cStart
00d7 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
00d8 ---- 7052                         ld          R7, #82
00d9 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00da ---- 16c5                         jsr         I2cTxByte
00db ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( cmd_type | CTRL_REG );
00dc ---- fd40                         ld          R7, R0
00dd ---- f20f                         or          R7, #15
00de ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00df ---- 16c5                         jsr         I2cTxByte
00e0 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( GAIN16X );
00e1 ---- 7002                         ld          R7, #2
00e2 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00e3 ---- 16c5                         jsr         I2cTxByte
00e4 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
00e5 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00e6 ---- 1702                         jsr         I2cStop
00e7 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? if(state.i2cStatus != 0x00){
00e8 ---- 088d                         ld          R0, [#readData/state/i2cStatus]
00e9 ---- 8a00                         cmp         R0, #0
00ea ---- b603                         beq         /id0248
               ;?     output.I2CError = (output.I2CError | (1 << 2) );
00eb ---- 0881                             ld          R0, [#readData/output/I2CError]
00ec ---- 8204                             or          R0, #4
00ed ---- 0c81                             st          R0, [#readData/output/I2CError]
               ;? }
               /id0248:
               ;? 
               ;? // Set the enable reg or the power on register to on.
               ;? cmd_type = (CMD | RPT);
00ee ---- 0080                         ld          R0, #128
               ;? i2cStart();
00ef ---- 6000                         ld          R6, #0x0000
00f0 ---- 16ae                         jsr         I2cStart
00f1 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
00f2 ---- 7052                         ld          R7, #82
00f3 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00f4 ---- 16c5                         jsr         I2cTxByte
00f5 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( cmd_type | ENABLE_REG );
00f6 ---- fd40                         ld          R7, R0
00f7 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00f8 ---- 16c5                         jsr         I2cTxByte
00f9 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( ENABLE_PON );
00fa ---- 7001                         ld          R7, #1
00fb ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00fc ---- 16c5                         jsr         I2cTxByte
00fd ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
00fe ---- 688d                         ld          R6, [#readData/state/i2cStatus]
00ff ---- 1702                         jsr         I2cStop
0100 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? if(state.i2cStatus != 0x00){
0101 ---- 088d                         ld          R0, [#readData/state/i2cStatus]
0102 ---- 8a00                         cmp         R0, #0
0103 ---- b603                         beq         /id0268
               ;?     output.I2CError = (output.I2CError | (1 << 3) );
0104 ---- 0881                             ld          R0, [#readData/output/I2CError]
0105 ---- 8208                             or          R0, #8
0106 ---- 0c81                             st          R0, [#readData/output/I2CError]
               ;? }
               /id0268:
               ;? 
               ;? 
               ;? // delay 3ms
               ;? for (U16 n = 0; n < POW_DELAY; n++) {
0107 ---- 0000                         ld          R0, #0
               /id0273:
               ;?     //confirm what the delays should be here
               ;?     fwDelayUs(1000, FW_DELAY_RANGE_100_MS);
0108 ---- 7002                             ld          R7, #(((1000 * 24 ) + ((1 << 14) - 1)) >> 14)
0109 ---- 600e                             ld          R6, #14
010a ---- 16a2                             jsr         FwDelay
               ;? }
010b ---- 8801                         add         R0, #1
010c ---- 8a05                         cmp         R0, #5
010d ---- aefa                         bltu        /id0273
               ;? 
               ;? cmd_type = (CMD | RPT);
010e ---- 0080                         ld          R0, #128
               ;? i2cStart();
010f ---- 6000                         ld          R6, #0x0000
0110 ---- 16ae                         jsr         I2cStart
0111 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
0112 ---- 7052                         ld          R7, #82
0113 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0114 ---- 16c5                         jsr         I2cTxByte
0115 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( cmd_type | ENABLE_REG );
0116 ---- fd40                         ld          R7, R0
0117 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0118 ---- 16c5                         jsr         I2cTxByte
0119 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( ENABLE_PON | ENABLE_AEN );
011a ---- 7003                         ld          R7, #3
011b ---- 688d                         ld          R6, [#readData/state/i2cStatus]
011c ---- 16c5                         jsr         I2cTxByte
011d ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
011e ---- 688d                         ld          R6, [#readData/state/i2cStatus]
011f ---- 1702                         jsr         I2cStop
0120 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? if(state.i2cStatus != 0x00){
0121 ---- 088d                         ld          R0, [#readData/state/i2cStatus]
0122 ---- 8a00                         cmp         R0, #0
0123 ---- b603                         beq         /id0291
               ;?     output.I2CError = (output.I2CError | (1 << 4) );
0124 ---- 0881                             ld          R0, [#readData/output/I2CError]
0125 ---- 8210                             or          R0, #16
0126 ---- 0c81                             st          R0, [#readData/output/I2CError]
               ;? }
               /id0291:
               ;? 
               ;? // delay 24ms
               ;? for (U16 n = 0; n < INTG_DELAY; n++) {
0127 ---- 0000                         ld          R0, #0
               /id0296:
               ;?     //confirm what the delays should be here
               ;?     fwDelayUs(1000, FW_DELAY_RANGE_100_MS);
0128 ---- 7002                             ld          R7, #(((1000 * 24 ) + ((1 << 14) - 1)) >> 14)
0129 ---- 600e                             ld          R6, #14
012a ---- 16a2                             jsr         FwDelay
               ;? }
012b ---- 8801                         add         R0, #1
012c ---- 8a18                         cmp         R0, #24
012d ---- aefa                         bltu        /id0296
               ;? 
               ;? U16 low = 0;
               ;? U16 high = 0;
               ;? 
               ;? //cmd_type = (CMD | AUTO_INCRO);
               ;? cmd_type = CMD;
012e ---- 0080                         ld          R0, #128
               ;? i2cStart();
012f ---- 6000                         ld          R6, #0x0000
0130 ---- 16ae                         jsr         I2cStart
0131 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
0132 ---- 7052                         ld          R7, #82
0133 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0134 ---- 16c5                         jsr         I2cTxByte
0135 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( cmd_type | COLORS );
0136 ---- fd40                         ld          R7, R0
0137 ---- f214                         or          R7, #20
0138 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0139 ---- 16c5                         jsr         I2cTxByte
013a ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cRepeatedStart();
013b ---- 688d                         ld          R6, [#readData/state/i2cStatus]
013c ---- 16a8                         jsr         I2cRepeatedStart
013d ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_READ );
013e ---- 7053                         ld          R7, #83
013f ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0140 ---- 16c5                         jsr         I2cTxByte
0141 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? //Reading the Clear value
               ;? i2cRxAck(low);
0142 ---- 7000                         ld          R7, #0x0000
0143 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0144 ---- 16e3                         jsr         I2cRxByte
0145 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
0146 ---- 8d47                         ld          R0, R7
               ;? i2cRxAck(high);
0147 ---- 7000                         ld          R7, #0x0000
0148 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0149 ---- 16e3                         jsr         I2cRxByte
014a ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? output.colorClear = (high << 8) | low;
014b ---- fda0                         lsl         R7, #8
014c ---- fd08                         or          R7, R0
014d ---- 7c84                         st          R7, [#readData/output/colorClear]
               ;? 
               ;? //Reading the Red value
               ;? i2cRxAck(low);
014e ---- 7000                         ld          R7, #0x0000
014f ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0150 ---- 16e3                         jsr         I2cRxByte
0151 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
0152 ---- 8d47                         ld          R0, R7
               ;? i2cRxAck(high);
0153 ---- 7000                         ld          R7, #0x0000
0154 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0155 ---- 16e3                         jsr         I2cRxByte
0156 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? output.colorRed = (high << 8) | low;
0157 ---- fda0                         lsl         R7, #8
0158 ---- fd08                         or          R7, R0
0159 ---- 7c86                         st          R7, [#readData/output/colorRed]
               ;? 
               ;? //Reading the Green value
               ;? i2cRxAck(low);
015a ---- 7000                         ld          R7, #0x0000
015b ---- 688d                         ld          R6, [#readData/state/i2cStatus]
015c ---- 16e3                         jsr         I2cRxByte
015d ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
015e ---- 8d47                         ld          R0, R7
               ;? i2cRxAck(high);
015f ---- 7000                         ld          R7, #0x0000
0160 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0161 ---- 16e3                         jsr         I2cRxByte
0162 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? output.colorGreen = (high << 8) | low;
0163 ---- fda0                         lsl         R7, #8
0164 ---- fd08                         or          R7, R0
0165 ---- 7c85                         st          R7, [#readData/output/colorGreen]
               ;? 
               ;? //Reading the Blue value
               ;? i2cRxAck(low);
0166 ---- 7000                         ld          R7, #0x0000
0167 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0168 ---- 16e3                         jsr         I2cRxByte
0169 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
016a ---- 8d47                         ld          R0, R7
               ;? i2cRxNack(high);
016b ---- 7001                         ld          R7, #0x0001
016c ---- 688d                         ld          R6, [#readData/state/i2cStatus]
016d ---- 16e3                         jsr         I2cRxByte
016e ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? output.colorBlue = (high << 8) | low;
016f ---- fda0                         lsl         R7, #8
0170 ---- fd08                         or          R7, R0
0171 ---- 7c83                         st          R7, [#readData/output/colorBlue]
               ;? 
               ;? i2cStop();
0172 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0173 ---- 1702                         jsr         I2cStop
0174 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? 
               ;? 
               ;? 
               ;? // power down analog LED power rail
               ;? //TODO: Confirm if it should be configured in Open-Drain
               ;? gpioClearOutput(cfg.pAuxioOAuxLines[1]);
0175 ---- 787b                         ld          R7, [#(readData/cfg/pAuxioOAuxLines + 1)]
0176 ---- 1692                         jsr         gpioClearOutput
               ;? 
               ;? 
               ;? ///////////////////////////////////////////////////////////////////////////////
               ;? i2cStart();
0177 ---- 6000                         ld          R6, #0x0000
0178 ---- 16ae                         jsr         I2cStart
0179 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx((MS5637_ADDR << 1) | I2C_OP_WRITE);
017a ---- 70ec                         ld          R7, #236
017b ---- 688d                         ld          R6, [#readData/state/i2cStatus]
017c ---- 16c5                         jsr         I2cTxByte
017d ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx(MS5637_CMD_RESET);
017e ---- 701e                         ld          R7, #30
017f ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0180 ---- 16c5                         jsr         I2cTxByte
0181 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
0182 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0183 ---- 1702                         jsr         I2cStop
0184 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? fwDelayUs(5000, FW_DELAY_RANGE_100_MS);
0185 ---- 7008                         ld          R7, #(((5000 * 24 ) + ((1 << 14) - 1)) >> 14)
0186 ---- 600e                         ld          R6, #14
0187 ---- 16a2                         jsr         FwDelay
               ;? 
               ;? /// Read internal pressure & temperature sensor
               ;? i2cStart();
0188 ---- 6000                         ld          R6, #0x0000
0189 ---- 16ae                         jsr         I2cStart
018a ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx((MS5637_ADDR << 1) | I2C_OP_WRITE);
018b ---- 70ec                         ld          R7, #236
018c ---- 688d                         ld          R6, [#readData/state/i2cStatus]
018d ---- 16c5                         jsr         I2cTxByte
018e ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx(MS5637_CMD_D1_256);
018f ---- 7040                         ld          R7, #64
0190 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0191 ---- 16c5                         jsr         I2cTxByte
0192 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
0193 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
0194 ---- 1702                         jsr         I2cStop
0195 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? 
               ;? fwDelayUs(5000, FW_DELAY_RANGE_100_MS);
0196 ---- 7008                         ld          R7, #(((5000 * 24 ) + ((1 << 14) - 1)) >> 14)
0197 ---- 600e                         ld          R6, #14
0198 ---- 16a2                         jsr         FwDelay
               ;? 
               ;? i2cStart();
0199 ---- 6000                         ld          R6, #0x0000
019a ---- 16ae                         jsr         I2cStart
019b ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx((MS5637_ADDR << 1) | I2C_OP_WRITE);
019c ---- 70ec                         ld          R7, #236
019d ---- 688d                         ld          R6, [#readData/state/i2cStatus]
019e ---- 16c5                         jsr         I2cTxByte
019f ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx(0);
01a0 ---- 7000                         ld          R7, #0
01a1 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01a2 ---- 16c5                         jsr         I2cTxByte
01a3 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
01a4 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01a5 ---- 1702                         jsr         I2cStop
01a6 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? i2cStart();
01a7 ---- 6000                         ld          R6, #0x0000
01a8 ---- 16ae                         jsr         I2cStart
01a9 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx((MS5637_ADDR << 1) | I2C_OP_READ);
01aa ---- 70ed                         ld          R7, #237
01ab ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01ac ---- 16c5                         jsr         I2cTxByte
01ad ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cRxAck(output.pressure[2]);
01ae ---- 7000                         ld          R7, #0x0000
01af ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01b0 ---- 16e3                         jsr         I2cRxByte
01b1 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
01b2 ---- 7c89                         st          R7, [#(readData/output/pressure + 2)]
               ;? i2cRxAck(output.pressure[1]);
01b3 ---- 7000                         ld          R7, #0x0000
01b4 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01b5 ---- 16e3                         jsr         I2cRxByte
01b6 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
01b7 ---- 7c88                         st          R7, [#(readData/output/pressure + 1)]
               ;? i2cRxNack(output.pressure[0]);
01b8 ---- 7001                         ld          R7, #0x0001
01b9 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01ba ---- 16e3                         jsr         I2cRxByte
01bb ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
01bc ---- 7c87                         st          R7, [#(readData/output/pressure + 0)]
               ;? i2cStop();
01bd ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01be ---- 1702                         jsr         I2cStop
01bf ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? 
               ;? i2cStart();
01c0 ---- 6000                         ld          R6, #0x0000
01c1 ---- 16ae                         jsr         I2cStart
01c2 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx((MS5637_ADDR << 1) | I2C_OP_WRITE);
01c3 ---- 70ec                         ld          R7, #236
01c4 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01c5 ---- 16c5                         jsr         I2cTxByte
01c6 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx(MS5637_CMD_D2_256);
01c7 ---- 7050                         ld          R7, #80
01c8 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01c9 ---- 16c5                         jsr         I2cTxByte
01ca ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
01cb ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01cc ---- 1702                         jsr         I2cStop
01cd ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? fwDelayUs(5000, FW_DELAY_RANGE_100_MS);
01ce ---- 7008                         ld          R7, #(((5000 * 24 ) + ((1 << 14) - 1)) >> 14)
01cf ---- 600e                         ld          R6, #14
01d0 ---- 16a2                         jsr         FwDelay
               ;? 
               ;? i2cStart();
01d1 ---- 6000                         ld          R6, #0x0000
01d2 ---- 16ae                         jsr         I2cStart
01d3 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx((MS5637_ADDR << 1) | I2C_OP_WRITE);
01d4 ---- 70ec                         ld          R7, #236
01d5 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01d6 ---- 16c5                         jsr         I2cTxByte
01d7 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx(0);
01d8 ---- 7000                         ld          R7, #0
01d9 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01da ---- 16c5                         jsr         I2cTxByte
01db ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
01dc ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01dd ---- 1702                         jsr         I2cStop
01de ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? i2cStart();
01df ---- 6000                         ld          R6, #0x0000
01e0 ---- 16ae                         jsr         I2cStart
01e1 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx((MS5637_ADDR << 1) | I2C_OP_READ);
01e2 ---- 70ed                         ld          R7, #237
01e3 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01e4 ---- 16c5                         jsr         I2cTxByte
01e5 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? i2cRxAck(output.temp[0]);
01e6 ---- 7000                         ld          R7, #0x0000
01e7 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01e8 ---- 16e3                         jsr         I2cRxByte
01e9 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
01ea ---- 7c8a                         st          R7, [#(readData/output/temp + 0)]
               ;? i2cRxAck(output.temp[1]);
01eb ---- 7000                         ld          R7, #0x0000
01ec ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01ed ---- 16e3                         jsr         I2cRxByte
01ee ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
01ef ---- 7c8b                         st          R7, [#(readData/output/temp + 1)]
               ;? i2cRxNack(output.temp[2]);
01f0 ---- 7001                         ld          R7, #0x0001
01f1 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01f2 ---- 16e3                         jsr         I2cRxByte
01f3 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
01f4 ---- 7c8c                         st          R7, [#(readData/output/temp + 2)]
               ;? i2cStop();
01f5 ---- 688d                         ld          R6, [#readData/state/i2cStatus]
01f6 ---- 1702                         jsr         I2cStop
01f7 ---- 6c8d                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? 
               ;? /////////////////////////////////////////////////////////////////////////////////
               ;? 
               ;? 
               ;? 
               ;? 
               ;? //confirm what the delays should be here
               ;? fwDelayUs(1000, FW_DELAY_RANGE_5_MS);
01f8 ---- 702f                         ld          R7, #(((1000 * 24 ) + ((1 << 9) - 1)) >> 9)
01f9 ---- 6009                         ld          R6, #9
01fa ---- 16a2                         jsr         FwDelay
               ;? 
               ;? // Enable the ADC
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_2P7_US, ADC_TRIGGER_MANUAL);
01fb ---- f502                         loop        #128, /id0456
01fc ---- fd47                         nop         
01fd ---- fd47                         nop         
01fe ---- fd47                         nop         
               /id0456:
01ff ---- 7041                         ld          R7, #((0 | (((3 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
0200 ---- 1462                         jsr         AdiDdiAcquire
0201 ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
0202 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
0204 ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0457:
0205 ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
0206 ---- a6fe                         biob0       /id0457
0207 ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
0208 ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
0209 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
020a ---- 7018                         ld          R7, #(3 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
020b ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
020c ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
020d ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
020e ---- fd47                         nop         
020f ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0210 ---- 1465                         jsr         AdiDdiRelease
               ;? 
               ;? U16 dummy;
               ;? // read & store the remaining adc values
               ;? adcGenManualTrigger();
0211 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(dummy);
0212 ---- 001f                         ld          R0, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0213 ---- 8b2c                         out         R0, [#IOP_EVCTL_SCEWEVSEL]
0214 ---- fdb1                         wev1        #WEVSEL_PROG
0215 ---- 8902                         in          R0, [#IOP_ANAIF_ADCFIFO]
               ;? 
               ;? U16 total;
               ;? U16 value;
               ;? 
               ;? //Read ADC Sensor Conductivity
               ;? total = 0;
0216 ---- 0000                         ld          R0, #0
               ;? adcSelectGpioInput(cfg.pAuxioAAnaInput[0]);
0217 ---- 7875                         ld          R7, [#(readData/cfg/pAuxioAAnaInput + 0)]
0218 ---- 170d                         jsr         AdccompbSelectGpioInput
               ;? adcGenManualTrigger();
0219 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
021a ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
021b ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
021c ---- fdb1                         wev1        #WEVSEL_PROG
021d ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
021e ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
021f ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0220 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0221 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0222 ---- fdb1                         wev1        #WEVSEL_PROG
0223 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0224 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
0225 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0226 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0227 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0228 ---- fdb1                         wev1        #WEVSEL_PROG
0229 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
022a ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
022b ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
022c ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
022d ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
022e ---- fdb1                         wev1        #WEVSEL_PROG
022f ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0230 ---- 8d26                         add         R0, R6
               ;? output.Conductivity = (total >> 2);
0231 ---- 8daa                         lsr         R0, #2
0232 ---- 0c7e                         st          R0, [#readData/output/Conductivity]
               ;? 
               ;? //Read ADC Sensor Temp
               ;? total = 0;
0233 ---- 0000                         ld          R0, #0
               ;? adcSelectGpioInput(cfg.pAuxioAAnaInput[1]);
0234 ---- 7876                         ld          R7, [#(readData/cfg/pAuxioAAnaInput + 1)]
0235 ---- 170d                         jsr         AdccompbSelectGpioInput
               ;? adcGenManualTrigger();
0236 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0237 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0238 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0239 ---- fdb1                         wev1        #WEVSEL_PROG
023a ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
023b ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
023c ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
023d ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
023e ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
023f ---- fdb1                         wev1        #WEVSEL_PROG
0240 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0241 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
0242 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0243 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0244 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0245 ---- fdb1                         wev1        #WEVSEL_PROG
0246 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0247 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
0248 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0249 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
024a ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
024b ---- fdb1                         wev1        #WEVSEL_PROG
024c ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
024d ---- 8d26                         add         R0, R6
               ;? 
               ;? output.TemperatureSensor = (total >> 2);
024e ---- 8daa                         lsr         R0, #2
024f ---- 0c82                         st          R0, [#readData/output/TemperatureSensor]
               ;? 
               ;? //Read ADC Sensor Battery
               ;? total = 0;
0250 ---- 0000                         ld          R0, #0
               ;? adcSelectGpioInput(cfg.pAuxioAAnaInput[3]);
0251 ---- 7878                         ld          R7, [#(readData/cfg/pAuxioAAnaInput + 3)]
0252 ---- 170d                         jsr         AdccompbSelectGpioInput
               ;? adcGenManualTrigger();
0253 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0254 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0255 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0256 ---- fdb1                         wev1        #WEVSEL_PROG
0257 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0258 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
0259 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
025a ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
025b ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
025c ---- fdb1                         wev1        #WEVSEL_PROG
025d ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
025e ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
025f ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0260 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0261 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0262 ---- fdb1                         wev1        #WEVSEL_PROG
0263 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0264 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
0265 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0266 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0267 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0268 ---- fdb1                         wev1        #WEVSEL_PROG
0269 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
026a ---- 8d26                         add         R0, R6
               ;? 
               ;? output.BatterySensor = (total >> 2);
026b ---- 8daa                         lsr         R0, #2
026c ---- 0c7d                         st          R0, [#readData/output/BatterySensor]
               ;? 
               ;? //Read ADC Sensor Hall
               ;? total = 0;
026d ---- 0000                         ld          R0, #0
               ;? adcSelectGpioInput(cfg.pAuxioAAnaInput[4]);
026e ---- 7879                         ld          R7, [#(readData/cfg/pAuxioAAnaInput + 4)]
026f ---- 170d                         jsr         AdccompbSelectGpioInput
               ;? adcGenManualTrigger();
0270 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0271 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0272 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0273 ---- fdb1                         wev1        #WEVSEL_PROG
0274 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0275 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
0276 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0277 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0278 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0279 ---- fdb1                         wev1        #WEVSEL_PROG
027a ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
027b ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
027c ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
027d ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
027e ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
027f ---- fdb1                         wev1        #WEVSEL_PROG
0280 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0281 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
0282 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0283 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0284 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0285 ---- fdb1                         wev1        #WEVSEL_PROG
0286 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0287 ---- 8d26                         add         R0, R6
               ;? 
               ;? output.HallSensor = (total >> 2);
0288 ---- 8daa                         lsr         R0, #2
0289 ---- 0c80                         st          R0, [#readData/output/HallSensor]
               ;? 
               ;? //End Reading ADC Sensors
               ;? 
               ;? 
               ;? // disable ADC
               ;? adcDisable( );
028a ---- 171a                         jsr         AdcDisable
               ;? 
               ;? //Clear the AUX power enable pin (low)
               ;? gpioSetOutput(cfg.pAuxioOAuxLines[0]);
028b ---- 787a                         ld          R7, [#(readData/cfg/pAuxioOAuxLines + 0)]
028c ---- 169a                         jsr         gpioSetOutput
               ;? 
               ;? // Generate interrupt
               ;? fwGenAlertInterrupt();
028d ---- 086c                         ld          R0, [#fwCtrlInt/bvTaskIoAlert]
028e ---- 8201                         or          R0, #(1 << 0)
028f ---- 0c6c                         st          R0, [#fwCtrlInt/bvTaskIoAlert]
               readData/executeDone:
0290 ---- adb7                         rts         
                                       
                                       
                                       
                                       
               readData/terminate:
               readData/terminateDone:
0291 ---- adb7                         rts         
               .segment end "Task: ReadData"
               
               
               .segment begin "Procedure Libary"
               ; PARAMETERS:
               ;     R7 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R5, R6, R7
               gpioClearOutput:
                                       ; Calculate the I/O register address
0292 ---- ed47                         ld          R6, R7
0293 ---- edab                         lsr         R6, #3
0294 ---- e816                         add         R6, #IOP_AIODIO0_GPIODOUTCLR
               
                                       ; Create the bit-vector to be used for manipulation
0295 ---- f007                         and         R7, #0x0007
0296 ---- 5001                         ld          R5, #1
0297 ---- dd87                         lsl         R5, R7
               
                                       ; Set the GPIO
0298 ---- df26                         out         R5, [R6]
0299 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R5, R6, R7
               gpioSetOutput:
                                       ; Calculate the I/O register address
029a ---- ed47                         ld          R6, R7
029b ---- edab                         lsr         R6, #3
029c ---- e814                         add         R6, #IOP_AIODIO0_GPIODOUTSET
               
                                       ; Create the bit-vector to be used for manipulation
029d ---- f007                         and         R7, #0x0007
029e ---- 5001                         ld          R5, #1
029f ---- dd87                         lsl         R5, R7
               
                                       ; Set the GPIO
02a0 ---- df26                         out         R5, [R6]
02a1 ---- adb7                         rts
               
               
               
               
               ; 3 + 5 CPU cycles = 16 clock cycles = 0.66 microsecond are added to the specified delay (parameter
               ; loading and timer configuration)
               ;
               ; PARAMETERS:
               ;     R7 = Delay
               ;     R6 = Prescaler exponent
               ;
               ; CLOBBERS:
               ;     R6
               FwDelay:
                                       ; Set the delay
02a2 ---- fb0c                         out         R7, [#IOP_TIMER01_T0TARGET]
               
                                       ; Configure the timer (from clock, single-mode, prescaler exponent = R6)
02a3 ---- eda4                         lsl         R6, #4
02a4 ---- eb09                         out         R6, [#IOP_TIMER01_T0CFG]
               
                                       ; Start the timer, wait for it to trigger, and stop it
02a5 ---- 640b                         iobset      #0, [#IOP_TIMER01_T0CTL]
02a6 ---- cdb1                         wev1        #WEVSEL_TIMER0
02a7 ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R5
               I2cRepeatedStart:
                                       ; Wait T_LOW (SDA is already pull-up)
02a8 ---- 53c6                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
02a9 ---- 16b3                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
02aa ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
02ab ---- 16b6                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_SU_STA
02ac ---- 53c6                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
02ad ---- 16b3                         jsr         I2cWaitDelay
               I2cStart:
                                       ; SDA = driven low
02ae ---- 460f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_HD_STA
02af ---- 53ca                         ld          R5, #-((I2C_BASE_DELAY) - (1))
02b0 ---- 16b3                         jsr         I2cWaitDelay
               
                                       ; SCL = driven low
02b1 ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Done
02b2 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS
               ;     R5 = Delay excluding the I2cWaitDelay() call, in instruction cycles
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitDelay:
                                       ; Wait for the specified number of cycles
02b3 ---- d802 /waitLoop:                  add         R5, #2
02b4 ---- defe                         bneg        /waitLoop
               
                                       ; Done
02b5 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitSclStretch:
                                       ; Load the timeout (up to 20 ms) loop counter = configured number of us
02b6 ---- 5338                         ld          R5, #(-I2C_STRETCH_TIMEOUT_US)
               /waitLoop:
                                           ; If SCL is high, we're done
02b7 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
02b8 ---- ae0b                             biob1       /done
                                           ; Unroll the loop to 12 instructions = 1 per loop for faster response
02b9 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
02ba ---- ae09                             biob1       /done
02bb ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
02bc ---- ae07                             biob1       /done
02bd ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
02be ---- ae05                             biob1       /done
02bf ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
02c0 ---- ae03                             biob1       /done
               
02c1 ---- d801                         add         R5, #1;
02c2 ---- bef4                         bnz         /waitLoop
               
               /timeout:               ; Timeout has occurred, so OR it into the flags and bail out
02c3 ---- e202                         or          R6, #0x0002
               
               /done:                  ; Done
02c4 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = TX byte shift register
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = Updated TX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cTxByte:
                                       ; Bail out if an error has occurred
02c5 ---- ea00                         cmp         R6, #0
02c6 ---- be1b                         bnz         /done
               
               
                                       ; Transmit each bit in the data byte ...
02c7 ---- b50e                         loop        #8, /byteLoopEnd
               
                                           ; Output the bit to SDA
02c8 ---- fda1                             lsl         R7, #1
02c9 8601 fc00                             tst         R7, #0x0100
02cb ---- b602                             bz          /dataSdaLow
02cc ---- 660f /dataSdaHigh:                   iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
02cd ---- 8e02                             bra         /dataSdaDone
02ce ---- 460f /dataSdaLow:                    iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
02cf ---- fd47                             nop
               /dataSdaDone:
                                           ; Wait T_LOW
02d0 ---- 53cc                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (7))
02d1 ---- 16b3                             jsr         I2cWaitDelay
               
                                           ; SCL = pull-up
02d2 ---- 670f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                           ; Wait for SCL stretching to end or time out
02d3 ---- 16b6                             jsr         I2cWaitSclStretch
               
                                           ; Wait T_HIGH
02d4 ---- 53cf                             ld          R5, #-(I2C_BASE_DELAY - (I2C_WAIT_STRETCH_DELAY + 1))
02d5 ---- 16b3                             jsr         I2cWaitDelay
               
                                           ; SCL = driven low
02d6 ---- 470f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:
               
                                       ; Receive the ACK bit
                                       ; SDA = pull-up
02d7 ---- 660f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_LOW
02d8 ---- 53c6                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
02d9 ---- 16b3                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
02da ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
02db ---- 16b6                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_HIGH
02dc ---- 53cc                         ld          R5, #-((I2C_BASE_DELAY) - (3))
02dd ---- 16b3                         jsr         I2cWaitDelay
               
                                       ; Read and store the SDA value in the status word
02de ---- 2613                         iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
02df ---- a601                         biob0       /ackSdaLow
02e0 ---- e201                             or          R6, #0x01
               /ackSdaLow:
                                       ; SCL = driven low
02e1 ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
               
               /done:                  ; Done
02e2 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = Acknowledgment bit value, 0x0000 to transmit ACK, 0x0001 to transmit NAK
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = RX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cRxByte:
                                       ; Bail out if an error has occurred
02e3 ---- ea00                         cmp         R6, #0
02e4 ---- be1c                         bnz         /done
               
               
                                       ; Receive each bit in the data byte ...
02e5 ---- b50b                         loop        #8, /byteLoopEnd
               
                                           ; SDA = pull-up
02e6 ---- 660f                             iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                           ; Wait T_LOW
02e7 ---- 53c7                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
02e8 ---- 16b3                             jsr         I2cWaitDelay
               
                                           ; SCL = pull-up
02e9 ---- 670f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                           ; Wait for SCL stretching to end or time out
02ea ---- 16b6                             jsr         I2cWaitSclStretch
               
                                           ; Wait T_HIGH
02eb ---- 53d1                             ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 3))
02ec ---- 16b3                             jsr         I2cWaitDelay
               
                                           ; Read and store SDA
02ed ---- fda1                             lsl         R7, #1
02ee ---- 2613                             iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
02ef ---- a601                             biob0       /dataSdaLow
02f0 ---- f201                                 or          R7, #0x01
               /dataSdaLow:
                                           ; SCL = driven low
02f1 ---- 470f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:
               
                                       ; Transmit the ACK bit, which is now in bit 8 of the shift register
                                       ; Output the bit to SDA
02f2 8601 fc00                         tst         R7, #0x0100
02f4 ---- b602                         bz          /ackSdaLow
02f5 ---- 660f /ackSdaHigh:                iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
02f6 ---- 8e02                         bra         /ackSdaDone
02f7 ---- 460f /ackSdaLow:                 iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
02f8 ---- fd47                         nop
               /ackSdaDone:
                                       ; Wait T_LOW
02f9 ---- 53cb                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (6))
02fa ---- 16b3                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
02fb ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
02fc ---- 16b6                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_HIGH
02fd ---- 53cf                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
02fe ---- 16b3                         jsr         I2cWaitDelay
               
                                       ; SCL = driven low
02ff ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Mask the ACK bit in the received data
0300 ---- f0ff                         and         R7, #0xFF
               
               
               /done:                  ; Done
0301 ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R5
               I2cStop:
                                       ; SDA = driven low
0302 ---- 460f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_LOW
0303 ---- 53c6                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0304 ---- 16b3                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
0305 ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
0306 ---- 16b6                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_SU_STO
0307 ---- 53cf                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
0308 ---- 16b3                         jsr         I2cWaitDelay
               
                                       ; SDA = pull-up
0309 ---- 660f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_BUF
030a ---- 53c7                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
030b ---- 16b3                         jsr         I2cWaitDelay
               
                                       ; Done
030c ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
030d ---- f007                         and         R7, #0x0007
               
                                       ; Disconnect all signals
030e ---- 1462                         jsr         AdiDdiAcquire
030f 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
0311 ---- eb51                         out         R6, [#IOP_ADICLR_MUX2_MUX3]
               
                                       ; Connect the specified GPIO
0312 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
0314 ---- ed8f                         lsr         R6, R7
0315 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
               
                                       ; Ensure that it has taken effect
0316 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
0317 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
0318 ---- 1465                         jsr         AdiDdiRelease
0319 ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R7
               AdcDisable:
                                       ; Disable the ADC reference
031a ---- 1462                         jsr         AdiDdiAcquire
031b ---- 7079                         ld          R7, #((ADI16_ADCREF_EN | ADI16_ADCREF_REF_ON_IDLE) | (ADI16_ADCREF_SRC | (ADI16_ADCREF_EXT | ADI16_ADCREF_IOMUX)))
031c ---- fb55                         out         R7, [#IOP_ADICLR_ADCREF]
               
                                       ; Assert reset and disable the ADC
031d ---- 71fb                         ld          R7, #((ADI16_ADC_EN | ADI16_ADC_RESET_N) | (BV_ADI16_ADC_SMPL_CYCLE_EXP | (BV_ADI16_ADC_SMPL_MODE | ADI16_ADC_SCALE_DIS)))
031e ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
               
                                       ; Ensure that it has taken effect
031f ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
0320 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
0321 ---- 1465                         jsr         AdiDdiRelease
               
                                       ; Disable the ADC clock (no need to wait since IOB_WUC_ADCCLKCTL_ACK goes low immediately)
0322 ---- 4431                         iobclr      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               
                                       ; Disable the ADC data interface
0323 ---- 4400                         iobclr      #0, [#IOP_ANAIF_ADCCTL]
               
0324 ---- adb7                         rts
               .segment end "Procedure Libary"
               

; Generated by TBRIGGS-PC at 2018-07-20 13:12:19.544

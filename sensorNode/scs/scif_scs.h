/** \mainpage Driver Overview
  *
  * \section section_drv_info Driver Information
  * This Sensor Controller Interface driver has been generated by the Texas Instruments Sensor Controller
  * Studio tool:
  * - <b>Project name</b>:     ADCSensors
  * - <b>Project file</b>:     Z:/tbriggs/scs/SensorControllerCode/AnalogPlus/ADCSensors.scp
  * - <b>Code prefix</b>:      SCS
  * - <b>Operating system</b>: None
  * - <b>Tool version</b>:     2.1.0.440
  * - <b>Tool patches</b>:     None
  * - <b>Target chip</b>:      CC1310, revision -, package QFN48 7x7 RGZ
  * - <b>Created</b>:          2018-05-27 14:30:31.412
  * - <b>Computer</b>:         TBRIGGS10
  * - <b>User</b>:             tbriggs
  *
  * No user-provided resource definitions were used to generate this driver.
  *
  * No user-provided procedure definitions were used to generate this driver.
  *
  * Do not edit the generated source code files other than temporarily for debug purposes. Any
  * modifications will be overwritten by the Sensor Controller Studio when generating new output.
  *
  * \section section_drv_modules Driver Modules
  * The driver is divided into three modules:
  * - \ref module_scif_generic_interface, providing the API for:
  *     - Initializing and uninitializing the driver
  *     - Task control (for starting, stopping and executing Sensor Controller tasks)
  *     - Task data exchange (for producing input data to and consume output data from Sensor Controller
  *       tasks)
  * - \ref module_scif_driver_setup, containing:
  *     - The AUX RAM image (Sensor Controller code and data)
  *     - I/O mapping information
  *     - Task data structure information
  *     - Driver setup data, to be used in the driver initialization
  *     - Project-specific functionality
  * - \ref module_scif_osal, for flexible OS support:
  *     - Interfaces with the selected operating system
  *
  * It is possible to use output from multiple Sensor Controller Studio projects in one application. Only
  * one driver setup may be active at a time, but it is possible to switch between these setups. When
  * using this option, there is one instance of the \ref module_scif_generic_interface and
  * \ref module_scif_osal modules, and multiple instances of the \ref module_scif_driver_setup module.
  * This requires that:
  * - The outputs must be generated using the same version of Sensor Controller Studio
  * - The outputs must use the same operating system
  * - The outputs must use different source code prefixes (inserted into all globals of the
  *   \ref module_scif_driver_setup)
  *
  *
  * \section section_project_info Project Description
  * No description entered
  *
  *
  * \subsection section_io_mapping I/O Mapping
  * Task I/O functions are mapped to the following pins:
  * - ReadData:
  *     - <b>A: Analog Input 0</b>: DIO23
  *     - <b>A: Analog Input 1</b>: DIO24
  *     - <b>A: Analog Input 2</b>: DIO25
  *     - <b>A: Analog Input 3</b>: DIO26
  *     - <b>A: Analog Input 4</b>: DIO27
  *     - <b>O: Pin to enable the AUX lines 0</b>: DIO7
  *     - <b>O: Pin to enable the AUX lines 1</b>: DIO6
  *     - <b>I2C SCL</b>: DIO4
  *     - <b>I2C SDA</b>: DIO5
  *
  *
  * \section section_task_info Task Description(s)
  * This driver supports the following task(s):
  *
  *
  * \subsection section_task_desc_read_data ReadData
  * No description entered
  *
  */




/** \addtogroup module_scif_driver_setup Driver Setup
  *
  * \section section_driver_setup_overview Overview
  *
  * This driver setup instance has been generated for:
  * - <b>Project name</b>:     ADCSensors
  * - <b>Code prefix</b>:      SCS
  *
  * The driver setup module contains the generated output from the Sensor Controller Studio project:
  * - Location of task control and scheduling data structures in AUX RAM
  * - The AUX RAM image, and the size the image
  * - Task data structure information (location, size and buffer count)
  * - I/O pin mapping translation table
  * - Task resource initialization and uninitialization functions
  * - Hooks for run-time logging
  *
  * @{
  */
#ifndef SCIF_SCS_H
#define SCIF_SCS_H

#include <stdint.h>
#include <stdbool.h>
#include "scif_framework.h"
#include "scif_osal_none.h"


/// Target chip name
#define SCIF_SCS_TARGET_CHIP_NAME_CC1310
/// Target chip package
#define SCIF_SCS_TARGET_CHIP_PACKAGE_QFN48_7X7_RGZ

/// Number of tasks implemented by this driver
#define SCIF_SCS_TASK_COUNT 1

/// ReadData: Task ID
#define SCIF_SCS_READ_DATA_TASK_ID 0


/// ReadData: The I2C address of the color sensor
#define SCIF_SCS_READ_DATA_ADDRESS 41
/// ReadData: The value to set the timing register to 24ms
#define SCIF_SCS_READ_DATA_ATIME_24MS 246
/// ReadData: Auto-incroment  through the registerrs
#define SCIF_SCS_READ_DATA_AUTO_INCRO 32
/// ReadData: 
#define SCIF_SCS_READ_DATA_BIG_DELAY 300
/// ReadData: The value necessary to talk to the command register
#define SCIF_SCS_READ_DATA_CMD 128
/// ReadData: The first address for reading the sensor
#define SCIF_SCS_READ_DATA_COLORS 20
/// ReadData: The register controlling the internal gain
#define SCIF_SCS_READ_DATA_CTRL_REG 15
/// ReadData: Enable the RGBC
#define SCIF_SCS_READ_DATA_ENABLE_AEN 2
/// ReadData: Enable the device to power on
#define SCIF_SCS_READ_DATA_ENABLE_PON 1
/// ReadData: The enable register for the sensor
#define SCIF_SCS_READ_DATA_ENABLE_REG 0
/// ReadData: Giving the color sensor a gain of 4
#define SCIF_SCS_READ_DATA_GAIN4X 1
/// ReadData: The value necessary to talk to the ID register
#define SCIF_SCS_READ_DATA_ID_REG 18
/// ReadData: The number of 1ms delays needed for ADC integration
#define SCIF_SCS_READ_DATA_INTG_DELAY 24
/// ReadData: 
#define SCIF_SCS_READ_DATA_MAGIC_TIMING 246
/// ReadData: The number of 1ms Delays needed for Power on
#define SCIF_SCS_READ_DATA_POW_DELAY 5
/// ReadData: Repeated byte protocol transaction
#define SCIF_SCS_READ_DATA_RPT 0
/// ReadData: RGBC Timing Register
#define SCIF_SCS_READ_DATA_TIMING_REG 1
/// ReadData I/O mapping: Analog Input
#define SCIF_SCS_READ_DATA_DIO_AANA_INPUT { 23, 24, 25, 26, 27 }
/// ReadData I/O mapping: Pin to enable the AUX lines
#define SCIF_SCS_READ_DATA_DIO_OAUX_LINES { 7, 6 }
/// ReadData I/O mapping: I2C SCL
#define SCIF_SCS_READ_DATA_DIO_I2C_SCL 4
/// ReadData I/O mapping: I2C SDA
#define SCIF_SCS_READ_DATA_DIO_I2C_SDA 5


// All shared data structures in AUX RAM need to be packed
#pragma pack(push, 2)


/// ReadData: Task configuration structure
typedef struct {
    uint16_t pAuxioAAnaInput[5]; ///< I/O mapping: Analog Input
    uint16_t pAuxioOAuxLines[2]; ///< I/O mapping: Pin to enable the AUX lines
} SCIF_SCS_READ_DATA_CFG_T;


/// ReadData: Task output data structure
typedef struct {
    uint16_t AmbLight;          ///< The ambient light sensor value
    uint16_t BatterySensor;     ///< The battery sensor
    uint16_t Conductivity;      ///< The conductivity of the water
    uint16_t DevID;             ///< 
    uint16_t HallSensor;        ///< The hall sensor value
    uint16_t I2CError;          ///< We encountered an error with the color sensor
    uint16_t TemperatureSensor; ///< The water temp value
    uint16_t colorBlue;         ///< The amount of blue reported by the color sensor
    uint16_t colorClear;        ///< The clear color reported by the color sensor
    uint16_t colorGreen;        ///< The amount of green reported by the color sensor
    uint16_t colorRed;          ///< The amount of red reported by the color sensor
} SCIF_SCS_READ_DATA_OUTPUT_T;


/// ReadData: Task state structure
typedef struct {
    uint16_t i2cStatus; ///< I2C master status
} SCIF_SCS_READ_DATA_STATE_T;


/// Sensor Controller task data (configuration, input buffer(s), output buffer(s) and internal state)
typedef struct {
    struct {
        SCIF_SCS_READ_DATA_CFG_T cfg;
        SCIF_SCS_READ_DATA_OUTPUT_T output;
        SCIF_SCS_READ_DATA_STATE_T state;
    } readData;
} SCIF_SCS_TASK_DATA_T;

/// Sensor Controller task generic control (located in AUX RAM)
#define scifScsTaskData    (*((volatile SCIF_SCS_TASK_DATA_T*) 0x400E00EA))


// Initialized internal driver data, to be used in the call to \ref scifInit()
extern const SCIF_DATA_T scifScsDriverSetup;


// Restore previous struct packing setting
#pragma pack(pop)


// AUX I/O re-initialization functions
void scifScsReinitTaskIo(uint32_t bvTaskIds);


// No task-specific API available


#endif
//@}


// Generated by TBRIGGS10 at 2018-05-27 14:30:31.412

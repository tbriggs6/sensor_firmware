<?xml version="1.0"?>
<project name="ADCSensors" version="2.1.0.440">
    <desc><![CDATA[]]></desc>
    <pattr name="Apply default power mode">0</pattr>
    <pattr name="Board">CC1310 LaunchPad</pattr>
    <pattr name="Chip name">CC1310</pattr>
    <pattr name="Chip package">QFN48 7x7 RGZ</pattr>
    <pattr name="Chip revision">-</pattr>
    <pattr name="Clock in active mode">0</pattr>
    <pattr name="Code prefix">scs</pattr>
    <pattr name="Default power mode">0</pattr>
    <pattr name="Operating system">None</pattr>
    <pattr name="Output directory">Z:/Research/SensorControllerCode/AnalogPlus</pattr>
    <pattr name="RTC tick interval (16.16 format)">2000</pattr>
    <pattr name="Run-time logging UART RX pin"></pattr>
    <pattr name="Run-time logging UART TX pin"></pattr>
    <task name="ReadData">
        <desc><![CDATA[]]></desc>
        <tattr name="ADDRESS" desc="The I2C address of the color sensor" type="hex" content="const" scope="task" min="0000" max="ffff">0029</tattr>
        <tattr name="ARRAY_LEN" desc="Length of pressure sensor array" type="dec" content="const" scope="task" min="0" max="65535">3</tattr>
        <tattr name="ATIME_24MS" desc="The value to set the timing register to 24ms" type="hex" content="const" scope="task" min="0000" max="ffff">00f6</tattr>
        <tattr name="AUTO_INCRO" desc="Auto-incroment  through the registerrs" type="expr_hex" content="const" scope="task" min="0" max="65535">0x01 &lt;&lt; 5</tattr>
        <tattr name="BIG_DELAY" type="dec" content="const" scope="task" min="0" max="65535">300</tattr>
        <tattr name="CMD" desc="The value necessary to talk to the command register" type="hex" content="const" scope="task" min="0000" max="ffff">0080</tattr>
        <tattr name="COLORS" desc="The first address for reading the sensor" type="hex" content="const" scope="task" min="0000" max="ffff">0014</tattr>
        <tattr name="CTRL_REG" desc="The register controlling the internal gain" type="hex" content="const" scope="task" min="0000" max="ffff">000f</tattr>
        <tattr name="ENABLE_AEN" desc="Enable the RGBC" type="hex" content="const" scope="task" min="0000" max="ffff">0002</tattr>
        <tattr name="ENABLE_PON" desc="Enable the device to power on" type="hex" content="const" scope="task" min="0000" max="ffff">0001</tattr>
        <tattr name="ENABLE_REG" desc="The enable register for the sensor" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="GAIN16X" type="hex" content="const" scope="task" min="0000" max="ffff">0002</tattr>
        <tattr name="GAIN4X" desc="Giving the color sensor a gain of 4" type="hex" content="const" scope="task" min="0000" max="ffff">0001</tattr>
        <tattr name="ID_REG" desc="The value necessary to talk to the ID register" type="hex" content="const" scope="task" min="0000" max="ffff">0012</tattr>
        <tattr name="INTG_DELAY" desc="The number of 1ms delays needed for ADC integration" type="dec" content="const" scope="task" min="0" max="65535">24</tattr>
        <tattr name="MAGIC_TIMING" type="dec" content="const" scope="task" min="0" max="65535">246</tattr>
        <tattr name="MS5637_ADDR" desc="Address" type="hex" content="const" scope="task" min="0000" max="ffff">0076</tattr>
        <tattr name="MS5637_CMD_D1_256" desc="Read pressure" type="hex" content="const" scope="task" min="0000" max="ffff">0040</tattr>
        <tattr name="MS5637_CMD_D2_256" desc="Read temperature" type="hex" content="const" scope="task" min="0000" max="ffff">0050</tattr>
        <tattr name="MS5637_CMD_RESET" desc="reset command" type="hex" content="const" scope="task" min="0000" max="ffff">001e</tattr>
        <tattr name="POW_DELAY" desc="The number of 1ms Delays needed for Power on" type="dec" content="const" scope="task" min="0" max="65535">5</tattr>
        <tattr name="RPT" desc="Repeated byte protocol transaction" type="expr_hex" content="const" scope="task" min="0" max="65535">0x00 &lt;&lt; 5</tattr>
        <tattr name="TIMING_REG" desc="RGBC Timing Register" type="hex" content="const" scope="task" min="0000" max="ffff">0001</tattr>
        <tattr name="output.AmbLight" desc="The ambient light sensor value" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.BatterySensor" desc="The battery sensor" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.Conductivity" desc="The conductivity of the water" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.DevID" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.HallSensor" desc="The hall sensor value" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.I2CError" desc="We encountered an error with the color sensor" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.TemperatureSensor" desc="The water temp value" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.colorBlue" desc="The amount of blue reported by the color sensor" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.colorClear" desc="The clear color reported by the color sensor" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.colorGreen" desc="The amount of green reported by the color sensor" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.colorRed" desc="The amount of red reported by the color sensor" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.pressure" desc="pressure measurement" size="ARRAY_LEN" type="dec" content="struct_array" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.temp" desc="Temperature sensor from pressure transducer" size="ARRAY_LEN" type="dec" content="struct_array" scope="task" min="0" max="65535">0</tattr>
        <resource_ref name="ADC" enabled="1"/>
        <resource_ref name="AON Domain Functionality" enabled="0"/>
        <resource_ref name="Accumulator-Based Math" enabled="0"/>
        <resource_ref name="Analog Open-Drain Pins" enabled="0"/>
        <resource_ref name="Analog Open-Source Pins" enabled="0"/>
        <resource_ref name="Analog Pins" enabled="1">
            <io_usage name="ANA_INPUT" label="Analog Input">
                <uattr name="Pin count">5</uattr>
                <uattr name="Pin/0000">DIO23</uattr>
                <uattr name="Pin/0001">DIO24</uattr>
                <uattr name="Pin/0002">DIO25</uattr>
                <uattr name="Pin/0003">DIO26</uattr>
                <uattr name="Pin/0004">DIO27</uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="COMPA" enabled="0"/>
        <resource_ref name="COMPA Event Trigger" enabled="0"/>
        <resource_ref name="COMPB" enabled="0"/>
        <resource_ref name="COMPB Event Trigger" enabled="0"/>
        <resource_ref name="Delay Insertion" enabled="1"/>
        <resource_ref name="Differential Output Pins" enabled="0"/>
        <resource_ref name="Digital Input Pins" enabled="0"/>
        <resource_ref name="Digital Open-Drain Pins" enabled="0">
            <io_usage name="LED_POWER" label="The power rail for the sensors">
                <uattr name="Configuration on uninitialization">0</uattr>
                <uattr name="Output value on initialization">0</uattr>
                <uattr name="Pin count">0</uattr>
                <uattr name="Pin/0000">DIO6</uattr>
                <uattr name="Pin/0001">DIO6</uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Digital Open-Source Pins" enabled="0"/>
        <resource_ref name="Digital Output Pins" enabled="1">
            <io_usage name="AUX_LINES" label="Pin to enable the AUX lines">
                <uattr name="Configuration on uninitialization">0</uattr>
                <uattr name="Output value on initialization">0</uattr>
                <uattr name="Pin count">2</uattr>
                <uattr name="Pin/0000">DIO7</uattr>
                <uattr name="Pin/0001">DIO6</uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Dynamic Power Control" enabled="0"/>
        <resource_ref name="GPIO Event Trigger" enabled="0"/>
        <resource_ref name="I2C Master" enabled="1">
            <rattr name="SCL frequency">1</rattr>
            <rattr name="SCL stretch timeout">200</rattr>
            <io_usage>
                <uattr name="SCL pin/0000">DIO4</uattr>
                <uattr name="SDA pin/0000">DIO5</uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="ISRC" enabled="0"/>
        <resource_ref name="Math and Logic" enabled="1"/>
        <resource_ref name="Multi-Buffered Output Data Exchange" enabled="0">
            <rattr name="Buffer count">2</rattr>
            <rattr name="Indicate overflow at buffer check">1</rattr>
            <rattr name="Indicate overflow at buffer switch">0</rattr>
            <rattr name="Prevent overflow at buffer switch">1</rattr>
        </resource_ref>
        <resource_ref name="Peripheral Sharing" enabled="0"/>
        <resource_ref name="Pulse Counter" enabled="0"/>
        <resource_ref name="RTC Multi-Event Capture" enabled="0"/>
        <resource_ref name="RTC-Based Execution Scheduling" enabled="0"/>
        <resource_ref name="Reference DAC" enabled="0"/>
        <resource_ref name="Run-Time Logging" enabled="0"/>
        <resource_ref name="SPI Chip Select" enabled="0"/>
        <resource_ref name="SPI Data Transfer" enabled="0">
            <rattr name="Bit rate">0</rattr>
            <rattr name="MISO configuration when inactive">-1</rattr>
            <rattr name="MOSI configuration on initialization">0</rattr>
            <rattr name="MOSI configuration on uninitialization">0</rattr>
            <rattr name="SCLK configuration on initialization">0</rattr>
            <rattr name="SCLK configuration on uninitialization">0</rattr>
            <io_usage>
                <uattr name="MISO pin/0000"></uattr>
                <uattr name="MOSI pin/0000"></uattr>
                <uattr name="SCLK pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Signal Observation" enabled="0"/>
        <resource_ref name="System CPU Alert" enabled="1"/>
        <resource_ref name="System Event Trigger" enabled="0"/>
        <resource_ref name="TDC" enabled="0"/>
        <resource_ref name="Timer 0" enabled="0"/>
        <resource_ref name="Timer 0 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 1" enabled="0"/>
        <resource_ref name="Timer 1 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 2" enabled="0"/>
        <resource_ref name="Timer 2 Event Trigger" enabled="0"/>
        <resource_ref name="UART Emulator" enabled="0">
            <rattr name="RX buffer size">64</rattr>
            <rattr name="Required idle period before enabling RX">11</rattr>
            <rattr name="TX buffer size">64</rattr>
            <io_usage>
                <uattr name="RX pin/0000"></uattr>
                <uattr name="TX pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <sccode name="event0" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event1" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event2" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event3" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="execute" init_power_mode="0"><![CDATA[//Check with briggs if we should have outputs for error checking
// Analog sensing logic - read the analog channel and save in output buffer
output.I2CError = 0;

//Set the AUX power enable pin to high
gpioClearOutput(cfg.pAuxioOAuxLines [0]);

//Turn on the output LED power rail
gpioSetOutput(cfg.pAuxioOAuxLines[1]);


// delay 2ms
fwDelayUs(6500, FW_DELAY_RANGE_50_MS);

U16 cmd_type = 0;

// Read the device part number -- should be 0x44 or 68
cmd_type = (CMD | RPT);
i2cStart();
i2cTx( (ADDRESS << 1) | (I2C_OP_WRITE) );
i2cTx( cmd_type | ID_REG );
i2cRepeatedStart();
i2cTx( (ADDRESS << 1) | I2C_OP_READ );
i2cRxNack( output.DevID );
i2cStop();

if(state.i2cStatus != 0x00){
    output.I2CError = (output.I2CError | (1 << 0) );
}

//
cmd_type = (CMD | RPT);
i2cStart();
i2cTx( (ADDRESS << 1) | I2C_OP_WRITE );
i2cTx( cmd_type | TIMING_REG );
i2cTx( MAGIC_TIMING );
i2cStop();

if(state.i2cStatus != 0x00){
    output.I2CError = (output.I2CError | (1 << 1) );
}


// Set gain of the color sensors to 4X
cmd_type = (CMD | RPT);
i2cStart();
i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
i2cTx( cmd_type | CTRL_REG );
i2cTx( GAIN16X );
i2cStop();

if(state.i2cStatus != 0x00){
    output.I2CError = (output.I2CError | (1 << 2) );
}

// Set the enable reg or the power on register to on.
cmd_type = (CMD | RPT);
i2cStart();
i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
i2cTx( cmd_type | ENABLE_REG );
i2cTx( ENABLE_PON );
i2cStop();

if(state.i2cStatus != 0x00){
    output.I2CError = (output.I2CError | (1 << 3) );
}


// delay 3ms
for (U16 n = 0; n < POW_DELAY; n++) {
    //confirm what the delays should be here
    fwDelayUs(1000, FW_DELAY_RANGE_100_MS);
}

cmd_type = (CMD | RPT);
i2cStart();
i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
i2cTx( cmd_type | ENABLE_REG );
i2cTx( ENABLE_PON | ENABLE_AEN );
i2cStop();

if(state.i2cStatus != 0x00){
    output.I2CError = (output.I2CError | (1 << 4) );
}

// delay 24ms
for (U16 n = 0; n < INTG_DELAY; n++) {
    //confirm what the delays should be here
    fwDelayUs(1000, FW_DELAY_RANGE_100_MS);
}

U16 low = 0;
U16 high = 0;

//cmd_type = (CMD | AUTO_INCRO);
cmd_type = CMD;
i2cStart();
i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
i2cTx( cmd_type | COLORS );
i2cRepeatedStart();
i2cTx( (ADDRESS << 1) | I2C_OP_READ );

//Reading the Clear value
i2cRxAck(low);
i2cRxAck(high);
output.colorClear = (high << 8) | low;

//Reading the Red value
i2cRxAck(low);
i2cRxAck(high);
output.colorRed = (high << 8) | low;

//Reading the Green value
i2cRxAck(low);
i2cRxAck(high);
output.colorGreen = (high << 8) | low;

//Reading the Blue value
i2cRxAck(low);
i2cRxNack(high);
output.colorBlue = (high << 8) | low;

i2cStop();




// power down analog LED power rail
//TODO: Confirm if it should be configured in Open-Drain
gpioClearOutput(cfg.pAuxioOAuxLines[1]);


///////////////////////////////////////////////////////////////////////////////
i2cStart();
i2cTx((MS5637_ADDR << 1) | I2C_OP_WRITE);
i2cTx(MS5637_CMD_RESET);
i2cStop();

fwDelayUs(5000, FW_DELAY_RANGE_100_MS);

/// Read internal pressure & temperature sensor
i2cStart();
i2cTx((MS5637_ADDR << 1) | I2C_OP_WRITE);
i2cTx(MS5637_CMD_D1_256);
i2cStop();


fwDelayUs(5000, FW_DELAY_RANGE_100_MS);

i2cStart();
i2cTx((MS5637_ADDR << 1) | I2C_OP_WRITE);
i2cTx(0);
i2cStop();

i2cStart();
i2cTx((MS5637_ADDR << 1) | I2C_OP_READ);
i2cRxAck(output.pressure[2]);
i2cRxAck(output.pressure[1]);
i2cRxNack(output.pressure[0]);
i2cStop();


i2cStart();
i2cTx((MS5637_ADDR << 1) | I2C_OP_WRITE);
i2cTx(MS5637_CMD_D2_256);
i2cStop();

fwDelayUs(5000, FW_DELAY_RANGE_100_MS);

i2cStart();
i2cTx((MS5637_ADDR << 1) | I2C_OP_WRITE);
i2cTx(0);
i2cStop();

i2cStart();
i2cTx((MS5637_ADDR << 1) | I2C_OP_READ);
i2cRxAck(output.temp[0]);
i2cRxAck(output.temp[1]);
i2cRxNack(output.temp[2]);
i2cStop();


/////////////////////////////////////////////////////////////////////////////////




//confirm what the delays should be here
fwDelayUs(1000, FW_DELAY_RANGE_5_MS);

// Enable the ADC
adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_2P7_US, ADC_TRIGGER_MANUAL);

U16 dummy;
// read & store the remaining adc values
adcGenManualTrigger();
adcReadFifo(dummy);

U16 total;
U16 value;

//Read ADC Sensor Conductivity
total = 0;
adcSelectGpioInput(cfg.pAuxioAAnaInput[0]);
adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;
output.Conductivity = (total >> 2);

//Read ADC Sensor Temp
total = 0;
adcSelectGpioInput(cfg.pAuxioAAnaInput[1]);
adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

output.TemperatureSensor = (total >> 2);

//Read ADC Sensor Battery
total = 0;
adcSelectGpioInput(cfg.pAuxioAAnaInput[3]);
adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

output.BatterySensor = (total >> 2);

//Read ADC Sensor Hall
total = 0;
adcSelectGpioInput(cfg.pAuxioAAnaInput[4]);
adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

adcGenManualTrigger();
adcReadFifo(value);
total = total + value;

output.HallSensor = (total >> 2);

//End Reading ADC Sensors


// disable ADC
adcDisable( );

//Clear the AUX power enable pin (low)
gpioSetOutput(cfg.pAuxioOAuxLines[0]);

// Generate interrupt
fwGenAlertInterrupt();]]></sccode>
        <sccode name="initialize" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="terminate" init_power_mode="0"><![CDATA[]]></sccode>
        <event_trigger active_count="1">0,1,2,3</event_trigger>
        <tt_iter>run_execute,if_noalertgen_start,wait_1s,if_noalertgen_end</tt_iter>
        <tt_struct>output.HallSensor,output.pressure.[0],output.pressure.[1],output.pressure.[2],output.temp.[0],output.temp.[1],output.temp.[2]</tt_struct>
        <rtl_struct></rtl_struct>
        <rtl_task_sel en="1" struct_log_list="output"/>
    </task>
</project>

               .deffile adi_defs.asm
               .deffile ddi_defs.asm
               .deffile reg_defs.asm
               .deffile sce_defs.asm
               
               ; Number of supported tasks
               .define TASK_COUNT      1
               
               ; Resource-specified definitions, if any
               .define AUXIO_I2C_SCL           11
               .define AUXIO_I2C_SDA           10
               .define I2C_BASE_DELAY          55
               .define I2C_EXT_DELAY           4
               .define I2C_STRETCH_TIMEOUT_US  14
               .define I2C_WAIT_STRETCH_DELAY  5
               .alias  i2cTaskName             readData
               
               
               .segment begin "Framework"
               
               
               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector
               
               
               
               
               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]
               
                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck
               
               FwEmptyFunc:            ; Done
000b ---- adb7                         rts
               
               
               
               
               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]
               
                                           ; Handle initialize request, if any
000f ---- 6871                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq
               
                                           ; Handle execute request, if any
0012 ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq
               
                                           ; Handle terminate request, if any
0015 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq
               
                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1
               
001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop
               
                                       ; Update which tasks are ...
001c ---- 786f                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6871                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6873                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c6f                         st          R7, [#fwCtrlExt/bvActiveTasks]
               
                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]
               
                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;
               
               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]
               
                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0
               
               
               
               
               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 186f                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip
               
                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]
               
                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip
               
                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1
               
0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop
               
                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]
               
                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc
               
                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]
               
                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed
               
               
               
               
               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]
               
                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skip
               
                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c70                             st          R7, [#fwCtrlExt/bvTaskIoAlert]
               
                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skip:
                                       ; Fall through to PowerDown ...
               
               
               
               
               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown
               
                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep
               
               
               
               
0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts
               
0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts
               
               
               
               
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0
               pFwTaskInitializeFuncTable:
0068 ---- 0086                         dw          #readData/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 0087                         dw          #readData/execute
               pFwTaskTerminateFuncTable:
006a ---- 0214                         dw          #readData/terminate
               
               
               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
               
               ; External control data, shared with the driver
               fwCtrlExt:
006f ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0070 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0071 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0072 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0073 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop
               
               
               .segment end "Framework"
               
               
               fwTaskDataStructures:
               .segment begin "Task: ReadData"
               readData/cfg:
               readData/cfg/pAuxioAAnaInput:
0074 ---- 0007                         dw          #7
0075 ---- 0006                         dw          #6
0076 ---- 0005                         dw          #5
0077 ---- 0004                         dw          #4
0078 ---- 0003                         dw          #3
               readData/cfg/pAuxioOLedDriver:
0079 ---- 0009                         dw          #9
               readData/cfg/pAuxioXdAnaPower:
007a ---- 0008                         dw          #8
               readData/input:
               readData/output:
               readData/output/AmbLight:
007b ---- 0000                         dw          #0
               readData/output/BatterySensor:
007c ---- 0000                         dw          #0
               readData/output/Conductivity:
007d ---- 0000                         dw          #0
               readData/output/HallSensor:
007e ---- 0000                         dw          #0
               readData/output/I2CError:
007f ---- 0000                         dw          #0
               readData/output/TemperatureSensor:
0080 ---- 0000                         dw          #0
               readData/output/colorBlue:
0081 ---- 0000                         dw          #0
               readData/output/colorClear:
0082 ---- 0000                         dw          #0
               readData/output/colorGreen:
0083 ---- 0000                         dw          #0
               readData/output/colorRed:
0084 ---- 0000                         dw          #0
               readData/state:
               readData/state/i2cStatus:
0085 ---- 0000                         dw          #0
               .segment end "Task: ReadData"
               
               
               .segment begin "Task: ReadData"
               readData/initialize:
               readData/initializeDone:
0086 ---- adb7                         rts         
               
               
               
               
               readData/execute:
               ;? //Check with briggs if we should have outputs for error checking
               ;? // Analog sensing logic - read the analog channel and save in output buffer
               ;? output.I2CError = 0;
0087 ---- 0000                         ld          R0, #0
0088 ---- 0c7f                         st          R0, [#readData/output/I2CError]
               ;? 
               ;? // delay between 1 to 5 ms
               ;? fwDelayUs(1000, FW_DELAY_RANGE_5_MS);
0089 ---- 702f                         ld          R7, #(((1000 * 24 ) + ((1 << 9) - 1)) >> 9)
008a ---- 6009                         ld          R6, #9
008b ---- 1615                         jsr         FwDelay
               ;? 
               ;? //In order to prevent future errors with the I2C communication we need to read the water color ID register
               ;? U16 dummy = 0;
               ;? //Check which sensor is connected
               ;? i2cStart();
008c ---- 6000                         ld          R6, #0x0000
008d ---- 1621                         jsr         I2cStart
008e ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
008f ---- 7052                         ld          R7, #82
0090 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0091 ---- 1638                         jsr         I2cTxByte
0092 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (COMMAND_BYTE | ID_REG) );
0093 ---- 7092                         ld          R7, #146
0094 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0095 ---- 1638                         jsr         I2cTxByte
0096 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cRepeatedStart();
0097 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0098 ---- 161b                         jsr         I2cRepeatedStart
0099 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_READ);
009a ---- 7053                         ld          R7, #83
009b ---- 6885                         ld          R6, [#readData/state/i2cStatus]
009c ---- 1638                         jsr         I2cTxByte
009d ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cRxAck(dummy);
009e ---- 7000                         ld          R7, #0x0000
009f ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00a0 ---- 1656                         jsr         I2cRxByte
00a1 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
00a2 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00a3 ---- 1675                         jsr         I2cStop
00a4 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? if(state.i2cStatus != 0x00){
00a5 ---- 0885                         ld          R0, [#readData/state/i2cStatus]
00a6 ---- 8a00                         cmp         R0, #0
00a7 ---- b605                         beq         /id0166
               ;?     if(output.I2CError == 0){
00a8 ---- 087f                             ld          R0, [#readData/output/I2CError]
00a9 ---- 8a00                             cmp         R0, #0
00aa ---- be02                             bneq        /id0168
               ;?         output.I2CError = 1;
00ab ---- 0001                                 ld          R0, #1
00ac ---- 0c7f                                 st          R0, [#readData/output/I2CError]
               ;?     }
               /id0168:
               ;? }
               /id0166:
               ;? 
               ;? //Set the RGB Integration time
               ;? i2cStart();
00ad ---- 6000                         ld          R6, #0x0000
00ae ---- 1621                         jsr         I2cStart
00af ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
00b0 ---- 7052                         ld          R7, #82
00b1 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00b2 ---- 1638                         jsr         I2cTxByte
00b3 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (COMMAND_BYTE | A_TIME_REG) );
00b4 ---- 7081                         ld          R7, #129
00b5 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00b6 ---- 1638                         jsr         I2cTxByte
00b7 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (INTG_24) );
00b8 ---- 70ff                         ld          R7, #255
00b9 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00ba ---- 1638                         jsr         I2cTxByte
00bb ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
00bc ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00bd ---- 1675                         jsr         I2cStop
00be ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? if(state.i2cStatus != 0x00){
00bf ---- 0885                         ld          R0, [#readData/state/i2cStatus]
00c0 ---- 8a00                         cmp         R0, #0
00c1 ---- b605                         beq         /id0187
               ;?     if(output.I2CError == 0){
00c2 ---- 087f                             ld          R0, [#readData/output/I2CError]
00c3 ---- 8a00                             cmp         R0, #0
00c4 ---- be02                             bneq        /id0189
               ;?         output.I2CError = 2;
00c5 ---- 0002                                 ld          R0, #2
00c6 ---- 0c7f                                 st          R0, [#readData/output/I2CError]
               ;?     }
               /id0189:
               ;? }
               /id0187:
               ;? 
               ;? //Set the RGB Integration time
               ;? i2cStart();
00c7 ---- 6000                         ld          R6, #0x0000
00c8 ---- 1621                         jsr         I2cStart
00c9 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
00ca ---- 7052                         ld          R7, #82
00cb ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00cc ---- 1638                         jsr         I2cTxByte
00cd ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (COMMAND_BYTE | CTRL_REG) );
00ce ---- 708f                         ld          R7, #143
00cf ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00d0 ---- 1638                         jsr         I2cTxByte
00d1 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (GAIN_4X) );
00d2 ---- 7001                         ld          R7, #1
00d3 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00d4 ---- 1638                         jsr         I2cTxByte
00d5 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
00d6 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00d7 ---- 1675                         jsr         I2cStop
00d8 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? if(state.i2cStatus != 0x00){
00d9 ---- 0885                         ld          R0, [#readData/state/i2cStatus]
00da ---- 8a00                         cmp         R0, #0
00db ---- b605                         beq         /id0208
               ;?     if(output.I2CError == 0){
00dc ---- 087f                             ld          R0, [#readData/output/I2CError]
00dd ---- 8a00                             cmp         R0, #0
00de ---- be02                             bneq        /id0210
               ;?         output.I2CError = 3;
00df ---- 0003                                 ld          R0, #3
00e0 ---- 0c7f                                 st          R0, [#readData/output/I2CError]
               ;?     }
               /id0210:
               ;? }
               /id0208:
               ;? 
               ;? //Enable the Power on
               ;? i2cStart();
00e1 ---- 6000                         ld          R6, #0x0000
00e2 ---- 1621                         jsr         I2cStart
00e3 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
00e4 ---- 7052                         ld          R7, #82
00e5 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00e6 ---- 1638                         jsr         I2cTxByte
00e7 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (COMMAND_BYTE | ENABLE_REG) );
00e8 ---- 7080                         ld          R7, #128
00e9 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00ea ---- 1638                         jsr         I2cTxByte
00eb ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx(ENABLE_PON);
00ec ---- 7001                         ld          R7, #1
00ed ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00ee ---- 1638                         jsr         I2cTxByte
00ef ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
00f0 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
00f1 ---- 1675                         jsr         I2cStop
00f2 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? if(state.i2cStatus != 0x00){
00f3 ---- 0885                         ld          R0, [#readData/state/i2cStatus]
00f4 ---- 8a00                         cmp         R0, #0
00f5 ---- b605                         beq         /id0229
               ;?     if(output.I2CError == 0){
00f6 ---- 087f                             ld          R0, [#readData/output/I2CError]
00f7 ---- 8a00                             cmp         R0, #0
00f8 ---- be02                             bneq        /id0231
               ;?         output.I2CError = 4;
00f9 ---- 0004                                 ld          R0, #4
00fa ---- 0c7f                                 st          R0, [#readData/output/I2CError]
               ;?     }
               /id0231:
               ;? }
               /id0229:
               ;? 
               ;? //confirm what the delays should be here
               ;? fwDelayUs(100, FW_DELAY_RANGE_500_US);
00fb ---- 7026                         ld          R7, #(((100 * 24 ) + ((1 << 6) - 1)) >> 6)
00fc ---- 6006                         ld          R6, #6
00fd ---- 1615                         jsr         FwDelay
               ;? 
               ;? //Enable the Power on / AEN
               ;? i2cStart();
00fe ---- 6000                         ld          R6, #0x0000
00ff ---- 1621                         jsr         I2cStart
0100 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
0101 ---- 7052                         ld          R7, #82
0102 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0103 ---- 1638                         jsr         I2cTxByte
0104 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (COMMAND_BYTE | ENABLE_REG) );
0105 ---- 7080                         ld          R7, #128
0106 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0107 ---- 1638                         jsr         I2cTxByte
0108 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx(ENABLE_PON | ENABLE_AEN);
0109 ---- 7003                         ld          R7, #3
010a ---- 6885                         ld          R6, [#readData/state/i2cStatus]
010b ---- 1638                         jsr         I2cTxByte
010c ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cStop();
010d ---- 6885                         ld          R6, [#readData/state/i2cStatus]
010e ---- 1675                         jsr         I2cStop
010f ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? if(state.i2cStatus != 0x00){
0110 ---- 0885                         ld          R0, [#readData/state/i2cStatus]
0111 ---- 8a00                         cmp         R0, #0
0112 ---- b605                         beq         /id0252
               ;?     if(output.I2CError == 0){
0113 ---- 087f                             ld          R0, [#readData/output/I2CError]
0114 ---- 8a00                             cmp         R0, #0
0115 ---- be02                             bneq        /id0254
               ;?         output.I2CError = 5;
0116 ---- 0005                                 ld          R0, #5
0117 ---- 0c7f                                 st          R0, [#readData/output/I2CError]
               ;?     }
               /id0254:
               ;? }
               /id0252:
               ;? 
               ;? //confirm what the delays should be here
               ;? fwDelayUs(100, FW_DELAY_RANGE_500_US);
0118 ---- 7026                         ld          R7, #(((100 * 24 ) + ((1 << 6) - 1)) >> 6)
0119 ---- 6006                         ld          R6, #6
011a ---- 1615                         jsr         FwDelay
               ;? 
               ;? // turn on the power for LED_DRIVER
               ;? gpioSetOutput(cfg.pAuxioOLedDriver[0]);
011b ---- 7879                         ld          R7, [#(readData/cfg/pAuxioOLedDriver + 0)]
011c ---- 1680                         jsr         gpioSetOutput
               ;? 
               ;? //delay for the LED to turn on
               ;? fwDelayUs(1000, FW_DELAY_RANGE_5_MS);
011d ---- 702f                         ld          R7, #(((1000 * 24 ) + ((1 << 9) - 1)) >> 9)
011e ---- 6009                         ld          R6, #9
011f ---- 1615                         jsr         FwDelay
               ;? 
               ;? //Read the color values
               ;? U16 low;
               ;? U16 high;
               ;? i2cStart();
0120 ---- 6000                         ld          R6, #0x0000
0121 ---- 1621                         jsr         I2cStart
0122 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_WRITE);
0123 ---- 7052                         ld          R7, #82
0124 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0125 ---- 1638                         jsr         I2cTxByte
0126 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (COMMAND_AUTO | COLORS) );
0127 ---- 70b4                         ld          R7, #180
0128 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0129 ---- 1638                         jsr         I2cTxByte
012a ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cRepeatedStart();
012b ---- 6885                         ld          R6, [#readData/state/i2cStatus]
012c ---- 161b                         jsr         I2cRepeatedStart
012d ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? i2cTx( (ADDRESS << 1) | I2C_OP_READ);
012e ---- 7053                         ld          R7, #83
012f ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0130 ---- 1638                         jsr         I2cTxByte
0131 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? //Reading the color sensor
               ;? //Clear
               ;? i2cRxAck(low);
0132 ---- 7000                         ld          R7, #0x0000
0133 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0134 ---- 1656                         jsr         I2cRxByte
0135 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
0136 ---- 8d47                         ld          R0, R7
               ;? i2cRxAck(high);
0137 ---- 7000                         ld          R7, #0x0000
0138 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0139 ---- 1656                         jsr         I2cRxByte
013a ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? output.colorClear = ((high << 8) | low);
013b ---- fda0                         lsl         R7, #8
013c ---- fd08                         or          R7, R0
013d ---- 7c82                         st          R7, [#readData/output/colorClear]
               ;? 
               ;? //Red
               ;? i2cRxAck(low);
013e ---- 7000                         ld          R7, #0x0000
013f ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0140 ---- 1656                         jsr         I2cRxByte
0141 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
0142 ---- 8d47                         ld          R0, R7
               ;? i2cRxAck(high);
0143 ---- 7000                         ld          R7, #0x0000
0144 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0145 ---- 1656                         jsr         I2cRxByte
0146 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? output.colorRed = ((high << 8) | low);
0147 ---- fda0                         lsl         R7, #8
0148 ---- fd08                         or          R7, R0
0149 ---- 7c84                         st          R7, [#readData/output/colorRed]
               ;? 
               ;? //Green
               ;? i2cRxAck(low);
014a ---- 7000                         ld          R7, #0x0000
014b ---- 6885                         ld          R6, [#readData/state/i2cStatus]
014c ---- 1656                         jsr         I2cRxByte
014d ---- 6c85                         st          R6, [#readData/state/i2cStatus]
014e ---- 8d47                         ld          R0, R7
               ;? i2cRxAck(high);
014f ---- 7000                         ld          R7, #0x0000
0150 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0151 ---- 1656                         jsr         I2cRxByte
0152 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? output.colorGreen = ((high << 8) | low);
0153 ---- fda0                         lsl         R7, #8
0154 ---- fd08                         or          R7, R0
0155 ---- 7c83                         st          R7, [#readData/output/colorGreen]
               ;? 
               ;? //Blue
               ;? i2cRxAck(low);
0156 ---- 7000                         ld          R7, #0x0000
0157 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0158 ---- 1656                         jsr         I2cRxByte
0159 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
015a ---- 8d47                         ld          R0, R7
               ;? i2cRxAck(high);
015b ---- 7000                         ld          R7, #0x0000
015c ---- 6885                         ld          R6, [#readData/state/i2cStatus]
015d ---- 1656                         jsr         I2cRxByte
015e ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? output.colorBlue = ((high << 8) | low);
015f ---- fda0                         lsl         R7, #8
0160 ---- fd08                         or          R7, R0
0161 ---- 7c81                         st          R7, [#readData/output/colorBlue]
               ;? 
               ;? i2cStop();
0162 ---- 6885                         ld          R6, [#readData/state/i2cStatus]
0163 ---- 1675                         jsr         I2cStop
0164 ---- 6c85                         st          R6, [#readData/state/i2cStatus]
               ;? 
               ;? // TURN OFF THE LED
               ;? gpioClearOutput(cfg.pAuxioOLedDriver[0]);
0165 ---- 7879                         ld          R7, [#(readData/cfg/pAuxioOLedDriver + 0)]
0166 ---- 1688                         jsr         gpioClearOutput
               ;? 
               ;? // Delay for LED to turn off
               ;? fwDelayUs(1000, FW_DELAY_RANGE_5_MS);
0167 ---- 702f                         ld          R7, #(((1000 * 24 ) + ((1 << 9) - 1)) >> 9)
0168 ---- 6009                         ld          R6, #9
0169 ---- 1615                         jsr         FwDelay
               ;? 
               ;? // Enable the ADC
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_2P7_US,ADC_TRIGGER_MANUAL);
016a ---- 705d                         ld          R7, #(((32 - 1) * 24) >> 3)
016b ---- 6003                         ld          R6, #3
016c ---- 1615                         jsr         FwDelay
016d ---- 7041                         ld          R7, #((0 | (((3 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
016e ---- 1462                         jsr         AdiDdiAcquire
016f ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
0170 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
0172 ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0321:
0173 ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
0174 ---- a6fe                         biob0       /id0321
0175 ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
0176 ---- 7018                         ld          R7, #(3 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
0177 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0178 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
0179 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
017a ---- fd47                         nop         
017b ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
017c ---- 1465                         jsr         AdiDdiRelease
               ;? 
               ;? // read & store the remaining adc values
               ;? adcGenManualTrigger();
017d ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? 
               ;? U16 total;
               ;? U16 value;
               ;? 
               ;? //Read ADC Sensor Conductivity
               ;? total = 0;
017e ---- 0000                         ld          R0, #0
               ;? adcSelectGpioInput(cfg.pAuxioAAnaInput[0]);
017f ---- 7874                         ld          R7, [#(readData/cfg/pAuxioAAnaInput + 0)]
0180 ---- 1690                         jsr         AdccompbSelectGpioInput
               ;? adcGenManualTrigger();
0181 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0182 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0183 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0184 ---- fdb1                         wev1        #WEVSEL_PROG
0185 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0186 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
0187 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0188 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0189 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
018a ---- fdb1                         wev1        #WEVSEL_PROG
018b ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
018c ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
018d ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
018e ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
018f ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0190 ---- fdb1                         wev1        #WEVSEL_PROG
0191 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0192 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
0193 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0194 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0195 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0196 ---- fdb1                         wev1        #WEVSEL_PROG
0197 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0198 ---- 8d26                         add         R0, R6
               ;? output.Conductivity = (total >> 2);
0199 ---- 8daa                         lsr         R0, #2
019a ---- 0c7d                         st          R0, [#readData/output/Conductivity]
               ;? 
               ;? //Read ADC Sensor Temp
               ;? total = 0;
019b ---- 0000                         ld          R0, #0
               ;? adcSelectGpioInput(cfg.pAuxioAAnaInput[1]);
019c ---- 7875                         ld          R7, [#(readData/cfg/pAuxioAAnaInput + 1)]
019d ---- 1690                         jsr         AdccompbSelectGpioInput
               ;? adcGenManualTrigger();
019e ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
019f ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01a0 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01a1 ---- fdb1                         wev1        #WEVSEL_PROG
01a2 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01a3 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
01a4 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01a5 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01a6 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01a7 ---- fdb1                         wev1        #WEVSEL_PROG
01a8 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01a9 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
01aa ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01ab ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01ac ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01ad ---- fdb1                         wev1        #WEVSEL_PROG
01ae ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01af ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
01b0 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01b1 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01b2 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01b3 ---- fdb1                         wev1        #WEVSEL_PROG
01b4 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01b5 ---- 8d26                         add         R0, R6
               ;? output.TemperatureSensor = (total >> 2);
01b6 ---- 8daa                         lsr         R0, #2
01b7 ---- 0c80                         st          R0, [#readData/output/TemperatureSensor]
               ;? 
               ;? //Read ADC Sensor AmbLight
               ;? total = 0;
01b8 ---- 0000                         ld          R0, #0
               ;? adcSelectGpioInput(cfg.pAuxioAAnaInput[2]);
01b9 ---- 7876                         ld          R7, [#(readData/cfg/pAuxioAAnaInput + 2)]
01ba ---- 1690                         jsr         AdccompbSelectGpioInput
               ;? adcGenManualTrigger();
01bb ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01bc ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01bd ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01be ---- fdb1                         wev1        #WEVSEL_PROG
01bf ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01c0 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
01c1 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01c2 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01c3 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01c4 ---- fdb1                         wev1        #WEVSEL_PROG
01c5 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01c6 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
01c7 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01c8 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01c9 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01ca ---- fdb1                         wev1        #WEVSEL_PROG
01cb ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01cc ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
01cd ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01ce ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01cf ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01d0 ---- fdb1                         wev1        #WEVSEL_PROG
01d1 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01d2 ---- 8d26                         add         R0, R6
               ;? output.AmbLight = (total >> 2);
01d3 ---- 8daa                         lsr         R0, #2
01d4 ---- 0c7b                         st          R0, [#readData/output/AmbLight]
               ;? 
               ;? //Read ADC Sensor Battery
               ;? total = 0;
01d5 ---- 0000                         ld          R0, #0
               ;? adcSelectGpioInput(cfg.pAuxioAAnaInput[3]);
01d6 ---- 7877                         ld          R7, [#(readData/cfg/pAuxioAAnaInput + 3)]
01d7 ---- 1690                         jsr         AdccompbSelectGpioInput
               ;? adcGenManualTrigger();
01d8 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01d9 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01da ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01db ---- fdb1                         wev1        #WEVSEL_PROG
01dc ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01dd ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
01de ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01df ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01e0 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01e1 ---- fdb1                         wev1        #WEVSEL_PROG
01e2 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01e3 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
01e4 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01e5 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01e6 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01e7 ---- fdb1                         wev1        #WEVSEL_PROG
01e8 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01e9 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
01ea ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01eb ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01ec ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01ed ---- fdb1                         wev1        #WEVSEL_PROG
01ee ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01ef ---- 8d26                         add         R0, R6
               ;? output.BatterySensor = (total >> 2);
01f0 ---- 8daa                         lsr         R0, #2
01f1 ---- 0c7c                         st          R0, [#readData/output/BatterySensor]
               ;? 
               ;? //Read ADC Sensor Hall
               ;? total = 0;
01f2 ---- 0000                         ld          R0, #0
               ;? adcSelectGpioInput(cfg.pAuxioAAnaInput[4]);
01f3 ---- 7878                         ld          R7, [#(readData/cfg/pAuxioAAnaInput + 4)]
01f4 ---- 1690                         jsr         AdccompbSelectGpioInput
               ;? adcGenManualTrigger();
01f5 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01f6 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01f7 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01f8 ---- fdb1                         wev1        #WEVSEL_PROG
01f9 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
01fa ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
01fb ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
01fc ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01fd ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
01fe ---- fdb1                         wev1        #WEVSEL_PROG
01ff ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0200 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
0201 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0202 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0203 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
0204 ---- fdb1                         wev1        #WEVSEL_PROG
0205 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
0206 ---- 8d26                         add         R0, R6
               ;? 
               ;? adcGenManualTrigger();
0207 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(value);
0208 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0209 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
020a ---- fdb1                         wev1        #WEVSEL_PROG
020b ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
               ;? total = total + value;
020c ---- 8d26                         add         R0, R6
               ;? output.HallSensor = (total >> 2);
020d ---- 8daa                         lsr         R0, #2
020e ---- 0c7e                         st          R0, [#readData/output/HallSensor]
               ;? 
               ;? //End Reading ADC Sensors
               ;? 
               ;? // disable ADC
               ;? adcDisable( );
020f ---- 169d                         jsr         AdcDisable
               ;? 
               ;? fwGenAlertInterrupt();
0210 ---- 086c                         ld          R0, [#fwCtrlInt/bvTaskIoAlert]
0211 ---- 8201                         or          R0, #(1 << 0)
0212 ---- 0c6c                         st          R0, [#fwCtrlInt/bvTaskIoAlert]
               readData/executeDone:
0213 ---- adb7                         rts         
               
               
               
               
               readData/terminate:
               readData/terminateDone:
0214 ---- adb7                         rts         
               .segment end "Task: ReadData"
               
               
               .segment begin "Procedure Libary"
               ; 3 + 5 CPU cycles = 16 clock cycles = 0.66 microsecond are added to the specified delay (parameter
               ; loading and timer configuration)
               ;
               ; PARAMETERS:
               ;     R7 = Delay
               ;     R6 = Prescaler exponent
               ;
               ; CLOBBERS:
               ;     R6
               FwDelay:
                                       ; Set the delay
0215 ---- fb0c                         out         R7, [#IOP_TIMER_T0TARGET]
               
                                       ; Configure the timer (from clock, single-mode, prescaler exponent = R6)
0216 ---- eda4                         lsl         R6, #4
0217 ---- eb09                         out         R6, [#IOP_TIMER_T0CFG]
               
                                       ; Start the timer, wait for it to trigger, and stop it
0218 ---- 640b                         iobset      #0, [#IOP_TIMER_T0CTL]
0219 ---- cdb1                         wev1        #WEVSEL_TIMER0
021a ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R5
               I2cRepeatedStart:
                                       ; Wait T_LOW (SDA is already pull-up)
021b ---- 53c6                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
021c ---- 1626                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
021d ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
021e ---- 1629                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_SU_STA
021f ---- 53c6                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0220 ---- 1626                         jsr         I2cWaitDelay
               I2cStart:
                                       ; SDA = driven low
0221 ---- 460f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_HD_STA
0222 ---- 53ca                         ld          R5, #-((I2C_BASE_DELAY) - (1))
0223 ---- 1626                         jsr         I2cWaitDelay
               
                                       ; SCL = driven low
0224 ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Done
0225 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS
               ;     R5 = Delay excluding the I2cWaitDelay() call, in instruction cycles
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitDelay:
                                       ; Wait for the specified number of cycles
0226 ---- d802 /waitLoop:                  add         R5, #2
0227 ---- defe                         bneg        /waitLoop
               
                                       ; Done
0228 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitSclStretch:
                                       ; Load the timeout (up to 20 ms) loop counter = configured number of us
0229 ---- 53f2                         ld          R5, #(-I2C_STRETCH_TIMEOUT_US)
               /waitLoop:
                                           ; If SCL is high, we're done
022a ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
022b ---- ae0b                             biob1       /done
                                           ; Unroll the loop to 12 instructions = 1 per loop for faster response
022c ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
022d ---- ae09                             biob1       /done
022e ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
022f ---- ae07                             biob1       /done
0230 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0231 ---- ae05                             biob1       /done
0232 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0233 ---- ae03                             biob1       /done
               
0234 ---- d801                         add         R5, #1;
0235 ---- bef4                         bnz         /waitLoop
               
               /timeout:               ; Timeout has occurred, so OR it into the flags and bail out
0236 ---- e202                         or          R6, #0x0002
               
               /done:                  ; Done
0237 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = TX byte shift register
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = Updated TX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cTxByte:
                                       ; Bail out if an error has occurred
0238 ---- ea00                         cmp         R6, #0
0239 ---- be1b                         bnz         /done
               
               
                                       ; Transmit each bit in the data byte ...
023a ---- b50e                         loop        #8, /byteLoopEnd
               
                                           ; Output the bit to SDA
023b ---- fda1                             lsl         R7, #1
023c 8601 fc00                             tst         R7, #0x0100
023e ---- b602                             bz          /dataSdaLow
023f ---- 660f /dataSdaHigh:                   iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0240 ---- 8e02                             bra         /dataSdaDone
0241 ---- 460f /dataSdaLow:                    iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0242 ---- fd47                             nop
               /dataSdaDone:
                                           ; Wait T_LOW
0243 ---- 53cc                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (7))
0244 ---- 1626                             jsr         I2cWaitDelay
               
                                           ; SCL = pull-up
0245 ---- 670f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                           ; Wait for SCL stretching to end or time out
0246 ---- 1629                             jsr         I2cWaitSclStretch
               
                                           ; Wait T_HIGH
0247 ---- 53cf                             ld          R5, #-(I2C_BASE_DELAY - (I2C_WAIT_STRETCH_DELAY + 1))
0248 ---- 1626                             jsr         I2cWaitDelay
               
                                           ; SCL = driven low
0249 ---- 470f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:
               
                                       ; Receive the ACK bit
                                       ; SDA = pull-up
024a ---- 660f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_LOW
024b ---- 53c6                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
024c ---- 1626                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
024d ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
024e ---- 1629                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_HIGH
024f ---- 53cc                         ld          R5, #-((I2C_BASE_DELAY) - (3))
0250 ---- 1626                         jsr         I2cWaitDelay
               
                                       ; Read and store the SDA value in the status word
0251 ---- 2613                         iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
0252 ---- a601                         biob0       /ackSdaLow
0253 ---- e201                             or          R6, #0x01
               /ackSdaLow:
                                       ; SCL = driven low
0254 ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
               
               /done:                  ; Done
0255 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = Acknowledgment bit value, 0x0000 to transmit ACK, 0x0001 to transmit NAK
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = RX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cRxByte:
                                       ; Bail out if an error has occurred
0256 ---- ea00                         cmp         R6, #0
0257 ---- be1c                         bnz         /done
               
               
                                       ; Receive each bit in the data byte ...
0258 ---- b50b                         loop        #8, /byteLoopEnd
               
                                           ; SDA = pull-up
0259 ---- 660f                             iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                           ; Wait T_LOW
025a ---- 53c7                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
025b ---- 1626                             jsr         I2cWaitDelay
               
                                           ; SCL = pull-up
025c ---- 670f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                           ; Wait for SCL stretching to end or time out
025d ---- 1629                             jsr         I2cWaitSclStretch
               
                                           ; Wait T_HIGH
025e ---- 53d1                             ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 3))
025f ---- 1626                             jsr         I2cWaitDelay
               
                                           ; Read and store SDA
0260 ---- fda1                             lsl         R7, #1
0261 ---- 2613                             iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
0262 ---- a601                             biob0       /dataSdaLow
0263 ---- f201                                 or          R7, #0x01
               /dataSdaLow:
                                           ; SCL = driven low
0264 ---- 470f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:
               
                                       ; Transmit the ACK bit, which is now in bit 8 of the shift register
                                       ; Output the bit to SDA
0265 8601 fc00                         tst         R7, #0x0100
0267 ---- b602                         bz          /ackSdaLow
0268 ---- 660f /ackSdaHigh:                iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0269 ---- 8e02                         bra         /ackSdaDone
026a ---- 460f /ackSdaLow:                 iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
026b ---- fd47                         nop
               /ackSdaDone:
                                       ; Wait T_LOW
026c ---- 53cb                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (6))
026d ---- 1626                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
026e ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
026f ---- 1629                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_HIGH
0270 ---- 53cf                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
0271 ---- 1626                         jsr         I2cWaitDelay
               
                                       ; SCL = driven low
0272 ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Mask the ACK bit in the received data
0273 ---- f0ff                         and         R7, #0xFF
               
               
               /done:                  ; Done
0274 ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R5
               I2cStop:
                                       ; SDA = driven low
0275 ---- 460f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_LOW
0276 ---- 53c6                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0277 ---- 1626                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
0278 ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
0279 ---- 1629                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_SU_STO
027a ---- 53cf                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
027b ---- 1626                         jsr         I2cWaitDelay
               
                                       ; SDA = pull-up
027c ---- 660f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_BUF
027d ---- 53c7                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
027e ---- 1626                         jsr         I2cWaitDelay
               
                                       ; Done
027f ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R5, R6, R7
               gpioSetOutput:
                                       ; Calculate the I/O register address
0280 ---- ed47                         ld          R6, R7
0281 ---- edab                         lsr         R6, #3
0282 ---- e814                         add         R6, #IOP_AIODIO0_GPIODOUTSET
               
                                       ; Create the bit-vector to be used for manipulation
0283 ---- f007                         and         R7, #0x0007
0284 ---- 5001                         ld          R5, #1
0285 ---- dd87                         lsl         R5, R7
               
                                       ; Set the GPIO
0286 ---- df26                         out         R5, [R6]
0287 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R5, R6, R7
               gpioClearOutput:
                                       ; Calculate the I/O register address
0288 ---- ed47                         ld          R6, R7
0289 ---- edab                         lsr         R6, #3
028a ---- e816                         add         R6, #IOP_AIODIO0_GPIODOUTCLR
               
                                       ; Create the bit-vector to be used for manipulation
028b ---- f007                         and         R7, #0x0007
028c ---- 5001                         ld          R5, #1
028d ---- dd87                         lsl         R5, R7
               
                                       ; Set the GPIO
028e ---- df26                         out         R5, [R6]
028f ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
0290 ---- f007                         and         R7, #0x0007
               
                                       ; Disconnect all signals
0291 ---- 1462                         jsr         AdiDdiAcquire
0292 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
0294 ---- eb51                         out         R6, [#IOP_ADICLR_MUX2_MUX3]
               
                                       ; Connect the specified GPIO
0295 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
0297 ---- ed8f                         lsr         R6, R7
0298 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
               
                                       ; Ensure that it has taken effect
0299 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
029a ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
029b ---- 1465                         jsr         AdiDdiRelease
029c ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R7
               AdcDisable:
                                       ; Disable the ADC reference
029d ---- 1462                         jsr         AdiDdiAcquire
029e ---- 7079                         ld          R7, #((ADI16_ADCREF_EN | ADI16_ADCREF_REF_ON_IDLE) | (ADI16_ADCREF_SRC | (ADI16_ADCREF_EXT | ADI16_ADCREF_IOMUX)))
029f ---- fb55                         out         R7, [#IOP_ADICLR_ADCREF]
               
                                       ; Assert reset and disable the ADC
02a0 ---- 71fb                         ld          R7, #((ADI16_ADC_EN | ADI16_ADC_RESET_N) | (BV_ADI16_ADC_SMPL_CYCLE_EXP | (BV_ADI16_ADC_SMPL_MODE | ADI16_ADC_SCALE_DIS)))
02a1 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
               
                                       ; Ensure that it has taken effect
02a2 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
02a3 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
02a4 ---- 1465                         jsr         AdiDdiRelease
               
                                       ; Disable the ADC clock (no need to wait since IOB_WUC_ADCCLKCTL_ACK goes low immediately)
02a5 ---- 4431                         iobclr      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               
                                       ; Disable the ADC data interface
02a6 ---- 4400                         iobclr      #0, [#IOP_ANAIF_ADCCTL]
               
02a7 ---- adb7                         rts
               .segment end "Procedure Libary"
               

; Generated by MCT163S08 at 2018-04-25 21:38:29.501

               .deffile adi_defs.asm
               .deffile ddi_defs.asm
               .deffile reg_defs.asm
               .deffile sce_defs.asm
               
               ; Number of supported tasks
               .define TASK_COUNT      1
               
               ; Resource-specified definitions, if any
               .define AUXIO_I2C_SCL           11
               .define AUXIO_I2C_SDA           10
               .define I2C_BASE_DELAY          9
               .define I2C_EXT_DELAY           4
               .define I2C_STRETCH_TIMEOUT_US  200
               .define I2C_WAIT_STRETCH_DELAY  5
               .alias  i2cTaskName             test
               
               
               .segment begin "Framework"
               
               
               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector
               
               
               
               
               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]
               
                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck
               
               FwEmptyFunc:            ; Done
000b ---- adb7                         rts
               
               
               
               
               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]
               
                                           ; Handle initialize request, if any
000f ---- 6871                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq
               
                                           ; Handle execute request, if any
0012 ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq
               
                                           ; Handle terminate request, if any
0015 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq
               
                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1
               
001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop
               
                                       ; Update which tasks are ...
001c ---- 786f                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6871                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6873                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c6f                         st          R7, [#fwCtrlExt/bvActiveTasks]
               
                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]
               
                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;
               
               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]
               
                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0
               
               
               
               
               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 186f                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip
               
                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]
               
                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip
               
                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1
               
0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop
               
                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]
               
                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc
               
                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]
               
                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed
               
               
               
               
               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]
               
                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skip
               
                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c70                             st          R7, [#fwCtrlExt/bvTaskIoAlert]
               
                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skip:
                                       ; Fall through to PowerDown ...
               
               
               
               
               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown
               
                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep
               
               
               
               
0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts
               
0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts
               
               
               
               
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0
               pFwTaskInitializeFuncTable:
0068 ---- 0076                         dw          #test/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 0077                         dw          #test/execute
               pFwTaskTerminateFuncTable:
006a ---- 0092                         dw          #test/terminate
               
               
               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
               
               ; External control data, shared with the driver
               fwCtrlExt:
006f ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0070 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0071 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0072 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0073 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop
               
               
               .segment end "Framework"
               
               
               fwTaskDataStructures:
               .segment begin "Task: Test"
               test/cfg:
               test/input:
               test/output:
               test/output/id:
0074 ---- 0000                         dw          #0
               test/state:
               test/state/i2cStatus:
0075 ---- 0000                         dw          #0
               .segment end "Task: Test"
               
               
               .segment begin "Task: Test"
               test/initialize:
               test/initializeDone:
0076 ---- adb7                         rts         
               
               
               
               
               test/execute:
               ;? 
               ;? 
               ;?     i2cStart();
0077 ---- 6000                         ld          R6, #0x0000
0078 ---- 1499                         jsr         I2cStart
0079 ---- 6c75                         st          R6, [#test/state/i2cStatus]
               ;?     i2cTx( (ADDRESS << 1) | (I2C_OP_WRITE) );
007a ---- 7052                         ld          R7, #82
007b ---- 6875                         ld          R6, [#test/state/i2cStatus]
007c ---- 14b0                         jsr         I2cTxByte
007d ---- 6c75                         st          R6, [#test/state/i2cStatus]
               ;?     i2cTx( 0x80 | REG_ID );
007e ---- 7092                         ld          R7, #146
007f ---- 6875                         ld          R6, [#test/state/i2cStatus]
0080 ---- 14b0                         jsr         I2cTxByte
0081 ---- 6c75                         st          R6, [#test/state/i2cStatus]
               ;? 
               ;?     i2cRepeatedStart();
0082 ---- 6875                         ld          R6, [#test/state/i2cStatus]
0083 ---- 1493                         jsr         I2cRepeatedStart
0084 ---- 6c75                         st          R6, [#test/state/i2cStatus]
               ;?     i2cTx( (ADDRESS << 1) | I2C_OP_READ );
0085 ---- 7053                         ld          R7, #83
0086 ---- 6875                         ld          R6, [#test/state/i2cStatus]
0087 ---- 14b0                         jsr         I2cTxByte
0088 ---- 6c75                         st          R6, [#test/state/i2cStatus]
               ;?     i2cRxAck( output.id );
0089 ---- 7000                         ld          R7, #0x0000
008a ---- 6875                         ld          R6, [#test/state/i2cStatus]
008b ---- 14ce                         jsr         I2cRxByte
008c ---- 6c75                         st          R6, [#test/state/i2cStatus]
008d ---- 7c74                         st          R7, [#test/output/id]
               ;?     i2cStop();
008e ---- 6875                         ld          R6, [#test/state/i2cStatus]
008f ---- 14ed                         jsr         I2cStop
0090 ---- 6c75                         st          R6, [#test/state/i2cStatus]
               test/executeDone:
0091 ---- adb7                         rts         
               
               
               
               
               test/terminate:
               test/terminateDone:
0092 ---- adb7                         rts         
               .segment end "Task: Test"
               
               
               .segment begin "Procedure Libary"
               ; CLOBBERS:
               ;     R5
               I2cRepeatedStart:
                                       ; Wait T_LOW (SDA is already pull-up)
0093 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0094 ---- 149e                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
0095 ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
0096 ---- 14a1                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_SU_STA
0097 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0098 ---- 149e                         jsr         I2cWaitDelay
               I2cStart:
                                       ; SDA = driven low
0099 ---- 460f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_HD_STA
009a ---- 53f8                         ld          R5, #-((I2C_BASE_DELAY) - (1))
009b ---- 149e                         jsr         I2cWaitDelay
               
                                       ; SCL = driven low
009c ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Done
009d ---- adb7                         rts
               
               
               
               
               ; PARAMETERS
               ;     R5 = Delay excluding the I2cWaitDelay() call, in instruction cycles
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitDelay:
                                       ; Wait for the specified number of cycles
009e ---- d802 /waitLoop:                  add         R5, #2
009f ---- defe                         bneg        /waitLoop
               
                                       ; Done
00a0 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitSclStretch:
                                       ; Load the timeout (up to 20 ms) loop counter = configured number of us
00a1 ---- 5338                         ld          R5, #(-I2C_STRETCH_TIMEOUT_US)
               /waitLoop:
                                           ; If SCL is high, we're done
00a2 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
00a3 ---- ae0b                             biob1       /done
                                           ; Unroll the loop to 12 instructions = 1 per loop for faster response
00a4 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
00a5 ---- ae09                             biob1       /done
00a6 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
00a7 ---- ae07                             biob1       /done
00a8 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
00a9 ---- ae05                             biob1       /done
00aa ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
00ab ---- ae03                             biob1       /done
               
00ac ---- d801                         add         R5, #1;
00ad ---- bef4                         bnz         /waitLoop
               
               /timeout:               ; Timeout has occurred, so OR it into the flags and bail out
00ae ---- e202                         or          R6, #0x0002
               
               /done:                  ; Done
00af ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = TX byte shift register
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = Updated TX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cTxByte:
                                       ; Bail out if an error has occurred
00b0 ---- ea00                         cmp         R6, #0
00b1 ---- be1b                         bnz         /done
               
               
                                       ; Transmit each bit in the data byte ...
00b2 ---- b50e                         loop        #8, /byteLoopEnd
               
                                           ; Output the bit to SDA
00b3 ---- fda1                             lsl         R7, #1
00b4 8601 fc00                             tst         R7, #0x0100
00b6 ---- b602                             bz          /dataSdaLow
00b7 ---- 660f /dataSdaHigh:                   iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
00b8 ---- 8e02                             bra         /dataSdaDone
00b9 ---- 460f /dataSdaLow:                    iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
00ba ---- fd47                             nop
               /dataSdaDone:
                                           ; Wait T_LOW
00bb ---- 53fa                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (7))
00bc ---- 149e                             jsr         I2cWaitDelay
               
                                           ; SCL = pull-up
00bd ---- 670f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                           ; Wait for SCL stretching to end or time out
00be ---- 14a1                             jsr         I2cWaitSclStretch
               
                                           ; Wait T_HIGH
00bf ---- 53fd                             ld          R5, #-(I2C_BASE_DELAY - (I2C_WAIT_STRETCH_DELAY + 1))
00c0 ---- 149e                             jsr         I2cWaitDelay
               
                                           ; SCL = driven low
00c1 ---- 470f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:
               
                                       ; Receive the ACK bit
                                       ; SDA = pull-up
00c2 ---- 660f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_LOW
00c3 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
00c4 ---- 149e                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
00c5 ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
00c6 ---- 14a1                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_HIGH
00c7 ---- 53fa                         ld          R5, #-((I2C_BASE_DELAY) - (3))
00c8 ---- 149e                         jsr         I2cWaitDelay
               
                                       ; Read and store the SDA value in the status word
00c9 ---- 2613                         iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
00ca ---- a601                         biob0       /ackSdaLow
00cb ---- e201                             or          R6, #0x01
               /ackSdaLow:
                                       ; SCL = driven low
00cc ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
               
               /done:                  ; Done
00cd ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = Acknowledgment bit value, 0x0000 to transmit ACK, 0x0001 to transmit NAK
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = RX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cRxByte:
                                       ; Bail out if an error has occurred
00ce ---- ea00                         cmp         R6, #0
00cf ---- be1c                         bnz         /done
               
               
                                       ; Receive each bit in the data byte ...
00d0 ---- b50b                         loop        #8, /byteLoopEnd
               
                                           ; SDA = pull-up
00d1 ---- 660f                             iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                           ; Wait T_LOW
00d2 ---- 53f5                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
00d3 ---- 149e                             jsr         I2cWaitDelay
               
                                           ; SCL = pull-up
00d4 ---- 670f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                           ; Wait for SCL stretching to end or time out
00d5 ---- 14a1                             jsr         I2cWaitSclStretch
               
                                           ; Wait T_HIGH
00d6 ---- 53ff                             ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 3))
00d7 ---- 149e                             jsr         I2cWaitDelay
               
                                           ; Read and store SDA
00d8 ---- fda1                             lsl         R7, #1
00d9 ---- 2613                             iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
00da ---- a601                             biob0       /dataSdaLow
00db ---- f201                                 or          R7, #0x01
               /dataSdaLow:
                                           ; SCL = driven low
00dc ---- 470f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:
               
                                       ; Transmit the ACK bit, which is now in bit 8 of the shift register
                                       ; Output the bit to SDA
00dd 8601 fc00                         tst         R7, #0x0100
00df ---- b602                         bz          /ackSdaLow
00e0 ---- 660f /ackSdaHigh:                iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
00e1 ---- 8e02                         bra         /ackSdaDone
00e2 ---- 460f /ackSdaLow:                 iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
00e3 ---- fd47                         nop
               /ackSdaDone:
                                       ; Wait T_LOW
00e4 ---- 53f9                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (6))
00e5 ---- 149e                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
00e6 ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
00e7 ---- 14a1                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_HIGH
00e8 ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
00e9 ---- 149e                         jsr         I2cWaitDelay
               
                                       ; SCL = driven low
00ea ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Mask the ACK bit in the received data
00eb ---- f0ff                         and         R7, #0xFF
               
               
               /done:                  ; Done
00ec ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R5
               I2cStop:
                                       ; SDA = driven low
00ed ---- 460f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_LOW
00ee ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
00ef ---- 149e                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
00f0 ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
00f1 ---- 14a1                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_SU_STO
00f2 ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
00f3 ---- 149e                         jsr         I2cWaitDelay
               
                                       ; SDA = pull-up
00f4 ---- 660f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_BUF
00f5 ---- 53f5                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
00f6 ---- 149e                         jsr         I2cWaitDelay
               
                                       ; Done
00f7 ---- adb7                         rts
               .segment end "Procedure Libary"
               

; Generated by MCT163S09 at 2018-05-01 17:47:36.911
